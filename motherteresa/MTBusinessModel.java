/*
 * MTBusinessModel.java
 *
 * Created on December 7, 2002, 11:09 AM
 */

package motherteresa;

//import java.util.Collection;
//import java.util.List;
import java.sql.*;
import java.util.*;
import java.text.*;

/**
 *
 * @author  Hein Badenhorst
 */
public class MTBusinessModel
{
           
    protected ArrayList tableNames;
    private ArrayList crossLinkList;
    protected HashMap lockIndicator;
    private int tableCount;    
    private HashMap dbAccessCollection;
    private HashMap dbWrapUpAccessCollection;
    private HashMap lookupTableDataCollection;
    private HashMap autoSelectFieldCollection;
    private HashMap groupedTableDataCollection;
    private HashMap groupedTableData;
    private HashMap groupLookupTableDataCollection;
    private ArrayList synonymNameList;
    private HashMap labelByTableCollection;
    private HashMap fieldByTableCollection;
    private HashMap groupLookupTableData;
    private HashMap groupTableCrossLinks;
    private HashMap dependanceTableLinks;
    private ArrayList dependantItemList;
    private HashMap fieldFilterList;
    private HashMap lookupTableCrossLinks;
    private HashMap labelDispCoordinateCollection;
    private HashMap fieldDispCoordinateCollection;
    private HashMap objectDispCoordinateCollection;
    private HashMap tableRowDisplayHeightCollection;
    private HashMap lookupTableData;
    private HashMap tableAliases;
    private HashMap tabSymbols;
    private ArrayList selectTableHeadings;
    private String groupName = null;
    private String keyName = null;
    private String groupField = null;
    private String errorMessage = null;
    public DBAccess dbAccessInstance;
    protected String sqlString = null;
    protected ResultSet RS = null;
    protected String sqlQuery = null;
    private String accountNumber = "";
    private String secondaryWrapUpTableName = "";
    private String primaryWrapUpTableName = "";
    private int result = 0;
    private int componentWidth = 0;
    private int componentHeight = 0;
    private int componentRows = 10;
    private int componentCols = 4;
    private int componentPanelWidth = 600;
    private int componentPanelHeight = 500;
    private String strDateTime = "";
    private int updateButtonEvent = 0;
    private Set fieldSet = null;
    private Iterator fieldIter = null;
    private ArrayList inputList;
    private HashMap mapByInputCollection;
    private HashMap inputByMapCollection;
    private HashMap mapByInputNameCollection;
    private HashMap inputByMapNameCollection;
    private HashMap comboBoxDefaultCollection;
    private HashMap updateSynopsisCollection;
    private HashMap upperBoundCollection;
    private HashMap lowerBoundCollection;
    private HashMap noDisplayCollection;
    private HashMap comboBoxInactiveStateCollection;
    private HashMap comboBoxActiveStateCollection;
    private HashMap dependantItemActivityMap;
    private HashMap dependanceItemType;
    private HashMap synonymTableInfoCollection;
    private ArrayList symptomList;
    final static long CBCIV_START = 0xfedcba9876543210L;
    private MTUtils utilsInstance = new MTUtils();
    private String xmlFileName = null;
    private HashMap looseTextItemMapList = null;
    private HashMap labelTextVarMap = null;
    private String dataSourceTable  = null;
    private String dataSourceField  = null;
    private ArrayList dateListArray = null;
    private String systemicSymptom = null;
    private String theFamilyType = null;
    private String theOccupationType = null;
    private HashMap updateFieldNameChange = null;
    private String examinationType = null;
    private HashMap xMLTableCollection = null;


    
    /** Creates a new instance of MTBusinessModel */
    public MTBusinessModel(String BMName, String theOS, String userName, char[] password) throws MTException 
    {
        //set default component width and height
        componentHeight = 25;
        componentWidth = 250;
        componentRows = 6;
        componentCols = 4;
        //set default container panel width and height
        componentPanelHeight = 500;
        componentPanelWidth = 600;
        try
        {
            if (BMName.equalsIgnoreCase("NEWPATIENT"))
            {
                initCaptureNewPatientModel(theOS, userName, password);
                //Add rest of model inits here
            }  else
            if (BMName.equalsIgnoreCase("NEWDISEASE"))
            {
                initCaptureNewDiseaseModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETDISEASE"))
            {
                initGetDiseaseModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETSYMPTOMS"))
            {
                initGetSymptomsModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETANATOMY"))
            {
                initGetAnatomyModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETSURGERY"))
            {
                initGetSurgeryModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETTREATMENT"))
            {
                initGetTreatmentModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETALLERGY"))
            {
                initGetAllergyModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETPLACENAME"))
            {
                initGetPlaceNameModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("GETCOUNTRYNAME"))
            {
                initGetCountryNameModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("NEWSURGERY"))
            {
                initCaptureNewSurgeryModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("NEWSYMPTOM"))
            {
                initCaptureNewSymptomModel(theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("NEWEMPLOYER"))
            {
                initCaptureNewEmployerModel(theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("NEWSPECIALIST"))
            {
                initCaptureNewSpecialistModel(theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("NEWMEDICALAID"))
            {
                initCaptureNewMedicalAidModel(theOS, userName, password);
            }  else
                
            if (BMName.equalsIgnoreCase("NEWTESTINST"))
            {
                initCaptureNewTestInstModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("NEWTEST"))
            {
                initCaptureNewTestModel(theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("SELECTPATIENT"))
            {
                initSelectPatientModel(theOS, userName, password);
            }   else
            if (BMName.equalsIgnoreCase("SELECTDAY"))
            {
                initSelectDayModel(theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("NEWPHYSICIAN"))
            {
                initAddPhysicianModel(theOS, userName, password);
            } 
        }
        catch (MTException e)
        {
              throw e;
        }
    }
    

    public MTBusinessModel(String BMName, String keyValue, String theOS, String userName, char[] password) throws MTException 
    {
        //set default component width and height
        componentHeight = 25;
        componentWidth = 250;
        componentRows = 6;
        componentCols = 4;
        //set default container panel width and height
        componentPanelHeight = 500;
        componentPanelWidth = 600;
        try
        {
            if (BMName.equalsIgnoreCase("EDITBASIC"))
            {
                initEditPatientBasicModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITVITAL"))
            {
                initEditPatientVitalModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITTREATMENT"))
            {
                initEditPatientTreatmentModel(keyValue, theOS, userName, password);
            } else
            //if (BMName.equalsIgnoreCase("ADDTREATMENT"))
            //{
            //    initAddPatientTreatmentModel(keyValue, theOS, userName, password);
            //} else
            if (BMName.equalsIgnoreCase("ADDVITALS"))
            {
                initAddPatientVitalModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDSYMPTOM"))
            {
                initAddPatientSymptomModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITSYMPTOM"))
            {
                initEditPatientSymptomModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDDIAGNOSES"))
            {
                initAddPatientDiagnosesModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDCONDITION"))
            {
                initAddPatientCondition(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDCONSTITUTIONAL"))
            {
                initAddPatientConstitutional(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDFOLLOWUPCOMPLAINT"))
            {
                initAddFollowUpPatientComplaint(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDCOMPLAINT"))
            {
                initAddPatientComplaint(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYCOMPLAINT"))
            {
                initDisplayPatientComplaintModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYMEDHISTORY"))
            {
                initDisplayMedicalHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYSURGHISTORY"))
            {
                initDisplaySurgicalHistoryModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("EDITDIAGNOSES"))
            {
                initEditPatientDiagnosesModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSURGERY"))
            {
                initAddPatientSurgeryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITSURGERY"))
            {
                initEditPatientSurgeryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDHABIT"))
            {
                initAddPatientHabitModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITHABIT"))
            {
                initEditPatientHabitModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTEST"))
            {
                initAddPatientTestModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITTEST"))
            {
                initEditPatientTestModel(keyValue, theOS, userName, password);
            } else
            //if (BMName.equalsIgnoreCase("ADDALLERGY"))
            //{
            //    initAddPatientAllergyModel(keyValue, theOS, userName, password);
            //} else
            if (BMName.equalsIgnoreCase("EDITALLERGY"))
            {
                initEditPatientAllergyModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTRAVEL"))
            {
                initAddPatientTravelModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITTRAVEL"))
            {
                initEditPatientTravelModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDFAMILY"))
            {
                initAddPatientFamilyModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITFAMILY"))
            {
                initEditPatientFamilyModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDIMMUNIZATION"))
            {
                initAddPatientImmunizationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITIMMUNIZATION"))
            {
                initEditPatientImmunizationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDINJURY"))
            {
                initAddPatientInjuryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITINJURY"))
            {
                initEditPatientInjuryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPOISONING"))
            {
                initAddPatientPoisoningModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITPOISONING"))
            {
                initEditPatientPoisoningModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDCONDITION"))
            {
                initAddPatientConditionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITCONDITION"))
            {
                initEditPatientConditionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYCONDITION"))
            {
                initDisplayPatientConditionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTESTREF"))
            {
                initAddTestReferralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITTESTREF"))
            {
                initEditTestReferralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSPECIALISTREF"))
            {
                initAddSpecialistReferralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITSPECIALISTREF"))
            {
                initEditSpecialistReferralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPRESCRIPTION"))
            {
                initAddPrescriptionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITPRESCRIPTION"))
            {
                initEditPrescriptionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDOCCUPATION"))
            {
                initAddPatientOccupationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITOCCUPATION"))
            {
                initEditPatientOccupationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYBASIC"))
            {
                initDisplayPatientBasicModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYALLPATIENT"))
            {
                initDisplayPatientFullReportModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYVITALSIGNS"))
            {
                initDisplayPatientVitalModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYINJURY"))
            {
                initDisplayPatientInjuryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYPOISONING"))
            {
                initDisplayPatientPoisoningModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYSYMPTOM"))
            {
                initDisplayPatientSymptomModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYDIAGNOSES"))
            {
                initDisplayPatientDiagnosesModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTESTS"))
            {
                initDisplayPatientTestModel(keyValue, theOS, userName, password);
            } else
            //if (BMName.equalsIgnoreCase("DISPLAYTREATMENT"))
            //{
            //    initDisplayPatientTreatmentModel(keyValue, theOS, userName, password);
            //} else
            if (BMName.equalsIgnoreCase("DISPLAYSURGERY"))
            {
                initDisplayPatientSurgeryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYHABITS"))
            {
                initDisplayPatientHabitModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYFAMILY"))
            {
                initDisplayPatientFamilyModel(keyValue, theOS, userName, password);
            } else
            //if (BMName.equalsIgnoreCase("DISPLAYALLERGY"))
            //{
            //    initDisplayPatientAllergyModel(keyValue, theOS, userName, password);
            //} else
            if (BMName.equalsIgnoreCase("DISPLAYIMMUNIZATION"))
            {
                initDisplayPatientImmunizationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTRAVEL"))
            {
                initDisplayPatientTravelModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTESTREF"))
            {
                initDisplayTestRefModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYSPECIALISTREF"))
            {
                initDisplaySpecialistReferralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYOCCHISTORY"))
            {
                initDisplayPatientOccupationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYPRESCRIPTION"))
            {
                initDisplayPrescriptionModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDAPPOINTMENT"))
            {
                initAddAppointmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("EDITAPPOINTMENT"))
            {
                initEditAppointmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYAPPOINTMENT"))
            {
                initDisplayAppointmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTHYROID"))
            {
                initAddPatientThyroid(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDADRENAL"))
            {
                initAddPatientAdrenal(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPITUITARY"))
            {
                initAddPatientPituitary(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPARATHYROID"))
            {
                initAddPatientParaThyroid(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPANCREAS"))
            {
                initAddPatientPancreas(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDGONADS"))
            {
                initAddPatientGonads(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYSYSTEMIC"))
            {
                initDisplayPatientSystemicModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPMH"))
            {
                initAddPreviousMedicalHistory(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPSH"))
            {
                initAddPreviousSurgicalHistory(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYFAMILYHISTORY"))
            {
                initDisplayFamilyHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSOCIALHISTORY"))
            {
                initAddPatientSocialHistory(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYSOCIALHISTORY"))
            {
                initDisplaySocialHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDCURRENTOCCUPATION"))
            {
                initAddCurrentOccupationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDPREVIOUSOCCUPATION"))
            {
                initAddPreviousOccupationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYOCCUPATIONHISTORY"))
            {
                initDisplayOccupationHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTREATMENT"))
            {
                initAddTreatmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTREATMENT"))
            {
                initDisplayTreatmentHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDALLERGY"))
            {
                initAddAllergyHistory(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYALLERGY"))
            {
                initDisplayAllergyHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTRAVELHISTORY"))
            {
                initAddTravelHistory(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTRAVELHISTORY"))
            {
                initDisplayTravelHistoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMGENERAL"))
            {
                initAddExamGeneralModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMCARDIOVASCULAR"))
            {
                initAddExamCardiovascularModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMRESPIRATORY"))
            {
                initAddExamRespiratoryModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMABDOMINAL"))
            {
                initAddExamAbdominalModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMMUSCULOSKELETAL"))
            {
                initAddExamMusculoskeletalModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMUROMALE"))
            {
                initAddExamUrogenitalMaleModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDEXAMUROFEMALE"))
            {
                initAddExamUrogenitalFemaleModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDEXAMUROURINE"))
            {
                initAddExamUrogenitalUrineModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDEXAMENDO"))
            {
                initAddExamEndocrineModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDEXAMCNS"))
            {
                initAddExamCNSModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDENTEAR"))
            {
                initAddExamENTEarModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDENTNOSE"))
            {
                initAddExamENTNoseModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDENTPNS"))
            {
                initAddExamENTPNSModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDENTTHROAT"))
            {
                initAddExamENTThroatModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDEXAMDERMA"))
            {
                initAddExamDermatologicalModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("ADDEXAMHEMA"))
            {
                initAddExamHematologicalModel(keyValue, theOS, userName, password);
            }   else
            if (BMName.equalsIgnoreCase("ADDEXAMEYES"))
            {
                initAddExamEyesModel(keyValue, theOS, userName, password);
            }  else
            if (BMName.equalsIgnoreCase("DISPLAYEXAMINATION"))
            {
                initDisplayPatientExaminationModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDASSESMENT"))
            {
                initAddMedicalAssesment(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDFOLLOWUPASSESMENT"))
            {
                initAddFollowUpMedicalAssesment(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYASSESMENT"))
            {
                initDisplayAssesmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDTREATMENTPLAN"))
            {
                initAddPlanTreatmentModel(keyValue, theOS, userName, password);
            }   else
            if (BMName.equalsIgnoreCase("ADDFOLLOWUPTREATMENTPLAN"))
            {
                initAddFollowUpPlanTreatmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYTREATMENTPLAN"))
            {
                initDisplayPlanTreatmentModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("DISPLAYDIAGBYSYMPTOM"))
            {
                initDiagnosticAidBySymptomModel(keyValue, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("SYMPTOMFIX"))
            {
                //initSymptomFixModel(keyValue, theOS, userName, password);
            }
        }
        catch (MTException e)
        {
              throw e;
        }
    }


    public MTBusinessModel(String BMName, String keyValue, String subSelectionCode, String theOS, String userName, char[] password) throws MTException 
    {
        //set default component width and height
        componentHeight = 25;
        componentWidth = 250;
        componentRows = 6;
        componentCols = 4;
        //set default container panel width and height
        componentPanelHeight = 500;
        componentPanelWidth = 600;
        try
        {
            if (BMName.equalsIgnoreCase("ADDSYSTEMICCARDIOVASCULAR"))
            {
                initAddPatientSystemicCardiovascular(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICRESPIRATORY"))
            {
                initAddPatientSystemicRespiratory(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICABDOMINAL"))
            {
                initAddPatientSystemicAbdominal(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICMUSCULOSKELETAL"))
            {
                initAddPatientSystemicMusculoskeletal(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICCNS"))
            {
                initAddPatientSystemicCNS(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICENT"))
            {
                initAddPatientSystemicENT(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICDERMA"))
            {
                initAddPatientSystemicDermatolocical(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICHEMA"))
            {
                initAddPatientSystemicHematolocical(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICEYES"))
            {
                initAddPatientSystemicEyes(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDSYSTEMICUROGENITAL"))
            {
                initAddPatientSystemicUrogenital(keyValue, subSelectionCode, theOS, userName, password);
            } else
            if (BMName.equalsIgnoreCase("ADDFAMILYHISTORY"))
            {
                initAddPatientFamilyHistory(keyValue, subSelectionCode, theOS, userName, password);
            }
        }
        catch(MTException e)
        {
            throw e;
        } 
    }
    
    public MTBusinessModel(String mainItem, ArrayList tableInfo, String theOS, String userName, char[] password) throws MTException 
    {
        try
        {
            buildDynamicSynonymList(mainItem, tableInfo, theOS, userName ,password);
        }
        catch (MTException e)
        {
              throw e;
        }
    }

    public void setTableCount(int tableCount)
    {
       dbAccessCollection = new HashMap(tableCount);
       tabSymbols = new HashMap(tableCount);
       tableAliases = new HashMap(tableCount);
       tableNames = new ArrayList(tableCount);
       this.tableCount =  tableCount;
    }
    
    public ArrayList getTableNames()
    {
        return this.tableNames;
    }

    public String getDataSourceTable()
    {
        return this.dataSourceTable;
    }
    
    public String getDataSourceField()
    {
        return this.dataSourceField;
    }

    public String getExaminationType()
    {
        return this.examinationType;
    }

    public String getXMLFileName()
    {
        return this.xmlFileName;
    }

    public HashMap getTableAliases()
    {
        return this.tableAliases;
    }
    
    public HashMap getTabSymbols()
    {
        return this.tabSymbols;
    }

    public HashMap getXMLTableCollection()
    {
        return this.xMLTableCollection;
    }

    public String getSystemicSymptom()
    {
        return this.systemicSymptom;
    }

    public String getFamilyType()
    {
        return this.theFamilyType;
    }

    public String getOccupationType()
    {
        return this.theOccupationType;
    }
   
    public String getGroupName()
    {
        return this.groupName;
    }

    public String getKeyName()
    {
        return this.keyName;
    }

    public int getTableCount()
    {
        return this.tableCount;
    }

    public int getComponentHeight()
    {
        return this.componentHeight;
    }
    
    public int getComponentWidth()
    {
        return this.componentWidth;
    }
    
    public int getComponentRows()
    {
        return this.componentRows;
    }

    public int getComponentCols()
    {
        return this.componentCols;
    }

    public int getComponentPanelWidth()
    {
        return this.componentPanelWidth;
    }

    public ArrayList getSynonymNameList()
    {
        return this.synonymNameList;
    }

    public int getComponentPanelHeight()
    {
        return this.componentPanelHeight;
    }

    public String getErrorMessage()
    {
        return this.errorMessage;
    }

    public HashMap getdbAccessCollection()
    {
        return this.dbAccessCollection;
    }
    
    public HashMap getLooseTextItemMapList()
    {
        return this.looseTextItemMapList;
    }

    public ArrayList getDateListArray()
    {
        return this.dateListArray;
    }

    public HashMap getLabelTextVarMap()
    {
        return this.labelTextVarMap;
    }

    public HashMap getdbWrapUpAccessCollection()
    {
        return this.dbWrapUpAccessCollection;
    }
    
    public HashMap getLabelDispCoordinateCollection()
    {
        return this.labelDispCoordinateCollection;
    }
    
    public HashMap getFieldDispCoordinateCollection()
    {
        return this.fieldDispCoordinateCollection;
    }
    
    public HashMap getObjectDispCoordinateCollection()
    {
        return this.objectDispCoordinateCollection;
    }

    public HashMap gettableRowDisplayHeightCollection()
    {
        return this.tableRowDisplayHeightCollection;
    }

    public HashMap getUpdateFieldNameChange()
    {
        return this.updateFieldNameChange;
    }

   public HashMap getLookupTableDataCollection()
    {
        return this.lookupTableDataCollection;
    }

    public HashMap getAutoSelectFieldCollection()
    {
        return this.autoSelectFieldCollection;
    }

    public HashMap getComboBoxDefaultCollection()
    {
        return this.comboBoxDefaultCollection;
    }

    public HashMap getUpdateSynopsisCollection()
    {
        return this.updateSynopsisCollection;
    }

    public HashMap getcomboBoxInactiveStateCollection()
    {
        return this.comboBoxInactiveStateCollection;
    }

    public HashMap getcomboBoxActiveStateCollection()
    {
        return this.comboBoxActiveStateCollection;
    }

    public HashMap getDependantItemActivityMap()
    {
        return this.dependantItemActivityMap;
    }
    public HashMap getSynonymTableInfoCollection()
    {
        return this.synonymTableInfoCollection;
    }

    public HashMap getFieldFilterList()
    {
        return this.fieldFilterList;
    }

    public HashMap getGroupLookupTableDataCollection()
    {
        return this.groupLookupTableDataCollection;
    }

    public HashMap getLabelByTableCollection()
    {
        return this.labelByTableCollection;
    }

    public HashMap getFieldByTableCollection()
    {
        return this.fieldByTableCollection;
    }

    public HashMap getGroupedTableDataCollection()
    {
        return this.groupedTableDataCollection;
    }

    public HashMap getLookupTableCrossLinks()
    {
        return this.lookupTableCrossLinks;
    }

    public HashMap getGroupTableCrossLinks()
    {
        return this.groupTableCrossLinks;
    }

    public HashMap getDependanceTableLinks()
    {
        return this.dependanceTableLinks;
    }
    
    public HashMap getDependanceItemTypes()
    {
        return this.dependanceItemType;
    }

    public ArrayList getSelectTableHeadings()
    {
        return this.selectTableHeadings;
    }

    public HashMap getMapByInputCollection()
    {
        return this.mapByInputCollection;
    }
    
    public HashMap getInputByMapCollection()
    {
        return this.inputByMapCollection;
    }

    public HashMap getMapByInputNameCollection()
    {
        return this.mapByInputNameCollection;
    }

    public HashMap getInputByMapNameCollection()
    {
        return this.inputByMapNameCollection;
    }

    public HashMap getUpperBoundCollection()
    {
        return this.upperBoundCollection;
    }

    public HashMap getLowerBoundCollection()
    {
        return this.lowerBoundCollection;
    }

    public HashMap getNoDisplayCollection()
    {
        return this.noDisplayCollection;
    }
    
    public ArrayList getInputList()
    {
        return this.inputList;
    }

    public void setPrimaryWrapUpTableName(String tableName)
    {
       this.primaryWrapUpTableName = tableName; 
    }

    public void setSecondaryWrapUpTableName(String tableName)
    {
       this.secondaryWrapUpTableName = tableName; 
    }

    public String getPrimaryWrapUpTableName()
    {
       return this.primaryWrapUpTableName; 
    }

    public String getSecondaryWrapUpTableName()
    {
       return this.secondaryWrapUpTableName; 
    }

    public int getUpdateButtonEvent()
    {
       return this.updateButtonEvent; 
    }

    public String decrypCBC(String binHexMessage, byte[] dbKey, int binHexMessageSize)
    {
           BlowfishCBC bfcbc = new BlowfishCBC(dbKey, CBCIV_START);
           byte[] messbuf = new byte[binHexMessageSize];
           int buffSize = 50;
           
           int intResult = BinConverter.binHexToBytes(binHexMessage,messbuf,0,0,binHexMessageSize);
           bfcbc.setCBCIV(CBCIV_START);
           bfcbc.decrypt(messbuf);
           bfcbc.cleanUp();
           String result =  new String(messbuf).trim();
           return result;
    }

    public void initCaptureNewPatientModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT ACCOUNT_NUMBER FROM MAX_INDEXES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MAX_INDEXES", userName, password, _theOS);
//added this for record locking
            strNextNumber = dbAccessInstance.getNextAccountNum();            
            
            accountNumber = strNextNumber;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", strNextNumber);
            //OK Now lock the table for write
            //String tableLock = "LOCK TABLES PATIENT_PHYSICAL WRITE";
            //dbAccessInstance.updateUsingSQL(tableLock);
            
            
            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Personal");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient Personal Information");

            
            dbWrapUpAccessCollection = new HashMap(1);
            
            updateButtonEvent =  MenuStateMachine.basic_update_button_pressed_event;

            
            sqlQuery = "SELECT MAX(HISTORY_SEQ_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(HISTORY_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("HISTORY_SEQ_NUMBER", strNextNumber);
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            lookupTableDataCollection = new HashMap(8);

            sqlQuery = "SELECT MEDICAL_AID_CODE, MEDICAL_AID_NAME FROM MEDICAL_AID_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEDICAL_AID_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT GENDER_TYPE_CODE, GENDER_TYPE_DESCRIPTION FROM GENDER_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GENDER_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GENDER_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LANGUAGE_CODE, LANGUAGE_DESCRIPTION FROM LANGUAGE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LANGUAGE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LANGUAGE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PATIENT_TYPE_CODE, PATIENT_TYPE_DESCRIPTION FROM PATIENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PATIENT_TYPE_CODE", (Object)lookupTableData);
                      
            sqlQuery = "SELECT TITLE_CODE, TITLE_DESCRIPTION FROM TITLE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TITLE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TITLE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)lookupTableData);

            
            sqlQuery = "SELECT OCCUPATION_CODE, OCCUPATION_DESCRIPTION FROM OCCUPATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"OCCUPATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT EMPLOYER_CODE, EMPLOYER_NAME FROM EMPLOYER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EMPLOYER_CODE", (Object)lookupTableData);


            //Add Group Display Name
            groupName = new String("Patient Medical Data Capture");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initCaptureNewDiseaseModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(DISEASE_SEQUENCE_NUMBER) FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DISEASE_SEQUENCE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DISEASE_SEQUENCE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"DISEASES",(Object)dbAccessInstance);
            tableNames.add((Object)"DISEASES");
            tabSymbols.put((Object)"DISEASES", (Object)"Diseases");
            tableAliases.put((Object)"DISEASES", (Object)"Diseases Information");
            //Add Group Display Name

            groupName = new String("Disease Table Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewSurgeryModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(SURGERY_SEQUENCE_NUMBER) FROM SURGERY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SURGERY_SEQUENCE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DISEASE_SEQUENCE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SURGERY",(Object)dbAccessInstance);
            tableNames.add((Object)"SURGERY");
            tabSymbols.put((Object)"SURGERY", (Object)"Surgery");
            tableAliases.put((Object)"SURGERY", (Object)"Surgery Information");
            //Add Group Display Name

            groupName = new String("Surgery Table Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewSpecialistModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(SPECIALIST_INTERNAL_REF_NUMBER) FROM SPECIALIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SPECIALIST_INTERNAL_REF_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SPECIALIST_INTERNAL_REF_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SPECIALIST",(Object)dbAccessInstance);
            tableNames.add((Object)"SPECIALIST");
            tabSymbols.put((Object)"SPECIALIST", (Object)"Specialist");
            tableAliases.put((Object)"SPECIALIST", (Object)"Specialist Information");
            //Add Group Display Name

            groupName = new String("Specialist Table Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SPECIALIST_CODE, SPECIALIST_DESCRIPTION FROM SPECIALIST_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPECIALIST_CODE", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewEmployerModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(EMPLOYER_CODE) FROM EMPLOYER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EMPLOYER_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EMPLOYER_CODE", strNextNumber);
            dbAccessCollection.put((Object)"EMPLOYER",(Object)dbAccessInstance);
            tableNames.add((Object)"EMPLOYER");
            tabSymbols.put((Object)"EMPLOYER", (Object)"Employer");
            tableAliases.put((Object)"EMPLOYER", (Object)"Employer Information");
            //Add Group Display Name

            groupName = new String("Employer Table Maintenance");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewMedicalAidModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(MEDICAL_AID_CODE) FROM MEDICAL_AID_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(MEDICAL_AID_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("MEDICAL_AID_CODE", strNextNumber);
            dbAccessCollection.put((Object)"MEDICAL_AID_TYPE",(Object)dbAccessInstance);
            tableNames.add((Object)"MEDICAL_AID_TYPE");
            tabSymbols.put((Object)"MEDICAL_AID_TYPE", (Object)"Medical Aid");
            tableAliases.put((Object)"MEDICAL_AID_TYPE", (Object)"Medical Information");
            //Add Group Display Name

            groupName = new String("Medical Aid Table Maintenance");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewTestInstModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(INSTITUTION_SEQ_NUMBER) FROM TEST_INSTITUTION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(INSTITUTION_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("INSTITUTION_SEQ_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"TEST_INSTITUTION",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_INSTITUTION");
            tabSymbols.put((Object)"TEST_INSTITUTION", (Object)"Test Facility");
            tableAliases.put((Object)"TEST_INSTITUTION", (Object)"Test Facility");
            //Add Group Display Name

            groupName = new String("Test Facility Table Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT INSTITUTION_TYPE_CODE, INSTITUTION_DESCRIPTION FROM TEST_INSTITUTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INSTITUTION_TYPE_CODE", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initCaptureNewSymptomModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(SYMPTOM_SEQUENCE_NUMBER) FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYMPTOM_SEQUENCE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYMPTOM_SEQUENCE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYMPTOMS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYMPTOMS");
            tabSymbols.put((Object)"SYMPTOMS", (Object)"Symptoms");
            tableAliases.put((Object)"SYMPTOMS", (Object)"Symptom Information");
            //Add Group Display Name

            groupName = new String("Symptom Table Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initCaptureNewTestModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            sqlQuery = "SELECT MAX(TEST_SEQUENCE_NUMBER) FROM TESTS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TESTS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TEST_SEQUENCE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TESTS", userName, password, _theOS);
            //typeDBAccess.dataTable.addOrReplaceElement(rowLoop, colLoop, (String)this.getValueAt(rowLoop,colLoop));
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TEST_SEQUENCE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"TESTS",(Object)dbAccessInstance);
            tableNames.add((Object)"TESTS");
            tabSymbols.put((Object)"TESTS", (Object)"Tests");
            tableAliases.put((Object)"TESTS", (Object)"Test Information");
            //Add Group Display Name

            groupName = new String("Test Table Maintenance");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetDiseaseModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            dbAccessInstance.addInputFieldList("DISEASE_SEQUENCE_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("DISEASE_ICD_CODE","NULL");
            dbAccessInstance.addInputFieldList("DISEASE_NAME","NULL");
            dbAccessInstance.addInputFieldList("DISEASE_DESCRIPTION","NULL");
            dbAccessInstance.addInputFieldList("PREVENTION","NULL");
            dbAccessInstance.addInputFieldList("SYMPTOMS","NULL");
            dbAccessInstance.addInputFieldList("SYSTEM_CATEGORY_CODE","NULL");
            dbAccessInstance.addInputFieldList("TESTS","NULL");
            dbAccessInstance.addInputFieldList("TREATMENT","NULL");
            dbAccessInstance.addInputFieldList("PROGNOSIS","NULL");
            dbAccessInstance.addInputFieldList("COMPLICATIONS","NULL");
            dbAccessInstance.addInputFieldList("DATA_SOURCE_CODE","NULL");

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"DISEASES",(Object)dbAccessInstance);
            tableNames.add((Object)"DISEASES");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initGetSymptomsModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            dbAccessInstance.addInputFieldList("SYMPTOM_SEQUENCE_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("SYMPTOM_NAME","NULL");
            dbAccessInstance.addInputFieldList("SYMPTOM_DESCRIPTION","NULL");
            dbAccessInstance.addInputFieldList("SYSTEM_CATEGORY_MAP","NULL");
            dbAccessInstance.addInputFieldList("RISKS","NULL");
            dbAccessInstance.addInputFieldList("NORMAL_VALUES","NULL");
            dbAccessInstance.addInputFieldList("DATA_SOURCE_CODE","1");
            

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"SYMPTOMS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYMPTOMS");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetAnatomyModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            dbAccessInstance.addInputFieldList("ANATOMICAL_LOCATION_CODE","NULL");
            dbAccessInstance.addInputFieldList("LOCATION_DESCRIPTION","NULL");

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"ANATOMICAL_LOCATION",(Object)dbAccessInstance);
            tableNames.add((Object)"ANATOMICAL_LOCATION");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetSurgeryModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);

            dbAccessInstance.addInputFieldList("SURGERY_SEQUENCE_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("SURGERY_ICD_CODE","NULL");
            dbAccessInstance.addInputFieldList("SURGERY_NAME","NULL");
            dbAccessInstance.addInputFieldList("SURGERY_ALTERNATE_NAMES","NULL");
            dbAccessInstance.addInputFieldList("SURGERY_DESCRIPTION","NULL");
            dbAccessInstance.addInputFieldList("SYSTEM_CATEGORY_CODE","NULL");
            dbAccessInstance.addInputFieldList("INDICATIONS","NULL");
            dbAccessInstance.addInputFieldList("EXPECTATIONS","NULL");
            dbAccessInstance.addInputFieldList("CONVALESCENCE","NULL");
            dbAccessInstance.addInputFieldList("RISKS","NULL");
            dbAccessInstance.addInputFieldList("DATA_SOURCE_CODE","1");


            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"SURGERY",(Object)dbAccessInstance);
            tableNames.add((Object)"SURGERY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetTreatmentModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);

            dbAccessInstance.addInputFieldList("TREATMENT_CATEGORY_CODE","NULL");
            dbAccessInstance.addInputFieldList("TREATMENT_SEQUENCE_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("TREATMENT_ICD_CODE","NULL");
            dbAccessInstance.addInputFieldList("TREATMENT_NAME","NULL");
            dbAccessInstance.addInputFieldList("TREATMENT_DESCRIPTION","NULL");
            dbAccessInstance.addInputFieldList("RISKS","NULL");
            dbAccessInstance.addInputFieldList("PROGNOSIS","NULL");
            dbAccessInstance.addInputFieldList("DATA_SOURCE_CODE","1");
            dbAccessInstance.addInputFieldList("COMPLICATIONS","NULL");

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"TREATMENT");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetAllergyModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY", userName, password, _theOS);

            dbAccessInstance.addInputFieldList("ALLERGY_SEQUENCE_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("ALLERGY_CATEGORY_CODE","NULL");
            dbAccessInstance.addInputFieldList("ALLERGY_ICD_CODE","NULL");
            dbAccessInstance.addInputFieldList("ALLERGY_NAME","NULL");
            dbAccessInstance.addInputFieldList("ALLERGY_DESCRIPTION","NULL");
            dbAccessInstance.addInputFieldList("RISKS","NULL");
            dbAccessInstance.addInputFieldList("PROGNOSIS","NULL");
            dbAccessInstance.addInputFieldList("COMPLICATIONS","NULL");

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"ALLERGY",(Object)dbAccessInstance);
            tableNames.add((Object)"ALLERGY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetPlaceNameModel(String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLACE_LIST", userName, password, _theOS);

            dbAccessInstance.addInputFieldList("PLACE_LIST_CODE","NULL");
            dbAccessInstance.addInputFieldList("GEOGRAPHICAL_REGION_CODE","NULL");
            dbAccessInstance.addInputFieldList("PLACE_NAME","NULL");
            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"PLACE_LIST",(Object)dbAccessInstance);
            tableNames.add((Object)"PLACE_LIST");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initGetCountryNameModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "COUNTRY_LIST", userName, password, _theOS);

            dbAccessInstance.addInputFieldList("COUNTRY_CODE","NULL");
            dbAccessInstance.addInputFieldList("INTERNATIONAL_REGION_CODE","NULL");
            dbAccessInstance.addInputFieldList("COUNTRY_NAME","NULL");

            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"COUNTRY_LIST",(Object)dbAccessInstance);
            tableNames.add((Object)"COUNTRY_LIST");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initSelectDayModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            sqlQuery = "CREATE TEMPORARY TABLE tmp (DATELIST DATE NULL);";
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            dbAccessInstance.addInputFieldList("ACCOUNT_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("INITIALS","NULL");
            dbAccessInstance.addInputFieldList("FIRST_NAME","NULL");
            dbAccessInstance.addInputFieldList("SURNAME","NULL");
            dbAccessInstance.addInputFieldList("IDENTITY_NUMBER","NULL");
            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Patient Select");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient Selection Screen");
            selectTableHeadings = new ArrayList(2);
            selectTableHeadings.add((Object)"Account Number");
            selectTableHeadings.add((Object)"Patient Name/Id");
            //Add Group Display Name

            groupName = new String("Patient Data View/Maintenance");
            
            
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initSelectPatientModel(String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            dbAccessInstance.addInputFieldList("ACCOUNT_NUMBER","NULL");
            dbAccessInstance.addInputFieldList("INITIALS","NULL");
            dbAccessInstance.addInputFieldList("FIRST_NAME","NULL");
            dbAccessInstance.addInputFieldList("SURNAME","NULL");
            dbAccessInstance.addInputFieldList("IDENTITY_NUMBER","NULL");
            int result = dbAccessInstance.selectData();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }
            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Patient Select");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient Selection Screen");
            selectTableHeadings = new ArrayList(2);
            selectTableHeadings.add((Object)"Account Number");
            selectTableHeadings.add((Object)"Patient Name/Id");
            //Add Group Display Name

            groupName = new String("Patient Data View/Maintenance");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientBasicModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",keyValue);
            accountNumber = keyValue;
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Physical Data");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Physical Data Maintenance");

            lookupTableDataCollection = new HashMap(5);

            sqlQuery = "SELECT MEDICAL_AID_CODE, MEDICAL_AID_NAME FROM MEDICAL_AID_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEDICAL_AID_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LANGUAGE_CODE, LANGUAGE_DESCRIPTION FROM LANGUAGE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LANGUAGE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LANGUAGE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PATIENT_TYPE_CODE, PATIENT_TYPE_DESCRIPTION FROM PATIENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PATIENT_TYPE_CODE", (Object)lookupTableData);
                      
            sqlQuery = "SELECT TITLE_CODE, TITLE_DESCRIPTION FROM TITLE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TITLE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TITLE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)lookupTableData);
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientBasicModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            String strMaxNumber, strNextNumber = null;
            setTableCount(1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",keyValue);
            accountNumber = keyValue;
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Physical Data");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient");

            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Patient demographic report on " + strDateTime + " for: ");

            lookupTableDataCollection = new HashMap(6);

            sqlQuery = "SELECT MEDICAL_AID_CODE, MEDICAL_AID_NAME FROM MEDICAL_AID_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEDICAL_AID_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT GENDER_TYPE_CODE, GENDER_TYPE_DESCRIPTION FROM GENDER_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GENDER_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GENDER_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LANGUAGE_CODE, LANGUAGE_DESCRIPTION FROM LANGUAGE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LANGUAGE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LANGUAGE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PATIENT_TYPE_CODE, PATIENT_TYPE_DESCRIPTION FROM PATIENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PATIENT_TYPE_CODE", (Object)lookupTableData);
                      
            sqlQuery = "SELECT TITLE_CODE, TITLE_DESCRIPTION FROM TITLE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TITLE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TITLE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)lookupTableData);

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(24);
            fieldDispCoordinateCollection = new HashMap(24);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] theCombineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, theCombineList);

            sqlQuery = "SELECT HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY HIS_DATE_TIME";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dateListArray = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  "HIS_DATE_TIME", "DATETIME");
            
            
            xmlFileName = "displaypersonal.xml";

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            tableRowDisplayHeightCollection.put((Object)"PATIENT_PHYSICAL", (Object)"50");
            
            labelDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"LANGUAGE_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"LANGUAGE_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"GENDER_TYPE_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"GENDER_TYPE_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"PATIENT_TYPE_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_TYPE_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"TITLE_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"TITLE_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"INITIALS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"INITIALS", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"FIRST_NAME", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"FIRST_NAME", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"SURNAME", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"SURNAME", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"IDENTITY_NUMBER", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"IDENTITY_NUMBER", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"BIRTH_DAY", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"BIRTH_DAY", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_NUMBER", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_NUMBER", (Object)"15,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)"16,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)"16,2");
            labelDispCoordinateCollection.put((Object)"FILE_NUMBER", (Object)"17,1");
            fieldDispCoordinateCollection.put((Object)"FILE_NUMBER", (Object)"17,2");
            labelDispCoordinateCollection.put((Object)"HOME_PHONE_NUMBER", (Object)"18,1");
            fieldDispCoordinateCollection.put((Object)"HOME_PHONE_NUMBER", (Object)"18,2");
            labelDispCoordinateCollection.put((Object)"CELL_PHONE_NUMBER", (Object)"19,1");
            fieldDispCoordinateCollection.put((Object)"CELL_PHONE_NUMBER", (Object)"19,2");
            labelDispCoordinateCollection.put((Object)"WORK_PHONE_NUMBER", (Object)"20,1");
            fieldDispCoordinateCollection.put((Object)"WORK_PHONE_NUMBER", (Object)"20,2");
            labelDispCoordinateCollection.put((Object)"E_MAIL_ADDRESS", (Object)"21,1");
            fieldDispCoordinateCollection.put((Object)"E_MAIL_ADDRESS", (Object)"21,2");
            labelDispCoordinateCollection.put((Object)"DEBTORS_ACCOUNT_NUMBER", (Object)"22,1");
            fieldDispCoordinateCollection.put((Object)"DEBTORS_ACCOUNT_NUMBER", (Object)"22,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_1", (Object)"23,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_1", (Object)"23,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_2", (Object)"24,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_2", (Object)"24,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_3", (Object)"25,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_3", (Object)"25,2");
            labelDispCoordinateCollection.put((Object)"AREA_CODE", (Object)"26,1");
            fieldDispCoordinateCollection.put((Object)"AREA_CODE", (Object)"26,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_1", (Object)"27,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_1", (Object)"27,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_2", (Object)"28,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_2", (Object)"28,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_3", (Object)"29,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_3", (Object)"29,2");
            labelDispCoordinateCollection.put((Object)"AREA_CODE_PA", (Object)"30,1");
            fieldDispCoordinateCollection.put((Object)"AREA_CODE_PA", (Object)"30,2");
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientVitalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstVitalStatData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT VITAL_SIGN_CODE , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY VITAL_SIGN_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstVitalStatData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "VITAL_SIGN_CODE", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_VITAL_SIGNS", userName, password, _theOS);

            Set fieldSet = lstVitalStatData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstVitalStatData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("VITAL_SIGN_CODE",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_VITAL_SIGNS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_VITAL_SIGNS");
            tabSymbols.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Vital Sign Data");
            tableAliases.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Vital Sign Data Maintenance");
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 

        /*  sample using edit single item mvc!!!!!
            String strVitalSignCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT VITAL_SIGN_CODE FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            //CHANGE BOTTOM PART FOR MULTIPLE ITEM FETCH TO instSQLMultipleItemFetch
            strVitalSignCode = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "VITAL_SIGN_CODE", "INT");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_VITAL_SIGNS", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("VITAL_SIGN_CODE",strVitalSignCode);
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_VITAL_SIGNS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_VITAL_SIGNS");
            tabSymbols.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Vital Sign Data");
            tableAliases.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Vital Sign Data Maintenance");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } */
    }

    public void initEditPatientTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TREATMENT_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TREATMENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "TREATMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstTreatmentData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("TREATMENT_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TREATMENT_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TREATMENT_HISTORY");
            tabSymbols.put((Object)"TREATMENT_HISTORY", (Object)"Treatment Data");
            tableAliases.put((Object)"TREATMENT_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Treatment Data Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(TREATMENT_NUMBER) FROM TREATMENT_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TREATMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"TREATMENT_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TREATMENT_HISTORY");
            tabSymbols.put((Object)"TREATMENT_HISTORY", (Object)"Treatment");
            tableAliases.put((Object)"TREATMENT_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Treatment Data Capture");
            
            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(HISTORY_SEQ_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(HISTORY_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("HISTORY_SEQ_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSymptomModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM SYMPTOM_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYMPTOM_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYMPTOM_HISTORY");
            tabSymbols.put((Object)"SYMPTOM_HISTORY", (Object)"Symptom");
            tableAliases.put((Object)"SYMPTOM_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Symptom Data Capture");
            
            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT BODY_LOCATION_CODE, LOCATION_DESCRIPTION from BODY_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BODY_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BODY_LOCATION_CODE", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientSymptomModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstSymptomData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT COMPLAINT_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY COMPLAINT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstSymptomData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "COMPLAINT_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_HISTORY", userName, password, _theOS);

            Set fieldSet = lstSymptomData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstSymptomData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("COMPLAINT_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYMPTOM_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYMPTOM_HISTORY");
            tabSymbols.put((Object)"SYMPTOM_HISTORY", (Object)"Symptom Data");
            tableAliases.put((Object)"SYMPTOM_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Symptom Data Maintenance");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT BODY_LOCATION_CODE, LOCATION_DESCRIPTION from BODY_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BODY_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BODY_LOCATION_CODE", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientVitalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(VITAL_SIGN_CODE) FROM PATIENT_VITAL_SIGNS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_VITAL_SIGNS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(VITAL_SIGN_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_VITAL_SIGNS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("VITAL_SIGN_CODE", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_VITAL_SIGNS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_VITAL_SIGNS");
            tabSymbols.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Vitals");
            tableAliases.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Patient ");

            groupName = new String("Patient Vitals Data Capture");
            

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(HISTORY_SEQ_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(HISTORY_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("VITAL_SIGN_CODE", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPhysicianModel(String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            sqlQuery = "SELECT MAX(PHYSICIAN_INTERNAL_REF_NUMBER) FROM PHYSICIAN";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PHYSICIAN_INTERNAL_REF_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PHYSICIAN_INTERNAL_REF_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PHYSICIAN",(Object)dbAccessInstance);
            tableNames.add((Object)"PHYSICIAN");
            tabSymbols.put((Object)"PHYSICIAN", (Object)"Physician");
            tableAliases.put((Object)"PHYSICIAN", (Object)"Physician ");

            groupName = new String("New Physician Capture");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientDiagnosesModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM DIAGNOSES_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"DIAGNOSES_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"DIAGNOSES_HISTORY");
            tabSymbols.put((Object)"DIAGNOSES_HISTORY", (Object)"Diagnoses Data");
            tableAliases.put((Object)"DIAGNOSES_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Diagnoses Data Capture");
            
            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            lookupTableCrossLinks = new HashMap(2);
            
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            //crossLinkList = new  ArrayList(1);
           // crossLinkList.add((Object)"DISEASE_ICD_CODE");
            //lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
//Patient Condition
    public void initAddMedicalHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM PATIENT_DIAGNOSES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_DIAGNOSES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_DIAGNOSES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_DIAGNOSES",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_DIAGNOSES");
            tabSymbols.put((Object)"PATIENT_DIAGNOSES", (Object)"Previous Medical Data");
            tableAliases.put((Object)"PATIENT_DIAGNOSES", (Object)"Patient ");

            groupName = new String("Patient Medical History Data Capture");
            
            lookupTableDataCollection = new HashMap(4);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES","SYSTEM_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");
            
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            lookupTableCrossLinks = new HashMap(2);
            
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_ICD_CODE");
            lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    
    //***************************
    public void initEditPatientDiagnosesModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstDiagnosesData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT DIAGNOSES_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY DIAGNOSES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstDiagnosesData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "DIAGNOSES_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_HISTORY", userName, password, _theOS);

            Set fieldSet = lstDiagnosesData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstDiagnosesData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("DIAGNOSES_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"DIAGNOSES_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"DIAGNOSES_HISTORY");
            tabSymbols.put((Object)"DIAGNOSES_HISTORY", (Object)"Diagnoses Data");
            tableAliases.put((Object)"DIAGNOSES_HISTORY", (Object)"Patient");
             
            //Add Group Display Name

            groupName = new String("Patient Diagnoses Data Maintenance");

            lookupTableDataCollection = new HashMap(3);
          
            
            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);

            lookupTableCrossLinks = new HashMap(2);
            
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_ICD_CODE");
            lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
            
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

                        
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSurgeryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SURGERY_NUMBER) FROM SURGERY_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SURGERY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SURGERY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SURGERY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SURGERY_HISTORY");
            tabSymbols.put((Object)"SURGERY_HISTORY", (Object)"Surgery");
            tableAliases.put((Object)"SURGERY_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Surgery Data Capture");
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(SURGERY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SURGERY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SURGERY_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientSurgeryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstSurgeryData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT SURGERY_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SURGERY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstSurgeryData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "SURGERY_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_HISTORY", userName, password, _theOS);

            Set fieldSet = lstSurgeryData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstSurgeryData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("SURGERY_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
  
          
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SURGERY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SURGERY_HISTORY");
            tabSymbols.put((Object)"SURGERY_HISTORY", (Object)"Surgery Data");
            tableAliases.put((Object)"SURGERY_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Surgery Data Maintenance");
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientHabitModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(DRUG_NUMBER) FROM HABITUAL_DRUG_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DRUG_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DRUG_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"HABITUAL_DRUG_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"HABITUAL_DRUG_HISTORY");
            tabSymbols.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Habits");
            tableAliases.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Habits Data Capture");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(DRUG_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DRUG_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DRUG_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
           
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientHabitModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstHabitData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT DRUG_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY DRUG_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstHabitData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "DRUG_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG_HISTORY", userName, password, _theOS);

            Set fieldSet = lstHabitData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstHabitData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("DRUG_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"HABITUAL_DRUG_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"HABITUAL_DRUG_HISTORY");
            tabSymbols.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Drug Habit Data");
            tableAliases.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Habits Data Maintenance");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientTestModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(TEST_CODE) FROM TEST_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TEST_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TEST_CODE", strNextNumber);
            dbAccessCollection.put((Object)"TEST_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_HISTORY");
            tabSymbols.put((Object)"TEST_HISTORY", (Object)"Tests");
            tableAliases.put((Object)"TEST_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Tests Data Capture");
           
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(TEST_CODE) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TEST_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TEST_CODE", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientTestModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTestData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TEST_CODE , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TEST_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTestData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "TEST_CODE", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTestData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstTestData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("TEST_CODE",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
            
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TEST_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_HISTORY");
            tabSymbols.put((Object)"TEST_HISTORY", (Object)"Test Data");
            tableAliases.put((Object)"TEST_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Test Data Maintenance");

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientAllergyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(ALLERGY_HISTORY_CODE) FROM ALLERGY_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(ALLERGY_HISTORY_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("ALLERGY_HISTORY_CODE", strNextNumber);
            dbAccessCollection.put((Object)"ALLERGY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"ALLERGY_HISTORY");
            tabSymbols.put((Object)"ALLERGY_HISTORY", (Object)"Allergies");
            tableAliases.put((Object)"ALLERGY_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Allergies Data Capture");
           
            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT ALLERGY_TYPICAL_REACTION_CODE, REACTION_DESCRIPTION FROM ALLERGY_REACTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_REACTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ALLERGY_TYPICAL_REACTION_CODE", (Object)lookupTableData);
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(ALLERGY_HISTORY_CODE) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(ALLERGY_HISTORY_CODE)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("ALLERGY_HISTORY_CODE", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientAllergyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstAllergyData = null;
            String dateValue = null;
            String strTreatmentCode = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT ALLERGY_HISTORY_CODE , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY ALLERGY_HISTORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstAllergyData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "ALLERGY_HISTORY_CODE", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");


            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_HISTORY", userName, password, _theOS);

            Set fieldSet = lstAllergyData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstAllergyData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("ALLERGY_HISTORY_CODE",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"ALLERGY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"ALLERGY_HISTORY");
            tabSymbols.put((Object)"ALLERGY_HISTORY", (Object)"Allergy Data");
            tableAliases.put((Object)"ALLERGY_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Allergy Data Maintenance");

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT ALLERGY_TYPICAL_REACTION_CODE, REACTION_DESCRIPTION FROM ALLERGY_REACTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_REACTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ALLERGY_TYPICAL_REACTION_CODE", (Object)lookupTableData);
            
           //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientTravelModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(TRAVEL_SEQ_NUMBER) FROM TRAVEL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TRAVEL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TRAVEL_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TRAVEL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TRAVEL_SEQ_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"TRAVEL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TRAVEL_HISTORY");
            tabSymbols.put((Object)"TRAVEL_HISTORY", (Object)"Travel");
            tableAliases.put((Object)"TRAVEL_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Travel Data Capture");
           
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT RESIDENTIAL_MODE_CODE, RESIDENTIAL_MODE_DESCRIPTION FROM RESIDENTIAL_MODE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESIDENTIAL_MODE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RESIDENTIAL_MODE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT MEANS_OF_TRAVEL_CODE, MEANS_OF_TRAVEL_DESCRIPTION FROM MEANS_OF_TRAVEL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEANS_OF_TRAVEL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEANS_OF_TRAVEL_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT FOOD_SOURCE_CODE, FOOD_SOURCE_DESCRIPTION FROM FOOD_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FOOD_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FOOD_SOURCE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BEVARAGE_SOURCE_CODE, BEVARAGE_SOURCE_DESCRIPTION FROM BEVARAGE_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BEVARAGE_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BEVARAGE_SOURCE_CODE", (Object)lookupTableData);
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(TRAVEL_SEQ_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TRAVEL_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TRAVEL_SEQ_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientTravelModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTravelData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TRAVEL_SEQ_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TRAVEL_SEQ_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTravelData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "TRAVEL_SEQ_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TRAVEL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTravelData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstTravelData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("TRAVEL_SEQ_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TRAVEL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TRAVEL_HISTORY");
            tabSymbols.put((Object)"TRAVEL_HISTORY", (Object)"Travel Data");
            tableAliases.put((Object)"TRAVEL_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Travel Data Maintenance");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT RESIDENTIAL_MODE_CODE, RESIDENTIAL_MODE_DESCRIPTION FROM RESIDENTIAL_MODE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESIDENTIAL_MODE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RESIDENTIAL_MODE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT MEANS_OF_TRAVEL_CODE, MEANS_OF_TRAVEL_DESCRIPTION FROM MEANS_OF_TRAVEL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEANS_OF_TRAVEL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEANS_OF_TRAVEL_CODE", (Object)lookupTableData);
            
            
            sqlQuery = "SELECT FOOD_SOURCE_CODE, FOOD_SOURCE_DESCRIPTION FROM FOOD_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FOOD_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FOOD_SOURCE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BEVARAGE_SOURCE_CODE, BEVARAGE_SOURCE_DESCRIPTION FROM BEVARAGE_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BEVARAGE_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BEVARAGE_SOURCE_CODE", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
         
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientConditionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(CONDITION_NUMBER) FROM CONDITION_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CONDITION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CONDITION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"CONDITION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"CONDITION_HISTORY");
            tabSymbols.put((Object)"CONDITION_HISTORY", (Object)"Condition");
            tableAliases.put((Object)"CONDITION_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Condition Data Capture");
           
            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT CONDITION_TYPE_CODE, CONDITION_DESCRIPTION FROM CONDITION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CONDITION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EXERCISE_TOLERANCE_TYPE_CODE, EXERCISE_TOLERANCE_DESCRIPTION FROM EXERCISE_TOLERANCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXERCISE_TOLERANCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(CONDITION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CONDITION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CONDITION_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }


    public void initEditPatientConditionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstHistoryData = null;
            String dateValue = null;
            String strTreatmentCode = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT CONDITION_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY CONDITION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstHistoryData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "CONDITION_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstHistoryData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstHistoryData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("CONDITION_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"CONDITION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"CONDITION_HISTORY");
            tabSymbols.put((Object)"CONDITION_HISTORY", (Object)"Condition");
            tableAliases.put((Object)"CONDITION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Condition Data Maintenance");

            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT CONDITION_TYPE_CODE, CONDITION_DESCRIPTION FROM CONDITION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CONDITION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EXERCISE_TOLERANCE_TYPE_CODE, EXERCISE_TOLERANCE_DESCRIPTION FROM EXERCISE_TOLERANCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXERCISE_TOLERANCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
           

          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientConditionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT CONDITION_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " ORDER BY CONDITION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "CONDITION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("CONDITION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName, fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"CONDITION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"CONDITION_HISTORY");
            tabSymbols.put((Object)"CONDITION_HISTORY", (Object)"Condition");
            tableAliases.put((Object)"CONDITION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Physical condition report on " + strDateTime + " for: ");

            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT CONDITION_TYPE_CODE, CONDITION_DESCRIPTION FROM CONDITION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CONDITION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EXERCISE_TOLERANCE_TYPE_CODE, EXERCISE_TOLERANCE_DESCRIPTION FROM EXERCISE_TOLERANCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXERCISE_TOLERANCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);
            
            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(5);
            fieldDispCoordinateCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);
            //@@
            tableRowDisplayHeightCollection.put((Object)"CONDITION_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"CONDITION_TYPE_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_TYPE_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"CONDITION_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"CONDITION_DETAILS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_DETAILS", (Object)"10,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientFullReportModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {

            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            accountNumber = keyValue;
            String strMaxNumber, strNextNumber = null;
            setTableCount(2);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",keyValue);
            accountNumber = keyValue;
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_PHYSICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_PHYSICAL");
            tabSymbols.put((Object)"PATIENT_PHYSICAL", (Object)"Physical Data");
            tableAliases.put((Object)"PATIENT_PHYSICAL", (Object)"Patient");
            
            sqlQuery = "SELECT CONDITION_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " ORDER BY CONDITION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "CONDITION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("CONDITION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName, fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"CONDITION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"CONDITION_HISTORY");
            tabSymbols.put((Object)"CONDITION_HISTORY", (Object)"Condition");
            tableAliases.put((Object)"CONDITION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Full detail report on " + strDateTime + " for: ");
            
            lookupTableDataCollection = new HashMap(9);

            
            sqlQuery = "SELECT MEDICAL_AID_CODE, MEDICAL_AID_NAME FROM MEDICAL_AID_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_AID_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEDICAL_AID_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LANGUAGE_CODE, LANGUAGE_DESCRIPTION FROM LANGUAGE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LANGUAGE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LANGUAGE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT GENDER_TYPE_CODE, GENDER_TYPE_DESCRIPTION FROM GENDER_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LANGUAGE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GENDER_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PATIENT_TYPE_CODE, PATIENT_TYPE_DESCRIPTION FROM PATIENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PATIENT_TYPE_CODE", (Object)lookupTableData);
                      
            sqlQuery = "SELECT TITLE_CODE, TITLE_DESCRIPTION FROM TITLE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TITLE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TITLE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)lookupTableData);

            sqlQuery = "SELECT CONDITION_TYPE_CODE, CONDITION_DESCRIPTION FROM CONDITION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONDITION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CONDITION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EXERCISE_TOLERANCE_TYPE_CODE, EXERCISE_TOLERANCE_DESCRIPTION FROM EXERCISE_TOLERANCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXERCISE_TOLERANCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);

            
            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(29);
            fieldDispCoordinateCollection = new HashMap(29);
            tableRowDisplayHeightCollection = new HashMap(2);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_PHYSICAL", (Object)"50");
            tableRowDisplayHeightCollection.put((Object)"CONDITION_HISTORY", (Object)"30");

            // basic detail coords
            labelDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"LANGUAGE_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"LANGUAGE_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"GENDER_TYPE_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"GENDER_TYPE_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"PATIENT_TYPE_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_TYPE_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"TITLE_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"TITLE_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"INITIALS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"INITIALS", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"FIRST_NAME", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"FIRST_NAME", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"SURNAME", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"SURNAME", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"IDENTITY_NUMBER", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"IDENTITY_NUMBER", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"BIRTH_DAY", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"BIRTH_DAY", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_NUMBER", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_NUMBER", (Object)"15,2");
            labelDispCoordinateCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)"16,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_AID_PRIMARY_MEMBER", (Object)"16,2");
            labelDispCoordinateCollection.put((Object)"FILE_NUMBER", (Object)"17,1");
            fieldDispCoordinateCollection.put((Object)"FILE_NUMBER", (Object)"17,2");
            labelDispCoordinateCollection.put((Object)"HOME_PHONE_NUMBER", (Object)"18,1");
            fieldDispCoordinateCollection.put((Object)"HOME_PHONE_NUMBER", (Object)"18,2");
            labelDispCoordinateCollection.put((Object)"CELL_PHONE_NUMBER", (Object)"19,1");
            fieldDispCoordinateCollection.put((Object)"CELL_PHONE_NUMBER", (Object)"19,2");
            labelDispCoordinateCollection.put((Object)"WORK_PHONE_NUMBER", (Object)"20,1");
            fieldDispCoordinateCollection.put((Object)"WORK_PHONE_NUMBER", (Object)"20,2");
            labelDispCoordinateCollection.put((Object)"E_MAIL_ADDRESS", (Object)"21,1");
            fieldDispCoordinateCollection.put((Object)"E_MAIL_ADDRESS", (Object)"21,2");
            labelDispCoordinateCollection.put((Object)"DEBTORS_ACCOUNT_NUMBER", (Object)"22,1");
            fieldDispCoordinateCollection.put((Object)"DEBTORS_ACCOUNT_NUMBER", (Object)"22,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_1", (Object)"23,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_1", (Object)"23,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_2", (Object)"24,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_2", (Object)"24,2");
            labelDispCoordinateCollection.put((Object)"STREET_ADDRESS_3", (Object)"25,1");
            fieldDispCoordinateCollection.put((Object)"STREET_ADDRESS_3", (Object)"25,2");
            labelDispCoordinateCollection.put((Object)"AREA_CODE", (Object)"26,1");
            fieldDispCoordinateCollection.put((Object)"AREA_CODE", (Object)"26,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_1", (Object)"27,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_1", (Object)"27,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_2", (Object)"28,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_2", (Object)"28,2");
            labelDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_3", (Object)"29,1");
            fieldDispCoordinateCollection.put((Object)"POSTAL_ADDRESS_3", (Object)"29,2");
            labelDispCoordinateCollection.put((Object)"AREA_CODE_PA", (Object)"30,1");
            fieldDispCoordinateCollection.put((Object)"AREA_CODE_PA", (Object)"30,2");
            //condition coords
            labelDispCoordinateCollection.put((Object)"CONDITION_TYPE_CODE", (Object)"32,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_TYPE_CODE", (Object)"32,2");
            labelDispCoordinateCollection.put((Object)"CONDITION_DATE", (Object)"31,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_DATE", (Object)"31,2");
            labelDispCoordinateCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)"33,1");
            fieldDispCoordinateCollection.put((Object)"EXERCISE_TOLERANCE_TYPE_CODE", (Object)"33,2");
            labelDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"34,1");
            fieldDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"34,2");
            labelDispCoordinateCollection.put((Object)"CONDITION_DETAILS", (Object)"35,1");
            fieldDispCoordinateCollection.put((Object)"CONDITION_DETAILS", (Object)"36,1");

            //add object coords
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");

          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientFamilyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(RELATION_SEQ_NUMBER) FROM PATIENT_RELATIONS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(RELATION_SEQ_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("RELATION_SEQ_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", keyValue);
            dbAccessInstance.dataTable.addElement("DELETED", "0");

            dbAccessCollection.put((Object)"PATIENT_RELATIONS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_RELATIONS");
            tabSymbols.put((Object)"PATIENT_RELATIONS", (Object)"Relatives");
            tableAliases.put((Object)"PATIENT_RELATIONS", (Object)"Patient ");

            groupName = new String("Patient Relation Data Capture");
           
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT RELATION_CODE, RELATION_DESCRIPTION FROM RELATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RELATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RELATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"RELATION_ACCOUNT_NUMBER", (Object)lookupTableData);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientFamilyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstRelationCode, relationMap = null;
            String strRelationCode = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;
            String dateValue = null;


            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT RELATION_SEQ_NUMBER , RELATION_CODE, DELETED FROM PATIENT_RELATIONS WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY RELATION_SEQ_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            lstRelationCode = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "RELATION_SEQ_NUMBER", "INT", "RELATION_CODE", "INT", "DELETED", "BINARY");

            sqlQuery = "SELECT RELATION_CODE, RELATION_DESCRIPTION FROM RELATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RELATION_TYPE", userName, password, _theOS);
            relationMap = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "RELATION_CODE", "INT", "RELATION_DESCRIPTION", "TEXT");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            
            Set fieldSet = lstRelationCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstRelationCode.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("RELATION_SEQ_NUMBER",fieldKeyValue);
                    String relationType = (String)relationMap.get((Object)dateValue);
                    //put relation description in datefield which adds it to the tab header
                    dbAccessInstance.addDateFieldList(fieldKeyValue,relationType);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_RELATIONS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_RELATIONS");
            tabSymbols.put((Object)"PATIENT_RELATIONS", (Object)"Relation Data");
            tableAliases.put((Object)"PATIENT_RELATIONS", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Relation Data Maintenance");

            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT RELATION_CODE, RELATION_DESCRIPTION FROM RELATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RELATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RELATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"RELATION_ACCOUNT_NUMBER", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_RELATIONS",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_RELATIONS");
           

        }    
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientImmunizationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(IMMUNIZATION_NUMBER) FROM IMMUNIZATION_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "IMMUNIZATION_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(IMMUNIZATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "IMMUNIZATION_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("IMMUNIZATION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"IMMUNIZATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"IMMUNIZATION_HISTORY");
            tabSymbols.put((Object)"IMMUNIZATION_HISTORY", (Object)"Immunization");
            tableAliases.put((Object)"IMMUNIZATION_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Immunization Data Capture");
           
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(IMMUNIZATION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(IMMUNIZATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("IMMUNIZATION_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientImmunizationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstImmunizeData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT IMMUNIZATION_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY IMMUNIZATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstImmunizeData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "IMMUNIZATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "IMMUNIZATION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstImmunizeData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstImmunizeData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("IMMUNIZATION_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"IMMUNIZATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"IMMUNIZATION_HISTORY");
            tabSymbols.put((Object)"IMMUNIZATION_HISTORY", (Object)"Immunization Data");
            tableAliases.put((Object)"IMMUNIZATION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Immunization Data Maintenance");
            
           //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initAddPatientInjuryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(INJURY_NUMBER) FROM INJURY_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INJURY_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(INJURY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INJURY_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("INJURY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"INJURY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"INJURY_HISTORY");
            tabSymbols.put((Object)"INJURY_HISTORY", (Object)"Injury");
            tableAliases.put((Object)"INJURY_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Injury Capture");
           
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(INJURY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(INJURY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("INJURY_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientInjuryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstHistoryData = null;
            String dateValue = null;
            String strTreatmentCode = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT INJURY_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY INJURY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstHistoryData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "INJURY_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INJURY_HISTORY", userName, password, _theOS);

            
            Set fieldSet1 = lstHistoryData.keySet();
            Iterator fieldIter1 = fieldSet1.iterator();
            while (fieldIter1.hasNext())
            {
               fieldKeyValue = (String)fieldIter1.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstHistoryData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("INJURY_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"INJURY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"INJURY_HISTORY");
            tabSymbols.put((Object)"INJURY_HISTORY", (Object)"Injury Data");
            tableAliases.put((Object)"INJURY_HISTORY", (Object)"Patient");
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
           
            
            //Add Group Display Name

            groupName = new String("Patient Injury Data Maintenance");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initAddPatientPoisoningModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(POISONING_NUMBER) FROM POISONING_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "POISONING_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(POISONING_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "POISONING_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("POISONING_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"POISONING_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"POISONING_HISTORY");
            tabSymbols.put((Object)"POISONING_HISTORY", (Object)"Poisoning");
            tableAliases.put((Object)"POISONING_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Poisoning Capture");
           
            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(POISONING_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(POISONING_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("POISONING_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientPoisoningModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstPoisoningData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT POISONING_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY POISONING_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstPoisoningData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "POISONING_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "POISONING_HISTORY", userName, password, _theOS);

            Set fieldSet = lstPoisoningData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstPoisoningData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("POISONING_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
         
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"POISONING_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"POISONING_HISTORY");
            tabSymbols.put((Object)"POISONING_HISTORY", (Object)"Poisoning Data");
            tableAliases.put((Object)"POISONING_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Poisoning Data Maintenance");

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
   
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initAddTestReferralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(TEST_REFERRAL_NUMBER) FROM TEST_REFERRAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_REFERRAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TEST_REFERRAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_REFERRAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TEST_REFERRAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"TEST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Test Referral");
            tableAliases.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Test Referral Data Capture");
           
            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT INSTITUTION_SEQ_NUMBER, NAME FROM TEST_INSTITUTION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INSTITUTION_SEQ_NUMBER", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(TEST_REFERRAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(TEST_REFERRAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("TEST_REFERRAL_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditTestReferralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTestRefData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TEST_REFERRAL_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TEST_REFERRAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTestRefData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "TEST_REFERRAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_REFERRAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTestRefData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstTestRefData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("TEST_REFERRAL_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TEST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Test Ref");
            tableAliases.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Test Referral Data Maintenance");

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT INSTITUTION_SEQ_NUMBER, NAME FROM TEST_INSTITUTION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INSTITUTION_SEQ_NUMBER", (Object)lookupTableData);

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddSpecialistReferralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SPECIALIST_REFERRAL_NUMBER) FROM SPECIALIST_REFERRAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST_REFERRAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SPECIALIST_REFERRAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST_REFERRAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SPECIALIST_REFERRAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SPECIALIST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SPECIALIST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Specialist Ref");
            tableAliases.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Specialist Referral Data Capture");
           
            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT SPECIALIST_INTERNAL_REF_NUMBER, SURNAME FROM SPECIALIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPECIALIST_INTERNAL_REF_NUMBER", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(SPECIALIST_REFERRAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SPECIALIST_REFERRAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SPECIALIST_REFERRAL_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditSpecialistReferralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstSpecRefData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT SPECIALIST_REFERRAL_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SPECIALIST_REFERRAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstSpecRefData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "SPECIALIST_REFERRAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST_REFERRAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstSpecRefData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstSpecRefData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("SPECIALIST_REFERRAL_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SPECIALIST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SPECIALIST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Specialist Ref");
            tableAliases.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Specialist Referral Data Maintenance");

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT SPECIALIST_INTERNAL_REF_NUMBER, SURNAME FROM SPECIALIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPECIALIST_INTERNAL_REF_NUMBER", (Object)lookupTableData);

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPrescriptionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PRESCRIPTION_NUMBER) FROM PRESCRIPTION_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PRESCRIPTION_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PRESCRIPTION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PRESCRIPTION_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PRESCRIPTION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PRESCRIPTION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PRESCRIPTION_HISTORY");
            tabSymbols.put((Object)"PRESCRIPTION_HISTORY", (Object)"Prescription");
            tableAliases.put((Object)"PRESCRIPTION_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Prescription Data Capture");
           

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(PRESCRIPTION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PRESCRIPTION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PRESCRIPTION_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPrescriptionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstPrescriptionData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT PRESCRIPTION_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PRESCRIPTION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstPrescriptionData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "PRESCRIPTION_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PRESCRIPTION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstPrescriptionData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstPrescriptionData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("PRESCRIPTION_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PRESCRIPTION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PRESCRIPTION_HISTORY");
            tabSymbols.put((Object)"PRESCRIPTION_HISTORY", (Object)"Prescription");
            tableAliases.put((Object)"PRESCRIPTION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Prescription Data Maintenance");

            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientOccupationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(OCCUPATION_NUMBER) FROM OCCUPATION_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("OCCUPATION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"OCCUPATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"OCCUPATION_HISTORY");
            tabSymbols.put((Object)"OCCUPATION_HISTORY", (Object)"Occupation");
            tableAliases.put((Object)"OCCUPATION_HISTORY", (Object)"Patient ");

            groupName = new String("Patient Occupation Data Capture");
           
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT OCCUPATION_CODE, OCCUPATION_DESCRIPTION FROM OCCUPATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"OCCUPATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EMPLOYER_CODE, EMPLOYER_NAME FROM EMPLOYER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EMPLOYER_CODE", (Object)lookupTableData);

            dbWrapUpAccessCollection = new HashMap(1);
            
            sqlQuery = "SELECT MAX(OCCUPATION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("OCCUPATION_NUMBER", strNextNumber);
            
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);

            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditPatientOccupationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstOccupationData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String deletedField = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT OCCUPATION_NUMBER , HIS_DATE_TIME, DELETED FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY OCCUPATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstOccupationData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "OCCUPATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE", "DELETED", "BINARY");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstOccupationData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstOccupationData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    deletedField = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("OCCUPATION_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"OCCUPATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"OCCUPATION_HISTORY");
            tabSymbols.put((Object)"OCCUPATION_HISTORY", (Object)"Occupation");
            tableAliases.put((Object)"OCCUPATION_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Occupation Data Maintenance");

            lookupTableDataCollection = new HashMap(2);
            
            
            sqlQuery = "SELECT OCCUPATION_CODE, OCCUPATION_DESCRIPTION FROM OCCUPATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"OCCUPATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EMPLOYER_CODE, EMPLOYER_NAME FROM EMPLOYER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EMPLOYER_CODE", (Object)lookupTableData);
            
            //GET DATA FOR WRAP UP PROCESS
            
            dbWrapUpAccessCollection = new HashMap(1);
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.addWhereFieldList("ACCOUNT_NUMBER",accountNumber);
            dbAccessInstance.addWhereFieldList("DELETED","0");
            result = dbAccessInstance.selectDatabyKey();

            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initDisplayPatientVitalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstVitalSignCode = null;
            String strVitalSignCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT VITAL_SIGN_CODE, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber +  " AND DELETED = '0' ORDER BY VITAL_SIGN_CODE" ;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstVitalSignCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "VITAL_SIGN_CODE", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_VITAL_SIGNS", userName, password, _theOS);

            Set fieldSet = lstVitalSignCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstVitalSignCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("VITAL_SIGN_CODE",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName, fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_VITAL_SIGNS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_VITAL_SIGNS");
            tabSymbols.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Vital Sign Data");
            tableAliases.put((Object)"PATIENT_VITAL_SIGNS", (Object)"Patient");
            
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Vital Sign report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);
            
            //
            tableRowDisplayHeightCollection.put((Object)"PATIENT_VITAL_SIGNS", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"VITAL_SIGN_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"VITAL_SIGN_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"VITAL_SIGN_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"VITAL_SIGN_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"BLOOD_PRESSURE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"BLOOD_PRESSURE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"HEART_RATE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"HEART_RATE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"TEMPERATURE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"TEMPERATURE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"RESPIRATORY_RATE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"RESPIRATORY_RATE", (Object)"10,2");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 

    }
    
    public void initDisplayPatientInjuryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT INJURY_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY INJURY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "INJURY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INJURY_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("INJURY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"INJURY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"INJURY_HISTORY");
            tabSymbols.put((Object)"INJURY_HISTORY", (Object)"Injury Data");
            tableAliases.put((Object)"INJURY_HISTORY", (Object)"Patient");
            
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Injury report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(7);
            fieldDispCoordinateCollection = new HashMap(7);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"INJURY_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"INJURY_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"INJURY_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"INJURY_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"INJURY_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"INJURY_AT_WORK", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_AT_WORK", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"INJURY_DETAILS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_DETAILS", (Object)"10,1");
            labelDispCoordinateCollection.put((Object)"INJURY_DOCS", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"INJURY_DOCS", (Object)"12,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");

        
        
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initDisplayPatientPoisoningModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT POISONING_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY POISONING_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "POISONING_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "POISONING_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("POISONING_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"POISONING_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"POISONING_HISTORY");
            tabSymbols.put((Object)"POISONING_HISTORY", (Object)"Poisoning Data");
            tableAliases.put((Object)"POISONING_HISTORY", (Object)"Patient");
  
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Poisoning report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(5);
            fieldDispCoordinateCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"POISONING_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"POISONING_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"POISONING_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"POISON_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"POISON_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"POISON_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"POISON_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"POISONING_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"POISONING_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"POISONING_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"POISONING_DETAILS", (Object)"9,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initDisplayPatientSymptomModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT COMPLAINT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY COMPLAINT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "COMPLAINT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("COMPLAINT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYMPTOM_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYMPTOM_HISTORY");
            tabSymbols.put((Object)"SYMPTOM_HISTORY", (Object)"Symptom Data");
            tableAliases.put((Object)"SYMPTOM_HISTORY", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT BODY_LOCATION_CODE, LOCATION_DESCRIPTION from BODY_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BODY_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BODY_LOCATION_CODE", (Object)lookupTableData);
            
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Symptom report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"SYMPTOM_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"COMPLAINT_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"COMPLAINT_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"SYMPTOM_START_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"SYMPTOM_START_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SYMPTOM_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SYMPTOM_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"BODY_LOCATION_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"BODY_LOCATION_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"SYMPTOM_ICD_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"SYMPTOM_ICD_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"SYMPTOM_DETAILS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"SYMPTOM_DETAILS", (Object)"10,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientDiagnosesModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT DIAGNOSES_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY DIAGNOSES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "DIAGNOSES_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("DIAGNOSES_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"DIAGNOSES_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"DIAGNOSES_HISTORY");
            tabSymbols.put((Object)"DIAGNOSES_HISTORY", (Object)"Diagnoses Data");
            tableAliases.put((Object)"DIAGNOSES_HISTORY", (Object)"Patient");
             
            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);


            
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Diagnoses report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(7);
            fieldDispCoordinateCollection = new HashMap(7);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"DIAGNOSES_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"DIAGNOSES_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"DIAGNOSES_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"DIAGNOSES_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"DIAGNOSES_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DIAGNOSES_DETAILS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DIAGNOSES_DETAILS", (Object)"10,1");
            labelDispCoordinateCollection.put((Object)"DIAGNOSES_FILE_REFERENCE", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"DIAGNOSES_FILE_REFERENCE", (Object)"12,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientTestModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TEST_CODE , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TEST_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "TEST_CODE", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("TEST_CODE",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TEST_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_HISTORY");
            tabSymbols.put((Object)"TEST_HISTORY", (Object)"Test Data");
            tableAliases.put((Object)"TEST_HISTORY", (Object)"Patient");
            
             //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Tests report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"TEST_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"TEST_CODE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TEST_CODE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"TEST_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"TEST_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"TEST_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"TEST_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"TEST_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"TEST_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TEST_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TEST_DETAILS", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"TEST_FILE_REFERENCE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"TEST_FILE_REFERENCE", (Object)"11,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TREATMENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' order by treatment_number";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "TREATMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("TREATMENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TREATMENT_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TREATMENT_HISTORY");
            tabSymbols.put((Object)"TREATMENT_HISTORY", (Object)"Treatment Data");
            tableAliases.put((Object)"TREATMENT_HISTORY", (Object)"Patient");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Treatment report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(10);
            fieldDispCoordinateCollection = new HashMap(10);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"TREATMENT_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"TREATMENT_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_DETAILS", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"TREATMENT_SCHEDULE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_SCHEDULE", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_START", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_START", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_END", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_END", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"REPEATS_PER_DAY", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"REPEATS_PER_DAY", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_DOCS", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_DOCS", (Object)"16,1");

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientSurgeryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT SURGERY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SURGERY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SURGERY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SURGERY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SURGERY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SURGERY_HISTORY");
            tabSymbols.put((Object)"SURGERY_HISTORY", (Object)"Surgery Data");
            tableAliases.put((Object)"SURGERY_HISTORY", (Object)"Patient");
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Surgery report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"SURGERY_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"SURGERY_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_DETAILS", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"SURGERY_DOCS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_DOCS", (Object)"11,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initDisplayPatientHabitModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT DRUG_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY DRUG_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "DRUG_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("DRUG_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"HABITUAL_DRUG_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"HABITUAL_DRUG_HISTORY");
            tabSymbols.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Drug Habit Data");
            tableAliases.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"Patient");
            
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Habit report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(10);
            fieldDispCoordinateCollection = new HashMap(10);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"HABITUAL_DRUG_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"DRUG_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"DRUG_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"DRUG_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"DRUG_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"DRUG_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"DRUG_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"DRUG_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"DRUG_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"DRUG_DESCRIPTION", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"DRUG_DESCRIPTION", (Object)"12,1");
            labelDispCoordinateCollection.put((Object)"COMMENCEMENT_DATE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"COMMENCEMENT_DATE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"TERMINATION_DATE", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"TERMINATION_DATE", (Object)"14,2");
            
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientFamilyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstRelationCode, relationMap = null;
            String strRelationCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT RELATION_SEQ_NUMBER , RELATION_CODE FROM PATIENT_RELATIONS WHERE ACCOUNT_NUMBER = " + accountNumber  + " AND DELETED = '0'";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            lstRelationCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "RELATION_SEQ_NUMBER", "INT", "RELATION_CODE", "INT");

            sqlQuery = "SELECT RELATION_CODE, RELATION_DESCRIPTION FROM RELATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RELATION_TYPE", userName, password, _theOS);
            relationMap = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "RELATION_CODE", "INT", "RELATION_DESCRIPTION", "TEXT");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_RELATIONS", userName, password, _theOS);
            
            Set fieldSet = lstRelationCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstRelationCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("RELATION_SEQ_NUMBER",fieldName);
                    String relationType = (String)relationMap.get((Object)fieldValue);
                    dbAccessInstance.addDateFieldList(fieldName,relationType);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_RELATIONS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_RELATIONS");
            tabSymbols.put((Object)"PATIENT_RELATIONS", (Object)"Relation Data");
            tableAliases.put((Object)"PATIENT_RELATIONS", (Object)"Patient");
            

            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT RELATION_CODE, RELATION_DESCRIPTION FROM RELATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RELATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RELATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ACCOUNT_NUMBER, FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL";
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableData.put((Object)accountNumber, (Object)"Self");
            lookupTableDataCollection.put((Object)"RELATION_ACCOUNT_NUMBER", (Object)lookupTableData);
            
                        //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Family report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(4);
            fieldDispCoordinateCollection = new HashMap(4);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_RELATIONS", (Object)"30");

            labelDispCoordinateCollection.put((Object)"RELATION_SEQ_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"RELATION_SEQ_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"RELATION_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"RELATION_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"ACCOUNT_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"RELATION_ACCOUNT_NUMBER", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"RELATION_ACCOUNT_NUMBER", (Object)"7,2");
   
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
  
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientAllergyModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {

            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT ALLERGY_HISTORY_CODE , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY ALLERGY_HISTORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "ALLERGY_HISTORY_CODE", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("ALLERGY_HISTORY_CODE",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"ALLERGY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"ALLERGY_HISTORY");
            tabSymbols.put((Object)"ALLERGY_HISTORY", (Object)"Allergy Data");
            tableAliases.put((Object)"ALLERGY_HISTORY", (Object)"Patient");

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT ALLERGY_TYPICAL_REACTION_CODE, REACTION_DESCRIPTION FROM ALLERGY_REACTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY_REACTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ALLERGY_TYPICAL_REACTION_CODE", (Object)lookupTableData);
          
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Allergy report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(7);
            fieldDispCoordinateCollection = new HashMap(7);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"ALLERGY_HISTORY", (Object)"30");
           
            
            labelDispCoordinateCollection.put((Object)"ALLERGY_HISTORY_CODE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_HISTORY_CODE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_DETAILS", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_TYPICAL_REACTION_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_TYPICAL_REACTION_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_ATYPICAL_DESCRIPTION", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_ATYPICAL_DESCRIPTION", (Object)"10,2");
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
         }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientImmunizationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {


        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT IMMUNIZATION_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY IMMUNIZATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "IMMUNIZATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "IMMUNIZATION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("IMMUNIZATION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"IMMUNIZATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"IMMUNIZATION_HISTORY");
            tabSymbols.put((Object)"IMMUNIZATION_HISTORY", (Object)"Immunization Data");
            tableAliases.put((Object)"IMMUNIZATION_HISTORY", (Object)"Patient");
            
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Allergy report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"IMMUNIZATION_HISTORY", (Object)"30");
           
            
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_DESCRIPTION", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_DESCRIPTION", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"IMMUNIZATION_DOCS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"IMMUNIZATION_DOCS", (Object)"11,1");
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        }
    }

    public void initDisplayPatientTravelModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TRAVEL_SEQ_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TRAVEL_SEQ_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "TRAVEL_SEQ_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TRAVEL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("TRAVEL_SEQ_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TRAVEL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TRAVEL_HISTORY");
            tabSymbols.put((Object)"TRAVEL_HISTORY", (Object)"Travel Data");
            tableAliases.put((Object)"TRAVEL_HISTORY", (Object)"Patient");
            
            //Add Group Display Name


            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT RESIDENTIAL_MODE_CODE, RESIDENTIAL_MODE_DESCRIPTION FROM RESIDENTIAL_MODE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESIDENTIAL_MODE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RESIDENTIAL_MODE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT MEANS_OF_TRAVEL_CODE, MEANS_OF_TRAVEL_DESCRIPTION FROM MEANS_OF_TRAVEL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEANS_OF_TRAVEL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MEANS_OF_TRAVEL_CODE", (Object)lookupTableData);
            
            
            sqlQuery = "SELECT FOOD_SOURCE_CODE, FOOD_SOURCE_DESCRIPTION FROM FOOD_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FOOD_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FOOD_SOURCE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BEVARAGE_SOURCE_CODE, BEVARAGE_SOURCE_DESCRIPTION FROM BEVARAGE_SOURCE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BEVARAGE_SOURCE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BEVARAGE_SOURCE_CODE", (Object)lookupTableData);
          
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Travel History report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(11);
            fieldDispCoordinateCollection = new HashMap(11);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"TRAVEL_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"TRAVEL_SEQ_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TRAVEL_SEQ_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"TRAVEL_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"TRAVEL_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"RESIDENTIAL_MODE_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"RESIDENTIAL_MODE_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"MEANS_OF_TRAVEL_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"MEANS_OF_TRAVEL_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TRAVEL_DESTINATION", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TRAVEL_DESTINATION", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"TRAVEL_OBJECTIVE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"TRAVEL_OBJECTIVE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"ARRIVAL_DATE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"ARRIVAL_DATE", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"DEPARTURE_DATE", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"DEPARTURE_DATE", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"PROPHYLACTIC_DETAILS", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"PROPHYLACTIC_DETAILS", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"FOOD_SOURCE_CODE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"FOOD_SOURCE_CODE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"BEVARAGE_SOURCE_CODE", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"BEVARAGE_SOURCE_CODE", (Object)"14,2");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayTestRefModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT TEST_REFERRAL_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY TEST_REFERRAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "TEST_REFERRAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_REFERRAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("TEST_REFERRAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"TEST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"TEST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Test Ref");
            tableAliases.put((Object)"TEST_REFERRAL_HISTORY", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT INSTITUTION_SEQ_NUMBER, NAME FROM TEST_INSTITUTION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEST_INSTITUTION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INSTITUTION_SEQ_NUMBER", (Object)lookupTableData);

           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Test Referrral report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(5);
            fieldDispCoordinateCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"TEST_REFERRAL_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"TEST_REFERRAL_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TEST_REFERRAL_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"REFERRAL_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"REFERRAL_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"INSTITUTION_SEQ_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"INSTITUTION_SEQ_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"TEST_REFERRAL_DETAILS", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"TEST_REFERRAL_DETAILS", (Object)"8,1");
            labelDispCoordinateCollection.put((Object)"TEST_REFERRAL_DOCS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"TEST_REFERRAL_DOCS", (Object)"10,1");

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplaySpecialistReferralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT SPECIALIST_REFERRAL_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SPECIALIST_REFERRAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SPECIALIST_REFERRAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST_REFERRAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SPECIALIST_REFERRAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SPECIALIST_REFERRAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SPECIALIST_REFERRAL_HISTORY");
            tabSymbols.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Specialist Ref");
            tableAliases.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Specialist Referral Data Maintenance");

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT SPECIALIST_INTERNAL_REF_NUMBER, SURNAME FROM SPECIALIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPECIALIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPECIALIST_INTERNAL_REF_NUMBER", (Object)lookupTableData);
          
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Specialist referrral report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"SPECIALIST_REFERRAL_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"SPECIALIST_REFERRAL_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"SPECIALIST_REFERRAL_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"REFERRAL_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"REFERRAL_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SPECIALIST_INTERNAL_REF_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SPECIALIST_INTERNAL_REF_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"REFERRAL_TO_FROM", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"REFERRAL_TO_FROM", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"REFERRAL_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"REFERRAL_DETAILS", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"REFERRAL_DOCS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"REFERRAL_DOCS", (Object)"11,1");
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
 
    public void initDisplayPatientOccupationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT OCCUPATION_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY OCCUPATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "OCCUPATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("OCCUPATION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"OCCUPATION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"OCCUPATION_HISTORY");
            tabSymbols.put((Object)"OCCUPATION_HISTORY", (Object)"Occupation");
            tableAliases.put((Object)"OCCUPATION_HISTORY", (Object)"Patient");
            

            lookupTableDataCollection = new HashMap(2);
            
            
            sqlQuery = "SELECT OCCUPATION_CODE, OCCUPATION_DESCRIPTION FROM OCCUPATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OCCUPATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"OCCUPATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EMPLOYER_CODE, EMPLOYER_NAME FROM EMPLOYER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EMPLOYER", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EMPLOYER_CODE", (Object)lookupTableData);
          
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Occupation history report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"OCCUPATION_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"OCCUPATION_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"OCCUPATION_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"COMMENCEMENT_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"COMMENCEMENT_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"OCCUPATION_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"OCCUPATION_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"EMPLOYER_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"EMPLOYER_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TERMINATION_DATE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TERMINATION_DATE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"POSITION_AT_TERMINATION", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"POSITION_AT_TERMINATION", (Object)"9,2");
             
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPrescriptionModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT PRESCRIPTION_NUMBER , HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PRESCRIPTION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PRESCRIPTION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PRESCRIPTION_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PRESCRIPTION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PRESCRIPTION_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PRESCRIPTION_HISTORY");
            tabSymbols.put((Object)"PRESCRIPTION_HISTORY", (Object)"Prescription");
            tableAliases.put((Object)"PRESCRIPTION_HISTORY", (Object)"Patient");
            
          
           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Prescription history report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PRESCRIPTION_HISTORY", (Object)"30");
            
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_DATE_TIME", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_DATE_TIME", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_NAME", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_NAME", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_ICD_CODE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_ICD_CODE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_DETAILS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_DETAILS", (Object)"9,1");
            labelDispCoordinateCollection.put((Object)"PRESCRIPTION_DOCS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"PRESCRIPTION_DOCS", (Object)"11,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddAppointmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(APPOINTMENT_REF_NUMBER) FROM APPOINTMENTS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(APPOINTMENT_REF_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("APPOINTMENT_REF_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("PATIENT_ACCOUNT_NUMBER", accountNumber);
            dbAccessCollection.put((Object)"APPOINTMENTS",(Object)dbAccessInstance);
            tableNames.add((Object)"APPOINTMENTS");
            tabSymbols.put((Object)"APPOINTMENTS", (Object)"Appointments");
            tableAliases.put((Object)"APPOINTMENTS", (Object)"Patient ");

            groupName = new String("Patient Appointments Capture");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT STATE_CODE, STATE_DESCRIPTION FROM APPOINTMENT_STATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PHYSICIAN_INTERNAL_REF_NUMBER, NAME, INITIALS, SURNAME FROM PHYSICIAN";
            String[] combineList = {"NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableDataCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)lookupTableData);
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initEditAppointmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstAppointmentData = null;
            String dateValue = null;
            String fieldKeyValue = null;
            String stateCode = null;
            ArrayList HistoryList = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT APPOINTMENT_REF_NUMBER , APPOINTMENT_DATE, APPOINTMENT_STATE_CODE FROM APPOINTMENTS WHERE PATIENT_ACCOUNT_NUMBER = " + accountNumber + " AND APPOINTMENT_STATE_CODE <> 4 ORDER BY APPOINTMENT_DATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);
            lstAppointmentData = dbAccessInstance.instSQLTripleItemListFetch(sqlQuery,  "APPOINTMENT_REF_NUMBER", "INT", "APPOINTMENT_DATE", "DATE", "APPOINTMENT_STATE_CODE", "INT");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);

            Set fieldSet = lstAppointmentData.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               fieldKeyValue = (String)fieldIter.next();
               HistoryList = new ArrayList(10);
               if (!fieldKeyValue.equalsIgnoreCase("0"))
               {    
                    HistoryList =  (ArrayList)lstAppointmentData.get((Object)fieldKeyValue);
                    dateValue = (String)HistoryList.get(0);
                    stateCode = (String)HistoryList.get(1);
                    dbAccessInstance.addWhereFieldList("APPOINTMENT_REF_NUMBER",fieldKeyValue);
                    dbAccessInstance.addDateFieldList(fieldKeyValue,dateValue);
               }
            }

            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"APPOINTMENTS",(Object)dbAccessInstance);
            tableNames.add((Object)"APPOINTMENTS");
            tabSymbols.put((Object)"APPOINTMENTS", (Object)"Appointment by Date");
            tableAliases.put((Object)"APPOINTMENTS", (Object)"Patient");
            
            //Add Group Display Name

            groupName = new String("Patient Appointment Data Maintenance");

            lookupTableDataCollection = new HashMap(2);
            
            
            sqlQuery = "SELECT STATE_CODE, STATE_DESCRIPTION FROM APPOINTMENT_STATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PHYSICIAN_INTERNAL_REF_NUMBER, NAME, INITIALS, SURNAME FROM PHYSICIAN";
            String[] combineList = {"NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableDataCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)lookupTableData);
            
          
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayAppointmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstAppointmentsCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT APPOINTMENT_REF_NUMBER , APPOINTMENT_DATE FROM APPOINTMENTS WHERE PATIENT_ACCOUNT_NUMBER = " + accountNumber + " AND APPOINTMENT_STATE_CODE <> 4 ORDER BY APPOINTMENT_DATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);
            lstAppointmentsCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "APPOINTMENT_REF_NUMBER", "INT", "APPOINTMENT_DATE", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);

            Set fieldSet = lstAppointmentsCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstAppointmentsCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("APPOINTMENT_REF_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"APPOINTMENTS",(Object)dbAccessInstance);
            tableNames.add((Object)"APPOINTMENTS");
            tabSymbols.put((Object)"APPOINTMENTS", (Object)"Appointments by Patient");
            tableAliases.put((Object)"APPOINTMENTS", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT STATE_CODE, STATE_DESCRIPTION FROM APPOINTMENT_STATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PHYSICIAN_INTERNAL_REF_NUMBER, NAME, INITIALS, SURNAME FROM PHYSICIAN";
            String[] combineList = {"NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableDataCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)lookupTableData);

           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Appointment report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(4);
            fieldDispCoordinateCollection = new HashMap(4);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"APPOINTMENTS", (Object)"30");

            labelDispCoordinateCollection.put((Object)"APPOINTMENT_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"APPOINTMENT_DETAILS", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_DETAILS", (Object)"8,1");

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayAppointmentsForDayModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstAppointmentsCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            
            String dateRequired = keyValue;
            sqlQuery = "SELECT APPOINTMENT_REF_NUMBER , APPOINTMENT_DATE FROM APPOINTMENTS WHERE APPOINTMENT_DATE = " + dateRequired + " AND APPOINTMENT_STATE_CODE <> 4 ORDER BY PHYSICIAN_INTERNAL_REF_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);
            lstAppointmentsCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "APPOINTMENT_REF_NUMBER", "INT", "APPOINTMENT_DATE", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPOINTMENTS", userName, password, _theOS);

            Set fieldSet = lstAppointmentsCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstAppointmentsCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("APPOINTMENT_REF_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"APPOINTMENTS",(Object)dbAccessInstance);
            tableNames.add((Object)"APPOINTMENTS");
            tabSymbols.put((Object)"APPOINTMENTS", (Object)"Appointments by Patient");
            tableAliases.put((Object)"APPOINTMENTS", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT STATE_CODE, STATE_DESCRIPTION FROM APPOINTMENT_STATE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PHYSICIAN_INTERNAL_REF_NUMBER, NAME, INITIALS, SURNAME FROM PHYSICIAN";
            String[] combineList = {"NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHYSICIAN", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupDataCombine(sqlQuery, combineList);
            lookupTableDataCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)lookupTableData);

           //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2);

            groupName = new String("Appointment report on " + strDateTime + " for: ");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(4);
            fieldDispCoordinateCollection = new HashMap(4);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"APPOINTMENTS", (Object)"30");

            labelDispCoordinateCollection.put((Object)"APPOINTMENT_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_STATE_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"PHYSICIAN_INTERNAL_REF_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"APPOINTMENT_DETAILS", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"APPOINTMENT_DETAILS", (Object)"8,1");

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
            
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPatientCondition(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM PATIENT_DIAGNOSES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_DIAGNOSES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_DIAGNOSES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_DIAGNOSES",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_DIAGNOSES");
            tabSymbols.put((Object)"PATIENT_DIAGNOSES", (Object)"Previous Medical Data");
            tableAliases.put((Object)"PATIENT_DIAGNOSES", (Object)"Patient ");

            groupName = new String("Patient Medical History Data Capture");
            
            lookupTableDataCollection = new HashMap(4);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"TIME_UNITS_CODE", (Object)"Day");
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES");
            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");
            
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(DIAGNOSES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(DIAGNOSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("DIAGNOSES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            lookupTableCrossLinks = new HashMap(2);
            
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_ICD_CODE");
            lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientComplaint(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM PATIENT_COMPLAINTS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_COMPLAINTS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_COMPLAINTS");
            tabSymbols.put((Object)"PATIENT_COMPLAINTS", (Object)"Medical Complaints");
            tableAliases.put((Object)"PATIENT_COMPLAINTS", (Object)patientName);

            groupName = new String("Patient Medical Complaints Data Capture");

            dataSourceTable  = "SYMPTOMS";
            dataSourceField = "SYMPTOM_NAME";
            //xMLTableCollection =  new HashMap(1);
            //xMLTableCollection.put((Object)"ANATOMICAL_LOCATION",(Object)"anatomy.xml");
            
            lookupTableDataCollection = new HashMap(5);
            
            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_ICD_CODE FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYMPTOM_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                String test = dbKey.toString();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)lookupTableData);
            
            
            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"SYMPTOMS");
            symptomList.add(1,(Object)"SYMPTOM_NAME");
            symptomList.add(2,(Object)"SYMPTOM_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"SYMPTOM_SYNONYMS");
            symptomList.add(4,(Object)"SYMPTOM_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"SYMPTOM_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Symptoms",(Object)symptomList.clone());


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);
            
            //set component width and height
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 5;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"SYMPTOM_SEQUENCE_NUMBER");

            groupLookupTableDataCollection = new HashMap(1);

            updateButtonEvent =  MenuStateMachine.current_complaint_update_button_pressed_event;


            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            groupedTableDataCollection = new HashMap(1);

            String sqlQuery1 = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            String sqlQuery2 = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYSTEM_CATEGORY_MAP FROM SYMPTOMS";
            groupField = "SYSTEM_CATEGORY_MAP";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupDataByMap(sqlQuery1,sqlQuery2,groupLookupTableData,"SYMPTOMS");
            groupedTableDataCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)groupedTableData);

            autoSelectFieldCollection = new HashMap(2);
            autoSelectFieldCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"GROUP");
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"SYMPTOM_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_SYMPTOM");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)dependantItemList);

            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_SYMPTOM", (Object)"OTHER");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddFollowUpPatientComplaint(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM PATIENT_COMPLAINTS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_COMPLAINTS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_COMPLAINTS");
            tabSymbols.put((Object)"PATIENT_COMPLAINTS", (Object)"Medical Complaints");
            tableAliases.put((Object)"PATIENT_COMPLAINTS", (Object)patientName);

            groupName = new String("Patient Medical Complaints Data Capture");
            
            lookupTableDataCollection = new HashMap(5);
            
            dataSourceTable  = "SYMPTOMS";
            dataSourceField = "SYMPTOM_NAME";
            //xMLTableCollection =  new HashMap(1);
            //xMLTableCollection.put((Object)"ANATOMICAL_LOCATION",(Object)"anatomy.xml");
            
            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_ICD_CODE FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYMPTOM_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"SYMPTOMS");
            symptomList.add(1,(Object)"SYMPTOM_NAME");
            symptomList.add(2,(Object)"SYMPTOM_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"SYMPTOM_SYNONYMS");
            symptomList.add(4,(Object)"SYMPTOM_SEQUENCE_NUMBER");

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 6;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 200;
            componentPanelWidth = 300;

            
            symptomList.add(5,(Object)"SYMPTOM_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Symptoms",(Object)symptomList.clone());
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");

            
            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"SYMPTOM_SEQUENCE_NUMBER");

            updateButtonEvent =  NewMenuStateMachine.new_complaint_update_button_pressed_event;
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"SYMPTOMS","SYSTEM_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)groupedTableData);

            autoSelectFieldCollection = new HashMap(2);
            autoSelectFieldCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"GROUP");
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"SYMPTOM_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_SYMPTOM");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)dependantItemList);
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_SYMPTOM", (Object)"OTHER");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(COMPLAINT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(COMPLAINT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("COMPLAINT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientComplaintModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            xmlFileName = "displaycomplaintinfo.xml";
            accountNumber = keyValue;
            sqlQuery = "SELECT COMPLAINT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY COMPLAINT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "COMPLAINT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("COMPLAINT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_COMPLAINTS",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_COMPLAINTS");
            tabSymbols.put((Object)"PATIENT_COMPLAINTS", (Object)"Complaint Data");
            tableAliases.put((Object)"PATIENT_COMPLAINTS", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(5);
            
            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_ICD_CODE FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYMPTOM_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);


            groupName = new String("Complaint report on " + strDateTime + " for: ");

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);
            
            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_COMPLAINTS", (Object)"30");

            labelDispCoordinateCollection.put((Object)"COMPLAINT_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"COMPLAINT_NUMBER", (Object)"4,2");

            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"SYMPTOM_SEQUENCE_NUMBER", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"OTHER_SYMPTOM", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_SYMPTOM", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"14,1");

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientConstitutional(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(CONSTITUTIONAL_SYMPTOM_NUMBER) FROM CONSTITUTIONAL_SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONSTITUTIONAL_SYMPTOMS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CONSTITUTIONAL_SYMPTOM_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONSTITUTIONAL_SYMPTOMS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CONSTITUTIONAL_SYMPTOM_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"CONSTITUTIONAL_SYMPTOMS",(Object)dbAccessInstance);
            tableNames.add((Object)"CONSTITUTIONAL_SYMPTOMS");
            tabSymbols.put((Object)"CONSTITUTIONAL_SYMPTOMS", (Object)"Constitutional Symptoms");
            tableAliases.put((Object)"CONSTITUTIONAL_SYMPTOMS", (Object)patientName);

            groupName = new String("Patient Constitutional Symptoms Data Capture");

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"WEIGHT_AMOUNT");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"LOST_WEIGHT", (Object)dependantItemList);

            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"WEIGHT_AMOUNT", (Object)"SPINFIELD");
            
            comboBoxActiveStateCollection = new HashMap(1);
            comboBoxActiveStateCollection.put((Object)"LOST_WEIGHT", (Object)"Yes");

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"WEIGHT_AMOUNT", (Object)"10");

            systemicSymptom = "Constitutional Symptoms";
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(CONSTITUTIONAL_SYMPTOM_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CONSTITUTIONAL_SYMPTOM_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CONSTITUTIONAL_SYMPTOM_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            
            //set component width and height
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    
    public void initAddPatientSystemicCardiovascular(String keyValue, String cardiovascularSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strCardioSymptom = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            
            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_CARDIOVASCULAR_NUMBER) FROM SYSTEMIC_CARDIOVASCULAR";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CARDIOVASCULAR", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_CARDIOVASCULAR_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM CARDIOVASCULAR_SYMPTOM WHERE CARDIOVASCULAR_SYMPTOM_CODE = " + cardiovascularSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CARDIOVASCULAR_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            sqlQuery = "SELECT CARDIOVASCULAR_SYMPTOM_DESCRIPTION FROM CARDIOVASCULAR_SYMPTOM WHERE CARDIOVASCULAR_SYMPTOM_CODE = " + cardiovascularSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CARDIOVASCULAR_SYMPTOM", userName, password, _theOS);
            strCardioSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "CARDIOVASCULAR_SYMPTOM_DESCRIPTION", "TEXT");
            
            
            systemicSymptom = "(CardioVascular)-" + strCardioSymptom.trim();
            
            
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CARDIOVASCULAR", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_CARDIOVASCULAR_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("CARDIOVASCULAR_SYMPTOM_CODE", cardiovascularSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_CARDIOVASCULAR");
            tabSymbols.put((Object)"SYSTEMIC_CARDIOVASCULAR", (Object)"Cardiovascular Symptom: " + strCardioSymptom);
            tableAliases.put((Object)"SYSTEMIC_CARDIOVASCULAR", (Object)patientName);

            groupName = new String("Patient Cardiovascular Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_CARDIOVASCULAR_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_CARDIOVASCULAR_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_CARDIOVASCULAR_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSystemicRespiratory(String keyValue, String respiratorySymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strRespiratorySymptom = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_RESPIRATORY_NUMBER) FROM SYSTEMIC_RESPIRATORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_RESPIRATORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_RESPIRATORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM RESPIRATORY_SYMPTOM WHERE RESPIRATORY_SYMPTOM_CODE = " + respiratorySymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESPIRATORY_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT RESPIRATORY_SYMPTOM_DESCRIPTION FROM RESPIRATORY_SYMPTOM WHERE RESPIRATORY_SYMPTOM_CODE = " + respiratorySymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESPIRATORY_SYMPTOM", userName, password, _theOS);
            strRespiratorySymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "RESPIRATORY_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Respiratory)-" + strRespiratorySymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_RESPIRATORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_RESPIRATORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("RESPIRATORY_SYMPTOM_CODE", respiratorySymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_RESPIRATORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_RESPIRATORY");
            tabSymbols.put((Object)"SYSTEMIC_RESPIRATORY", (Object)"Respiratory Symptom: " + strRespiratorySymptom);
            tableAliases.put((Object)"SYSTEMIC_RESPIRATORY", (Object)patientName);

            groupName = new String("Patient Respiratory Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_RESPIRATORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_RESPIRATORY_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_RESPIRATORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPatientSystemicAbdominal(String keyValue, String abdominalSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strAbdominalSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_ABDOMINAL_NUMBER) FROM SYSTEMIC_ABDOMINAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ABDOMINAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ABDOMINAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM ABDOMINAL_SYMPTOM WHERE ABDOMINAL_SYMPTOM_CODE = " + abdominalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ABDOMINAL_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT ABDOMINAL_SYMPTOM_DESCRIPTION FROM ABDOMINAL_SYMPTOM WHERE ABDOMINAL_SYMPTOM_CODE = " + abdominalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ABDOMINAL_SYMPTOM", userName, password, _theOS);
            strAbdominalSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ABDOMINAL_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Abdominal)-" + strAbdominalSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ABDOMINAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ABDOMINAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("ABDOMINAL_SYMPTOM_CODE", abdominalSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_ABDOMINAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ABDOMINAL");
            tabSymbols.put((Object)"SYSTEMIC_ABDOMINAL", (Object)"Abdominal Symptom: " + strAbdominalSymptom);
            tableAliases.put((Object)"SYSTEMIC_ABDOMINAL", (Object)patientName);

            groupName = new String("Patient Abdominal Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_ABDOMINAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ABDOMINAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ABDOMINAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPatientSystemicMusculoskeletal(String keyValue, String musculoskeletalSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strMusculoskeletalSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_MUSCULOSKELETAL_NUMBER) FROM SYSTEMIC_MUSCULOSKELETAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_MUSCULOSKELETAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_MUSCULOSKELETAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM MUSCULOSKELETAL_SYMPTOM WHERE MUSCULOSKELETAL_SYMPTOM_CODE = " + musculoskeletalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MUSCULOSKELETAL_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");
            
            sqlQuery = "SELECT MUSCULOSKELETAL_SYMPTOM_DESCRIPTION FROM MUSCULOSKELETAL_SYMPTOM WHERE MUSCULOSKELETAL_SYMPTOM_CODE = " + musculoskeletalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MUSCULOSKELETAL_SYMPTOM", userName, password, _theOS);
            strMusculoskeletalSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MUSCULOSKELETAL_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Musculoskeletal)-" + strMusculoskeletalSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_MUSCULOSKELETAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_MUSCULOSKELETAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("MUSCULOSKELETAL_SYMPTOM_CODE", musculoskeletalSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_MUSCULOSKELETAL");
            tabSymbols.put((Object)"SYSTEMIC_MUSCULOSKELETAL", (Object)"Musculoskeletal Symptom: " + strMusculoskeletalSymptom);
            tableAliases.put((Object)"SYSTEMIC_MUSCULOSKELETAL", (Object)patientName);

            groupName = new String("Patient Musculoskeletal Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_MUSCULOSKELETAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_MUSCULOSKELETAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_MUSCULOSKELETAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientSystemicCNS(String keyValue, String cnsSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strCNSSymptom = null;

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            setTableCount(1);
            
            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_CNS_NUMBER) FROM SYSTEMIC_CNS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CNS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_CNS_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM CNS_SYMPTOM WHERE CNS_SYMPTOM_CODE = " + cnsSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CNS_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT CNS_SYMPTOM_DESCRIPTION FROM CNS_SYMPTOM WHERE CNS_SYMPTOM_CODE = " + cnsSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CNS_SYMPTOM", userName, password, _theOS);
            strCNSSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "CNS_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Central Nervous System)-" + strCNSSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CNS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_CNS_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("CNS_SYMPTOM_CODE", cnsSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_CNS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_CNS");
            tabSymbols.put((Object)"SYSTEMIC_CNS", (Object)"CNS Symptom: " + strCNSSymptom);
            tableAliases.put((Object)"SYSTEMIC_CNS", (Object)patientName);

            groupName = new String("Patient CNS Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_CNS_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_CNS_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_CNS_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientSystemicENT(String keyValue, String entSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strENTSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_ENT_NUMBER) FROM SYSTEMIC_ENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM ENT_SYMPTOM WHERE ENT_SYMPTOM_CODE = " + entSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ENT_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT ENT_SYMPTOM_DESCRIPTION FROM ENT_SYMPTOM WHERE ENT_SYMPTOM_CODE = " + entSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ENT_SYMPTOM", userName, password, _theOS);
            strENTSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ENT_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Ear-Nose-Throat)-" + strENTSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("ENT_SYMPTOM_CODE", entSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_ENT",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ENT");
            tabSymbols.put((Object)"SYSTEMIC_ENT", (Object)"ENT Symptom: " + strENTSymptom);
            tableAliases.put((Object)"SYSTEMIC_ENT", (Object)patientName);

            groupName = new String("Patient ENT Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_ENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ENT_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientSystemicDermatolocical(String keyValue, String dermatologicalSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strDermatologicalSymptom = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_DERMATOLOGICAL_NUMBER) FROM SYSTEMIC_DERMATOLOGICAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_DERMATOLOGICAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_DERMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM DERMATOLOGICAL_SYMPTOM WHERE DERMATOLOGICAL_SYMPTOM_CODE = " + dermatologicalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DERMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT DERMATOLOGICAL_SYMPTOM_DESCRIPTION FROM DERMATOLOGICAL_SYMPTOM WHERE DERMATOLOGICAL_SYMPTOM_CODE = " + dermatologicalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DERMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            strDermatologicalSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "DERMATOLOGICAL_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Dermatological)-" + strDermatologicalSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_DERMATOLOGICAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_DERMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("DERMATOLOGICAL_SYMPTOM_CODE", dermatologicalSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_DERMATOLOGICAL");
            tabSymbols.put((Object)"SYSTEMIC_DERMATOLOGICAL", (Object)"Dermatological Symptom: " + strDermatologicalSymptom);
            tableAliases.put((Object)"SYSTEMIC_DERMATOLOGICAL", (Object)patientName);

            groupName = new String("Patient Dermatological Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");

            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_DERMATOLOGICAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_DERMATOLOGICAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_DERMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSystemicHematolocical(String keyValue, String hematologicalSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strHematologicalSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_HEMATOLOGICAL_NUMBER) FROM SYSTEMIC_HEMATOLOGICAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_HEMATOLOGICAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_HEMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM HEMATOLOGICAL_SYMPTOM WHERE HEMATOLOGICAL_SYMPTOM_CODE = " + hematologicalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT HEMATOLOGICAL_SYMPTOM_DESCRIPTION FROM HEMATOLOGICAL_SYMPTOM WHERE HEMATOLOGICAL_SYMPTOM_CODE = " + hematologicalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            strHematologicalSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "HEMATOLOGICAL_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Hematological)-" + strHematologicalSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_HEMATOLOGICAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_HEMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HEMATOLOGICAL_SYMPTOM_CODE", hematologicalSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_HEMATOLOGICAL");
            tabSymbols.put((Object)"SYSTEMIC_HEMATOLOGICAL", (Object)"Hematological Symptom: " + strHematologicalSymptom);
            tableAliases.put((Object)"SYSTEMIC_HEMATOLOGICAL", (Object)patientName);

            groupName = new String("Patient Hematological Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_HEMATOLOGICAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_HEMATOLOGICAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_HEMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSystemicEyes(String keyValue, String eyesSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strEyesSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(SYSTEMIC_EYES_NUMBER) FROM SYSTEMIC_EYES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_EYES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_EYES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM EYES_SYMPTOM WHERE EYES_SYMPTOM_CODE = " + eyesSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EYES_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT EYES_SYMPTOM_DESCRIPTION FROM EYES_SYMPTOM WHERE EYES_SYMPTOM_CODE = " + eyesSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EYES_SYMPTOM", userName, password, _theOS);
            strEyesSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "EYES_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Eyes)-" + strEyesSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_EYES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_EYES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("EYES_SYMPTOM_CODE", eyesSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_EYES",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_EYES");
            tabSymbols.put((Object)"SYSTEMIC_EYES", (Object)"Eyes Symptom: " + strEyesSymptom);
            tableAliases.put((Object)"SYSTEMIC_EYES", (Object)patientName);

            groupName = new String("Patient Eyes Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_EYES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_EYES_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_EYES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSystemicUrogenital(String keyValue, String urogenitalSymptom, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strUrogenitalSymptom = null;

            setTableCount(1);
            
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;

            accountNumber = keyValue;
       
            sqlQuery = "SELECT MAX(SYSTEMIC_UROGENITAL_NUMBER) FROM SYSTEMIC_UROGENITAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_UROGENITAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_UROGENITAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_ENABLED FROM UROGENITAL_SYMPTOM WHERE UROGENITAL_SYMPTOM_CODE = " + urogenitalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UROGENITAL_SYMPTOM", userName, password, _theOS);
            strAnatomyEnabled = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "ANATOMICAL_LOCATION_ENABLED", "BINARY");

            fieldFilterList = new HashMap(1);
            fieldFilterList.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)strAnatomyEnabled);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"LOOKUP");

            sqlQuery = "SELECT UROGENITAL_SYMPTOM_DESCRIPTION FROM UROGENITAL_SYMPTOM WHERE UROGENITAL_SYMPTOM_CODE = " + urogenitalSymptom;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UROGENITAL_SYMPTOM", userName, password, _theOS);
            strUrogenitalSymptom = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "UROGENITAL_SYMPTOM_DESCRIPTION", "TEXT");
            
            systemicSymptom = "(Urogenital)-" + strUrogenitalSymptom.trim();
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_UROGENITAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_UROGENITAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("UROGENITAL_SYMPTOM_CODE", urogenitalSymptom);
            dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"SYSTEMIC_UROGENITAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_UROGENITAL");
            tabSymbols.put((Object)"SYSTEMIC_UROGENITAL", (Object)"Urogenital Symptom: " + strUrogenitalSymptom);
            tableAliases.put((Object)"SYSTEMIC_UROGENITAL", (Object)patientName);

            groupName = new String("Patient Urogenital Symptoms Data Capture");

            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_UROGENITAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_UROGENITAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_UROGENITAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPatientThyroid(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_THYROID_NUMBER) FROM SYSTEMIC_THYROID";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_THYROID", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_THYROID_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_THYROID", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_THYROID_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_THYROID",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_THYROID");
            tabSymbols.put((Object)"SYSTEMIC_THYROID", (Object)"Endocrine: Thyroid");
            tableAliases.put((Object)"SYSTEMIC_THYROID", (Object)patientName);

            systemicSymptom = "(Endocrine)-Thyroid";

            groupName = new String("Patient Thyroid Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(2);

            sqlQuery = "SELECT WEIGHT_TYPE_CODE, WEIGHT_TYPE_DESCRIPTION FROM WEIGHT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WEIGHT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TEMPERATURE_PREFERENCE_CODE, TEMPERATURE_PREFERENCE_DESCRIPTION FROM TEMPERATURE_PREFERENCE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEMPERATURE_PREFERENCE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TEMPERATURE_PREFERENCE_CODE", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"TEMPERATURE_PREFERENCE_CODE", (Object)"Neutral");

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_THYROID_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_THYROID_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_THYROID_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientAdrenal(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_ADRENAL_NUMBER) FROM SYSTEMIC_ADRENAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ADRENAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ADRENAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ADRENAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ADRENAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_ADRENAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ADRENAL");
            tabSymbols.put((Object)"SYSTEMIC_ADRENAL", (Object)"Endocrine: Adrenal");
            tableAliases.put((Object)"SYSTEMIC_ADRENAL", (Object)patientName);

            systemicSymptom = "(Endocrine)-Adrenal";

            groupName = new String("Patient Adrenal Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(2);

            sqlQuery = "SELECT WEIGHT_TYPE_CODE, WEIGHT_TYPE_DESCRIPTION FROM WEIGHT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WEIGHT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT BLOOD_PRESSURE_TYPE_CODE, BLOOD_PRESSURE_TYPE_DESCRIPTION FROM BLOOD_PRESSURE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BLOOD_PRESSURE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)"Normal");

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_ADRENAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_ADRENAL_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_ADRENAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientPituitary(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_PITUITARY_NUMBER) FROM SYSTEMIC_PITUITARY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PITUITARY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PITUITARY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PITUITARY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PITUITARY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_PITUITARY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PITUITARY");
            tabSymbols.put((Object)"SYSTEMIC_PITUITARY", (Object)"Endocrine: Pituitary");
            tableAliases.put((Object)"SYSTEMIC_PITUITARY", (Object)patientName);

            systemicSymptom = "(Endocrine)-Pituitary";

            groupName = new String("Patient Pituitary Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT WEIGHT_TYPE_CODE, WEIGHT_TYPE_DESCRIPTION FROM WEIGHT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WEIGHT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"Stable");

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_PITUITARY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PITUITARY_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PITUITARY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initAddPatientParaThyroid(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_PARATHYROID_NUMBER) FROM SYSTEMIC_PARATHYROID";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PARATHYROID", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PARATHYROID_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PARATHYROID", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PARATHYROID_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_PARATHYROID",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PARATHYROID");
            tabSymbols.put((Object)"SYSTEMIC_PARATHYROID", (Object)"Endocrine: Parathyroid");
            tableAliases.put((Object)"SYSTEMIC_PARATHYROID", (Object)patientName);

            systemicSymptom = "(Endocrine)-Parathyroid";

            groupName = new String("Patient Parathyroid Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(2);

            comboBoxDefaultCollection = new HashMap(2);

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_PARATHYROID_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PARATHYROID_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PARATHYROID_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPatientPancreas(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_PANCREAS_NUMBER) FROM SYSTEMIC_PANCREAS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PANCREAS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PANCREAS_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PANCREAS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PANCREAS_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_PANCREAS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PANCREAS");
            tabSymbols.put((Object)"SYSTEMIC_PANCREAS", (Object)"Endocrine: Pancreas");
            tableAliases.put((Object)"SYSTEMIC_PANCREAS", (Object)patientName);

            systemicSymptom = "(Endocrine)-Pancreas";

            groupName = new String("Patient Pancreas Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);
            

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"Normal");

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_PANCREAS_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_PANCREAS_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_PANCREAS_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientGonads(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SYSTEMIC_GONADS_NUMBER) FROM SYSTEMIC_GONADS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_GONADS", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_GONADS_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_GONADS", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_GONADS_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SYSTEMIC_GONADS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_GONADS");
            tabSymbols.put((Object)"SYSTEMIC_GONADS", (Object)"Endocrine: Gonads");
            tableAliases.put((Object)"SYSTEMIC_GONADS", (Object)patientName);

            systemicSymptom = "(Endocrine)-Gonads";

            groupName = new String("Patient Gonad Symptoms Data Capture");

            lookupTableDataCollection = new HashMap(2);

            comboBoxDefaultCollection = new HashMap(2);

            updateButtonEvent = MenuStateMachine.systemic_enquiry_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SYSTEMIC_GONADS_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SYSTEMIC_GONADS_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SYSTEMIC_GONADS_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPatientSystemicModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaysystemic.xml";
            setTableCount(17);
            accountNumber = keyValue;
            
            //Table 1
            sqlQuery = "SELECT CONSTITUTIONAL_SYMPTOM_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY CONSTITUTIONAL_SYMPTOM_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "CONSTITUTIONAL_SYMPTOM_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CONSTITUTIONAL_SYMPTOMS", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("CONSTITUTIONAL_SYMPTOM_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"CONSTITUTIONAL_SYMPTOMS",(Object)dbAccessInstance);
            tableNames.add((Object)"CONSTITUTIONAL_SYMPTOMS");
            tabSymbols.put((Object)"CONSTITUTIONAL_SYMPTOMS", (Object)"Constitutional Symptom Data");
            tableAliases.put((Object)"CONSTITUTIONAL_SYMPTOMS", (Object)"Patient");
            
            //Table 2
            sqlQuery = "SELECT SYSTEMIC_CARDIOVASCULAR_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_CARDIOVASCULAR_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_CARDIOVASCULAR_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CARDIOVASCULAR", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_CARDIOVASCULAR_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_CARDIOVASCULAR");
            tabSymbols.put((Object)"SYSTEMIC_CARDIOVASCULAR", (Object)"Cardiovascular Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_CARDIOVASCULAR", (Object)"Patient");

            //Table 3
            sqlQuery = "SELECT SYSTEMIC_RESPIRATORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_RESPIRATORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_RESPIRATORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_RESPIRATORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_RESPIRATORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_RESPIRATORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_RESPIRATORY");
            tabSymbols.put((Object)"SYSTEMIC_RESPIRATORY", (Object)"Respiratory Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_RESPIRATORY", (Object)"Patient");
            
            //Table 4
            sqlQuery = "SELECT SYSTEMIC_ABDOMINAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_ABDOMINAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_ABDOMINAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ABDOMINAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_ABDOMINAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_ABDOMINAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ABDOMINAL");
            tabSymbols.put((Object)"SYSTEMIC_ABDOMINAL", (Object)"Abdominal Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_ABDOMINAL", (Object)"Patient");
            
            //Table 5
            sqlQuery = "SELECT SYSTEMIC_MUSCULOSKELETAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_MUSCULOSKELETAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_MUSCULOSKELETAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_MUSCULOSKELETAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_MUSCULOSKELETAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_MUSCULOSKELETAL");
            tabSymbols.put((Object)"SYSTEMIC_MUSCULOSKELETAL", (Object)"Musculoskeletal Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_MUSCULOSKELETAL", (Object)"Patient");

            //Table 6
           sqlQuery = "SELECT SYSTEMIC_CNS_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_CNS_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_CNS_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_CNS", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_CNS_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_CNS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_CNS");
            tabSymbols.put((Object)"SYSTEMIC_CNS", (Object)"Central Nervous System Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_CNS", (Object)"Patient");

            //Table 7
            sqlQuery = "SELECT SYSTEMIC_ENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_ENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_ENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ENT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_ENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_ENT",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ENT");
            tabSymbols.put((Object)"SYSTEMIC_ENT", (Object)"Ear-Nose-Throat Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_ENT", (Object)"Patient");

            //Table 8
            sqlQuery = "SELECT SYSTEMIC_DERMATOLOGICAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_DERMATOLOGICAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_DERMATOLOGICAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_DERMATOLOGICAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_DERMATOLOGICAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_DERMATOLOGICAL");
            tabSymbols.put((Object)"SYSTEMIC_DERMATOLOGICAL", (Object)"Dermatological Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_DERMATOLOGICAL", (Object)"Patient");

            //Table 9
            sqlQuery = "SELECT SYSTEMIC_HEMATOLOGICAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_HEMATOLOGICAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_HEMATOLOGICAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_HEMATOLOGICAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_HEMATOLOGICAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_HEMATOLOGICAL");
            tabSymbols.put((Object)"SYSTEMIC_HEMATOLOGICAL", (Object)"Hematological Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_HEMATOLOGICAL", (Object)"Patient");
            
            //Table 10
            sqlQuery = "SELECT SYSTEMIC_EYES_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_EYES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_EYES_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_EYES", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_EYES_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_EYES",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_EYES");
            tabSymbols.put((Object)"SYSTEMIC_EYES", (Object)"Eyes Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_EYES", (Object)"Patient");

            //Table 11
            sqlQuery = "SELECT SYSTEMIC_UROGENITAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_UROGENITAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_UROGENITAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_UROGENITAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_UROGENITAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_UROGENITAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_UROGENITAL");
            tabSymbols.put((Object)"SYSTEMIC_UROGENITAL", (Object)"Urogenital Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_UROGENITAL", (Object)"Patient");

            //Table 12
            sqlQuery = "SELECT SYSTEMIC_THYROID_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_THYROID_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_THYROID_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_THYROID", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_THYROID_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_THYROID",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_THYROID");
            tabSymbols.put((Object)"SYSTEMIC_THYROID", (Object)"Thyroid Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_THYROID", (Object)"Patient");

            //Table 13
            sqlQuery = "SELECT SYSTEMIC_ADRENAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_ADRENAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_ADRENAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_ADRENAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_ADRENAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_ADRENAL",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_ADRENAL");
            tabSymbols.put((Object)"SYSTEMIC_ADRENAL", (Object)"Adrenal Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_ADRENAL", (Object)"Patient");
            

            //Table 14
            sqlQuery = "SELECT SYSTEMIC_PITUITARY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_PITUITARY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_PITUITARY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PITUITARY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_PITUITARY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_PITUITARY",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PITUITARY");
            tabSymbols.put((Object)"SYSTEMIC_PITUITARY", (Object)"Pituitary Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_PITUITARY", (Object)"Patient");
            
            //Table 15
            sqlQuery = "SELECT SYSTEMIC_PARATHYROID_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_PARATHYROID_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_PARATHYROID_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PARATHYROID", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_PARATHYROID_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_PARATHYROID",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PARATHYROID");
            tabSymbols.put((Object)"SYSTEMIC_PARATHYROID", (Object)"Parathyroid Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_PARATHYROID", (Object)"Patient");
            
            //Table 16
            sqlQuery = "SELECT SYSTEMIC_PANCREAS_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_PANCREAS_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_PANCREAS_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_PANCREAS", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_PANCREAS_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_PANCREAS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_PANCREAS");
            tabSymbols.put((Object)"SYSTEMIC_PANCREAS", (Object)"Pancreas Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_PANCREAS", (Object)"Patient");
            
            //Table 17
            sqlQuery = "SELECT SYSTEMIC_GONADS_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SYSTEMIC_GONADS_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SYSTEMIC_GONADS_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEMIC_GONADS", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SYSTEMIC_GONADS_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SYSTEMIC_GONADS",(Object)dbAccessInstance);
            tableNames.add((Object)"SYSTEMIC_GONADS");
            tabSymbols.put((Object)"SYSTEMIC_GONADS", (Object)"Gonads Symptom Data");
            tableAliases.put((Object)"SYSTEMIC_GONADS", (Object)"Patient");
            
            //********************************************************************
            
            lookupTableDataCollection = new HashMap(16);
            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ANATOMICAL_LOCATION_CODE, LOCATION_DESCRIPTION FROM ANATOMICAL_LOCATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANATOMICAL_LOCATION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
             
            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT WEIGHT_TYPE_CODE, WEIGHT_TYPE_DESCRIPTION FROM WEIGHT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WEIGHT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BLOOD_PRESSURE_TYPE_CODE, BLOOD_PRESSURE_TYPE_DESCRIPTION FROM BLOOD_PRESSURE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BLOOD_PRESSURE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APPETITE_TYPE_CODE, APPETITE_DESCRIPTION FROM APPETITE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APPETITE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APPETITE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT TEMPERATURE_PREFERENCE_CODE, TEMPERATURE_PREFERENCE_DESCRIPTION FROM TEMPERATURE_PREFERENCE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TEMPERATURE_PREFERENCE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TEMPERATURE_PREFERENCE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CARDIOVASCULAR_SYMPTOM_CODE, CARDIOVASCULAR_SYMPTOM_DESCRIPTION FROM CARDIOVASCULAR_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CARDIOVASCULAR_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CARDIOVASCULAR_SYMPTOM_CODE", (Object)lookupTableData);
           
            sqlQuery = "SELECT RESPIRATORY_SYMPTOM_CODE, RESPIRATORY_SYMPTOM_DESCRIPTION FROM RESPIRATORY_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESPIRATORY_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RESPIRATORY_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ABDOMINAL_SYMPTOM_CODE, ABDOMINAL_SYMPTOM_DESCRIPTION FROM ABDOMINAL_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ABDOMINAL_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ABDOMINAL_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT MUSCULOSKELETAL_SYMPTOM_CODE, MUSCULOSKELETAL_SYMPTOM_DESCRIPTION FROM MUSCULOSKELETAL_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MUSCULOSKELETAL_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MUSCULOSKELETAL_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CNS_SYMPTOM_CODE, CNS_SYMPTOM_DESCRIPTION FROM CNS_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CNS_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CNS_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ENT_SYMPTOM_CODE, ENT_SYMPTOM_DESCRIPTION FROM ENT_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ENT_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ENT_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DERMATOLOGICAL_SYMPTOM_CODE, DERMATOLOGICAL_SYMPTOM_DESCRIPTION FROM DERMATOLOGICAL_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DERMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DERMATOLOGICAL_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEMATOLOGICAL_SYMPTOM_CODE, HEMATOLOGICAL_SYMPTOM_DESCRIPTION FROM HEMATOLOGICAL_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEMATOLOGICAL_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEMATOLOGICAL_SYMPTOM_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT EYES_SYMPTOM_CODE, EYES_SYMPTOM_DESCRIPTION FROM EYES_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EYES_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EYES_SYMPTOM_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UROGENITAL_SYMPTOM_CODE, UROGENITAL_SYMPTOM_DESCRIPTION FROM UROGENITAL_SYMPTOM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UROGENITAL_SYMPTOM", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UROGENITAL_SYMPTOM_CODE", (Object)lookupTableData);
           
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Systemic report on " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(40);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            comboBoxDefaultCollection.put((Object)"SWEATING_EXCESSIVE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"TREMORS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"EMOTIONABILITY", (Object)"no");
            comboBoxDefaultCollection.put((Object)"LOST_WEIGHT", (Object)"no");
            comboBoxDefaultCollection.put((Object)"WEIGHT_AMOUNT", (Object)"0");
            comboBoxDefaultCollection.put((Object)"LOST_APPETITE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"NIGHTSWEATS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"FEVER", (Object)"no");

            comboBoxDefaultCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"Stable");
            comboBoxDefaultCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"DIAPHORESIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"TREMORS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"EMOTIONABILITY", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ASTHENIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MYALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"GASTRALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ARTHRALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"POLYURIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPERPIGMENTATION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DEHYDRATION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"TACHYCARDIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"PYREXIA", (Object)"no");

            comboBoxDefaultCollection.put((Object)"MEGALOMANUS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MEGALOPODIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"SKINGROWTH", (Object)"no");
            comboBoxDefaultCollection.put((Object)"JAWPROMINENT", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MACROPROSOPIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"PACHYDERMIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DYSPHONIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DYSPHONIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HEADACHE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ARTHRALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MYOMALACIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"CARPALTUNNEL", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPERPIGMENTATION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPOPIGMENTATION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DIAPHORESIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MYASTHENIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HIRSUITISMFEMALE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"XERODERMIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"XERODERMIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"AGRAMMATOLOGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPERCRYAESTHESIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ANOREXIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPOTRICHOSIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"AMIBLYOPIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"GASTRALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"SEBACEOUSLARGE", (Object)"no");

            comboBoxDefaultCollection.put((Object)"LETHARGY", (Object)"no");
            comboBoxDefaultCollection.put((Object)"NEPHROLITH", (Object)"no");
            comboBoxDefaultCollection.put((Object)"NAUSEA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"COPROSTASIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MYALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"OSTEOCLASIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"OSTEOPOROSIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"RICKETS", (Object)"no");

            comboBoxDefaultCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ICTERUS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"GASTRALGIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"STOOLSCLAYCOLORED", (Object)"no");
            comboBoxDefaultCollection.put((Object)"STEATORRHOEA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"NAUSEA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"WEIGHTLOSS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"FACIALFLUSHING", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HEADACHE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DIARRHEA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"FATIGUE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DYSPEPSIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"BLURREDVISION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"PALLOR", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DEPRESSION", (Object)"no");
            comboBoxDefaultCollection.put((Object)"BEHAVIOURCHANGES", (Object)"no");
            comboBoxDefaultCollection.put((Object)"BILIRUBINABSENT", (Object)"no");
            comboBoxDefaultCollection.put((Object)"URINEDARK", (Object)"no");
            comboBoxDefaultCollection.put((Object)"PRURITIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"STOMATITIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"GLOSSITIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"FLATULENCEEXCESSIVE", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ECZEMA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"SINGULTUS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"POLYDIPSIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"POLYURIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"ERECTILEDYS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HAEMATEMESIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"FREQUENTINFECT", (Object)"no");
            comboBoxDefaultCollection.put((Object)"SLOWHEAL", (Object)"no");
            
            comboBoxDefaultCollection.put((Object)"CRYPTORCHISM", (Object)"no");
            comboBoxDefaultCollection.put((Object)"DECREASEDBODYHAIR", (Object)"no");
            comboBoxDefaultCollection.put((Object)"GYNAECOMASTIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"INFERTILITY", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MICROSOMIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"MENOLIPSIS", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HYPOMASTIA", (Object)"no");
            comboBoxDefaultCollection.put((Object)"AMYOTROPHIC", (Object)"no");
            comboBoxDefaultCollection.put((Object)"LIBIDODECREASED", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HOTFLUSHES", (Object)"no");
            comboBoxDefaultCollection.put((Object)"HEADACHES", (Object)"no");
            comboBoxDefaultCollection.put((Object)"AMAUROSIS", (Object)"no");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(15);
            fieldByTableCollection = new HashMap(15);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);


            tableRowDisplayHeightCollection.put((Object)"CONSTITUTIONAL_SYMPTOMS", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_RESPIRATORY", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_ABDOMINAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_CNS", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_ENT", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_EYES", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_UROGENITAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_THYROID", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_ADRENAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_PITUITARY", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_PARATHYROID", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_PANCREAS", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"SYSTEMIC_GONADS", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"CONSTITUTIONAL_SYMPTOM_NUMBER", (Object)"2,1");
            fieldDispCoordinateCollection.put((Object)"CONSTITUTIONAL_SYMPTOM_NUMBER", (Object)"2,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"LOST_WEIGHT", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"LOST_WEIGHT", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"WEIGHT_AMOUNT", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"WEIGHT_AMOUNT", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"LOST_APPETITE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"LOST_APPETITE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"NIGHTSWEATS", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"NIGHTSWEATS", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"FEVER", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"FEVER", (Object)"8,2");

            labelByTableCollection.put((Object)"CONSTITUTIONAL_SYMPTOMS",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"CONSTITUTIONAL_SYMPTOMS",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR_NUMBER", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR_NUMBER", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"CARDIOVASCULAR_SYMPTOM_CODE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"CARDIOVASCULAR_SYMPTOM_CODE", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"16,1");

            labelByTableCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_CARDIOVASCULAR",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_RESPIRATORY_NUMBER", (Object)"17,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_RESPIRATORY_NUMBER", (Object)"17,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"18,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"18,2");
            labelDispCoordinateCollection.put((Object)"RESPIRATORY_SYMPTOM_CODE", (Object)"19,1");
            fieldDispCoordinateCollection.put((Object)"RESPIRATORY_SYMPTOM_CODE", (Object)"19,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"20,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"20,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"21,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"21,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"22,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"22,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"23,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"23,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"24,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"25,1");

            labelByTableCollection.put((Object)"SYSTEMIC_RESPIRATORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_RESPIRATORY",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_ABDOMINAL_NUMBER", (Object)"26,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_ABDOMINAL_NUMBER", (Object)"26,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"27,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"27,2");
            labelDispCoordinateCollection.put((Object)"ABDOMINAL_SYMPTOM_CODE", (Object)"28,1");
            fieldDispCoordinateCollection.put((Object)"ABDOMINAL_SYMPTOM_CODE", (Object)"28,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"29,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"29,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"30,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"30,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"31,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"31,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"32,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"32,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"33,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"34,1");

            labelByTableCollection.put((Object)"SYSTEMIC_ABDOMINAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_ABDOMINAL",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL_NUMBER", (Object)"35,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL_NUMBER", (Object)"35,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"36,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"36,2");
            labelDispCoordinateCollection.put((Object)"MUSCULOSKELETAL_SYMPTOM_CODE", (Object)"37,1");
            fieldDispCoordinateCollection.put((Object)"MUSCULOSKELETAL_SYMPTOM_CODE", (Object)"37,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"38,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"38,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"39,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"39,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"40,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"40,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"41,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"414,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"42,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"43,1");

            labelByTableCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_MUSCULOSKELETAL",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_CNS_NUMBER", (Object)"44,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_CNS_NUMBER", (Object)"44,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"45,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"45,2");
            labelDispCoordinateCollection.put((Object)"CNS_SYMPTOM_CODE", (Object)"46,1");
            fieldDispCoordinateCollection.put((Object)"CNS_SYMPTOM_CODE", (Object)"46,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"47,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"47,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"48,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"48,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"49,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"49,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"50,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"50,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"51,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"52,1");

            labelByTableCollection.put((Object)"SYSTEMIC_CNS",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_CNS",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_ENT_NUMBER", (Object)"53,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_ENT_NUMBER", (Object)"53,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"54,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"54,2");
            labelDispCoordinateCollection.put((Object)"ENT_SYMPTOM_CODE", (Object)"55,1");
            fieldDispCoordinateCollection.put((Object)"ENT_SYMPTOM_CODE", (Object)"55,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"56,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"56,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"57,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"57,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"58,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"58,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"59,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"59,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"60,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"61,1");

            labelByTableCollection.put((Object)"SYSTEMIC_ENT",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_ENT",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL_NUMBER", (Object)"62,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL_NUMBER", (Object)"62,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"63,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"63,2");
            labelDispCoordinateCollection.put((Object)"DERMATOLOGICAL_SYMPTOM_CODE", (Object)"64,1");
            fieldDispCoordinateCollection.put((Object)"DERMATOLOGICAL_SYMPTOM_CODE", (Object)"64,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"65,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"65,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"66,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"66,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"67,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"67,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"68,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"68,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"69,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"70,1");

            labelByTableCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_DERMATOLOGICAL",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL_NUMBER", (Object)"71,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL_NUMBER", (Object)"71,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"72,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"72,2");
            labelDispCoordinateCollection.put((Object)"HEMATOLOGICAL_SYMPTOM_CODE", (Object)"73,1");
            fieldDispCoordinateCollection.put((Object)"HEMATOLOGICAL_SYMPTOM_CODE", (Object)"73,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"74,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"74,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"75,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"75,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"76,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"76,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"77,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"77,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"78,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"79,1");

            labelByTableCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_HEMATOLOGICAL",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_EYES_NUMBER", (Object)"80,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_EYES_NUMBER", (Object)"80,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"81,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"81,2");
            labelDispCoordinateCollection.put((Object)"EYES_SYMPTOM_CODE", (Object)"82,1");
            fieldDispCoordinateCollection.put((Object)"EYES_SYMPTOM_CODE", (Object)"82,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"83,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"83,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"84,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"84,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"85,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"85,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"86,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"86,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"87,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"88,1");

            labelByTableCollection.put((Object)"SYSTEMIC_EYES",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_EYES",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_UROGENITAL_NUMBER", (Object)"89,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_UROGENITAL_NUMBER", (Object)"89,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"90,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"90,2");
            labelDispCoordinateCollection.put((Object)"UROGENITAL_SYMPTOM_CODE", (Object)"91,1");
            fieldDispCoordinateCollection.put((Object)"UROGENITAL_SYMPTOM_CODE", (Object)"91,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"92,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"92,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"93,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"93,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"94,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"94,2");
            labelDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"95,1");
            fieldDispCoordinateCollection.put((Object)"ANATOMICAL_LOCATION_CODE", (Object)"95,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"96,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"97,1");

            labelByTableCollection.put((Object)"SYSTEMIC_UROGENITAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_UROGENITAL",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_THYROID_NUMBER", (Object)"98,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_THYROID_NUMBER", (Object)"98,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"99,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"99,2");
            labelDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"100,1");
            fieldDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"100,2");
            labelDispCoordinateCollection.put((Object)"TEMPERATURE_PREFERENCE_CODE", (Object)"101,1");
            fieldDispCoordinateCollection.put((Object)"TEMPERATURE_PREFERENCE_CODE", (Object)"101,2");
            labelDispCoordinateCollection.put((Object)"SWEATING_EXCESSIVE", (Object)"102,1");
            fieldDispCoordinateCollection.put((Object)"SWEATING_EXCESSIVE", (Object)"102,2");
            labelDispCoordinateCollection.put((Object)"TREMORS", (Object)"103,1");
            fieldDispCoordinateCollection.put((Object)"TREMORS", (Object)"103,2");
            labelDispCoordinateCollection.put((Object)"EMOTIONABILITY", (Object)"104,1");
            fieldDispCoordinateCollection.put((Object)"EMOTIONABILITY", (Object)"104,2");

            labelByTableCollection.put((Object)"SYSTEMIC_THYROID",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_THYROID",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_ADRENAL_NUMBER", (Object)"105,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_ADRENAL_NUMBER", (Object)"105,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"106,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"106,2");
            labelDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"107,1");
            fieldDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"107,2");
            labelDispCoordinateCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)"108,1");
            fieldDispCoordinateCollection.put((Object)"BLOOD_PRESSURE_TYPE_CODE", (Object)"108,2");
            labelDispCoordinateCollection.put((Object)"DIAPHORESIS", (Object)"109,1");
            fieldDispCoordinateCollection.put((Object)"DIAPHORESIS", (Object)"109,2");
            labelDispCoordinateCollection.put((Object)"TREMORS", (Object)"110,1");
            fieldDispCoordinateCollection.put((Object)"TREMORS", (Object)"110,2");
            labelDispCoordinateCollection.put((Object)"EMOTIONABILITY", (Object)"111,1");
            fieldDispCoordinateCollection.put((Object)"EMOTIONABILITY", (Object)"111,2");
            labelDispCoordinateCollection.put((Object)"ASTHENIA", (Object)"112,1");
            fieldDispCoordinateCollection.put((Object)"ASTHENIA", (Object)"112,2");
            labelDispCoordinateCollection.put((Object)"MYALGIA", (Object)"113,1");
            fieldDispCoordinateCollection.put((Object)"MYALGIA", (Object)"113,2");
            labelDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"114,1");
            fieldDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"114,2");
            labelDispCoordinateCollection.put((Object)"ARTHRALGIA", (Object)"115,1");
            fieldDispCoordinateCollection.put((Object)"ARTHRALGIA", (Object)"115,2");
            labelDispCoordinateCollection.put((Object)"POLYURIA", (Object)"116,1");
            fieldDispCoordinateCollection.put((Object)"POLYURIA", (Object)"116,2");
            labelDispCoordinateCollection.put((Object)"HYPERPIGMENTATION", (Object)"117,1");
            fieldDispCoordinateCollection.put((Object)"HYPERPIGMENTATION", (Object)"117,2");
            labelDispCoordinateCollection.put((Object)"DEHYDRATION", (Object)"118,1");
            fieldDispCoordinateCollection.put((Object)"DEHYDRATION", (Object)"118,2");
            labelDispCoordinateCollection.put((Object)"TACHYCARDIA", (Object)"119,1");
            fieldDispCoordinateCollection.put((Object)"TACHYCARDIA", (Object)"119,2");
            labelDispCoordinateCollection.put((Object)"PYREXIA", (Object)"120,1");
            fieldDispCoordinateCollection.put((Object)"PYREXIA", (Object)"120,2");
           

            labelByTableCollection.put((Object)"SYSTEMIC_ADRENAL",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_ADRENAL",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_ADRENAL_NUMBER", (Object)"121,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_ADRENAL_NUMBER", (Object)"121,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"122,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"122,2");
            labelDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"123,1");
            fieldDispCoordinateCollection.put((Object)"WEIGHT_TYPE_CODE", (Object)"123,2");
            labelDispCoordinateCollection.put((Object)"MEGALOMANUS", (Object)"124,1");
            fieldDispCoordinateCollection.put((Object)"MEGALOMANUS", (Object)"124,2");
            labelDispCoordinateCollection.put((Object)"MEGALOPODIA", (Object)"125,1");
            fieldDispCoordinateCollection.put((Object)"MEGALOPODIA", (Object)"125,2");
            labelDispCoordinateCollection.put((Object)"SKINGROWTH", (Object)"126,1");
            fieldDispCoordinateCollection.put((Object)"SKINGROWTH", (Object)"126,2");
            labelDispCoordinateCollection.put((Object)"JAWPROMINENT", (Object)"127,1");
            fieldDispCoordinateCollection.put((Object)"JAWPROMINENT", (Object)"127,2");
            labelDispCoordinateCollection.put((Object)"MACROPROSOPIA", (Object)"128,1");
            fieldDispCoordinateCollection.put((Object)"MACROPROSOPIA", (Object)"128,2");
            labelDispCoordinateCollection.put((Object)"PACHYDERMIA", (Object)"129,1");
            fieldDispCoordinateCollection.put((Object)"PACHYDERMIA", (Object)"129,2");
            labelDispCoordinateCollection.put((Object)"DYSPHONIA", (Object)"130,1");
            fieldDispCoordinateCollection.put((Object)"DYSPHONIA", (Object)"130,2");
            labelDispCoordinateCollection.put((Object)"HEADACHE", (Object)"131,1");
            fieldDispCoordinateCollection.put((Object)"HEADACHE", (Object)"131,2");
            labelDispCoordinateCollection.put((Object)"ARTHRALGIA", (Object)"132,1");
            fieldDispCoordinateCollection.put((Object)"ARTHRALGIA", (Object)"132,2");
            labelDispCoordinateCollection.put((Object)"MYOMALACIA", (Object)"133,1");
            fieldDispCoordinateCollection.put((Object)"MYOMALACIA", (Object)"133,2");
            labelDispCoordinateCollection.put((Object)"CARPALTUNNEL", (Object)"134,1");
            fieldDispCoordinateCollection.put((Object)"CARPALTUNNEL", (Object)"134,2");
            labelDispCoordinateCollection.put((Object)"HYPERPIGMENTATION", (Object)"135,1");
            fieldDispCoordinateCollection.put((Object)"HYPERPIGMENTATION", (Object)"135,2");
            labelDispCoordinateCollection.put((Object)"HYPOPIGMENTATION", (Object)"136,1");
            fieldDispCoordinateCollection.put((Object)"HYPOPIGMENTATION", (Object)"136,2");
            labelDispCoordinateCollection.put((Object)"DIAPHORESIS", (Object)"137,1");
            fieldDispCoordinateCollection.put((Object)"DIAPHORESIS", (Object)"137,2");
            labelDispCoordinateCollection.put((Object)"MYASTHENIA", (Object)"138,1");
            fieldDispCoordinateCollection.put((Object)"MYASTHENIA", (Object)"138,2");
            labelDispCoordinateCollection.put((Object)"HIRSUITISMFEMALE", (Object)"139,1");
            fieldDispCoordinateCollection.put((Object)"HIRSUITISMFEMALE", (Object)"139,2");
            labelDispCoordinateCollection.put((Object)"XERODERMIA", (Object)"140,1");
            fieldDispCoordinateCollection.put((Object)"XERODERMIA", (Object)"140,2");
            labelDispCoordinateCollection.put((Object)"AGRAMMATOLOGIA", (Object)"141,1");
            fieldDispCoordinateCollection.put((Object)"AGRAMMATOLOGIA", (Object)"141,2");
            labelDispCoordinateCollection.put((Object)"HYPERCRYAESTHESIA", (Object)"142,1");
            fieldDispCoordinateCollection.put((Object)"HYPERCRYAESTHESIA", (Object)"142,2");
            labelDispCoordinateCollection.put((Object)"ANOREXIA", (Object)"143,1");
            fieldDispCoordinateCollection.put((Object)"ANOREXIA", (Object)"143,2");
            labelDispCoordinateCollection.put((Object)"HYPOTRICHOSIS", (Object)"144,1");
            fieldDispCoordinateCollection.put((Object)"HYPOTRICHOSIS", (Object)"144,2");
            labelDispCoordinateCollection.put((Object)"AMIBLYOPIA", (Object)"145,1");
            fieldDispCoordinateCollection.put((Object)"AMIBLYOPIA", (Object)"145,2");
            labelDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"146,1");
            fieldDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"146,2");
            labelDispCoordinateCollection.put((Object)"SEBACEOUSLARGE", (Object)"147,1");
            fieldDispCoordinateCollection.put((Object)"SEBACEOUSLARGE", (Object)"147,2");
           

            labelByTableCollection.put((Object)"SYSTEMIC_PITUITARY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_PITUITARY",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_PARATHYROID_NUMBER", (Object)"148,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_PARATHYROID_NUMBER", (Object)"148,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"149,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"149,2");
            labelDispCoordinateCollection.put((Object)"NEPHROLITH", (Object)"150,1");
            fieldDispCoordinateCollection.put((Object)"NEPHROLITH", (Object)"150,2");
            labelDispCoordinateCollection.put((Object)"NAUSEA", (Object)"151,1");
            fieldDispCoordinateCollection.put((Object)"NAUSEA", (Object)"151,2");
            labelDispCoordinateCollection.put((Object)"COPROSTASIA", (Object)"152,1");
            fieldDispCoordinateCollection.put((Object)"COPROSTASIA", (Object)"152,2");
            labelDispCoordinateCollection.put((Object)"MYALGIA", (Object)"153,1");
            fieldDispCoordinateCollection.put((Object)"MYALGIA", (Object)"153,2");
            labelDispCoordinateCollection.put((Object)"OSTEOCLASIA", (Object)"154,1");
            fieldDispCoordinateCollection.put((Object)"OSTEOCLASIA", (Object)"154,2");
            labelDispCoordinateCollection.put((Object)"OSTEOPOROSIS", (Object)"155,1");
            fieldDispCoordinateCollection.put((Object)"OSTEOPOROSIS", (Object)"155,2");
            labelDispCoordinateCollection.put((Object)"RICKETS", (Object)"156,1");
            fieldDispCoordinateCollection.put((Object)"RICKETS", (Object)"156,2");

            labelByTableCollection.put((Object)"SYSTEMIC_PARATHYROID",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_PARATHYROID",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_PANCREAS_NUMBER", (Object)"157,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_PANCREAS_NUMBER", (Object)"157,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"158,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"158,2");
            labelDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"159,1");
            fieldDispCoordinateCollection.put((Object)"APPETITE_TYPE_CODE", (Object)"159,2");
            labelDispCoordinateCollection.put((Object)"ICTERUS", (Object)"160,1");
            fieldDispCoordinateCollection.put((Object)"ICTERUS", (Object)"160,2");
            labelDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"161,1");
            fieldDispCoordinateCollection.put((Object)"GASTRALGIA", (Object)"161,2");
            labelDispCoordinateCollection.put((Object)"STOOLSCLAYCOLORED", (Object)"162,1");
            fieldDispCoordinateCollection.put((Object)"STOOLSCLAYCOLORED", (Object)"162,2");
            labelDispCoordinateCollection.put((Object)"STEATORRHOEA", (Object)"163,1");
            fieldDispCoordinateCollection.put((Object)"STEATORRHOEA", (Object)"163,2");
            labelDispCoordinateCollection.put((Object)"NAUSEA", (Object)"164,1");
            fieldDispCoordinateCollection.put((Object)"NAUSEA", (Object)"164,2");
            labelDispCoordinateCollection.put((Object)"WEIGHTLOSS", (Object)"165,1");
            fieldDispCoordinateCollection.put((Object)"WEIGHTLOSS", (Object)"165,2");
            labelDispCoordinateCollection.put((Object)"FACIALFLUSHING", (Object)"166,1");
            fieldDispCoordinateCollection.put((Object)"FACIALFLUSHING", (Object)"166,2");
            labelDispCoordinateCollection.put((Object)"HEADACHE", (Object)"167,1");
            fieldDispCoordinateCollection.put((Object)"HEADACHE", (Object)"167,2");
            labelDispCoordinateCollection.put((Object)"DIARRHEA", (Object)"168,1");
            fieldDispCoordinateCollection.put((Object)"DIARRHEA", (Object)"168,2");
            labelDispCoordinateCollection.put((Object)"FATIGUE", (Object)"169,1");
            fieldDispCoordinateCollection.put((Object)"FATIGUE", (Object)"169,2");
            labelDispCoordinateCollection.put((Object)"DYSPEPSIA", (Object)"170,1");
            fieldDispCoordinateCollection.put((Object)"DYSPEPSIA", (Object)"170,2");
            labelDispCoordinateCollection.put((Object)"BLURREDVISION", (Object)"171,1");
            fieldDispCoordinateCollection.put((Object)"BLURREDVISION", (Object)"171,2");
            labelDispCoordinateCollection.put((Object)"HYPOPIGMENTATION", (Object)"172,1");
            fieldDispCoordinateCollection.put((Object)"HYPOPIGMENTATION", (Object)"172,2");
            labelDispCoordinateCollection.put((Object)"PALLOR", (Object)"173,1");
            fieldDispCoordinateCollection.put((Object)"PALLOR", (Object)"173,2");
            labelDispCoordinateCollection.put((Object)"DEPRESSION", (Object)"174,1");
            fieldDispCoordinateCollection.put((Object)"DEPRESSION", (Object)"174,2");
            labelDispCoordinateCollection.put((Object)"BEHAVIOURCHANGES", (Object)"175,1");
            fieldDispCoordinateCollection.put((Object)"BEHAVIOURCHANGES", (Object)"175,2");
            labelDispCoordinateCollection.put((Object)"BILIRUBINABSENT", (Object)"176,1");
            fieldDispCoordinateCollection.put((Object)"BILIRUBINABSENT", (Object)"176,2");
            labelDispCoordinateCollection.put((Object)"URINEDARK", (Object)"177,1");
            fieldDispCoordinateCollection.put((Object)"URINEDARK", (Object)"177,2");
            labelDispCoordinateCollection.put((Object)"PRURITIS", (Object)"178,1");
            fieldDispCoordinateCollection.put((Object)"PRURITIS", (Object)"178,2");
            labelDispCoordinateCollection.put((Object)"STOMATITIS", (Object)"179,1");
            fieldDispCoordinateCollection.put((Object)"STOMATITIS", (Object)"179,2");
            labelDispCoordinateCollection.put((Object)"GLOSSITIS", (Object)"180,1");
            fieldDispCoordinateCollection.put((Object)"GLOSSITIS", (Object)"180,2");
            labelDispCoordinateCollection.put((Object)"FLATULENCEEXCESSIVE", (Object)"181,1");
            fieldDispCoordinateCollection.put((Object)"FLATULENCEEXCESSIVE", (Object)"181,2");
            labelDispCoordinateCollection.put((Object)"ECZEMA", (Object)"182,1");
            fieldDispCoordinateCollection.put((Object)"ECZEMA", (Object)"182,2");
            labelDispCoordinateCollection.put((Object)"SINGULTUS", (Object)"183,1");
            fieldDispCoordinateCollection.put((Object)"SINGULTUS", (Object)"183,2");
            labelDispCoordinateCollection.put((Object)"POLYDIPSIA", (Object)"184,1");
            fieldDispCoordinateCollection.put((Object)"POLYDIPSIA", (Object)"184,2");
            labelDispCoordinateCollection.put((Object)"POLYURIA", (Object)"185,1");
            fieldDispCoordinateCollection.put((Object)"POLYURIA", (Object)"185,2");
            labelDispCoordinateCollection.put((Object)"ERECTILEDYS", (Object)"186,1");
            fieldDispCoordinateCollection.put((Object)"ERECTILEDYS", (Object)"186,2");
            labelDispCoordinateCollection.put((Object)"HAEMATEMESIS", (Object)"187,1");
            fieldDispCoordinateCollection.put((Object)"HAEMATEMESIS", (Object)"187,2");
            labelDispCoordinateCollection.put((Object)"FREQUENTINFECT", (Object)"189,1");
            fieldDispCoordinateCollection.put((Object)"FREQUENTINFECT", (Object)"189,2");
            labelDispCoordinateCollection.put((Object)"SLOWHEAL", (Object)"190,1");
            fieldDispCoordinateCollection.put((Object)"SLOWHEAL", (Object)"190,2");
           

            labelByTableCollection.put((Object)"SYSTEMIC_PANCREAS",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_PANCREAS",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"SYSTEMIC_GONADS_NUMBER", (Object)"191,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEMIC_GONADS_NUMBER", (Object)"191,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"192,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"192,2");
            labelDispCoordinateCollection.put((Object)"CRYPTORCHISM", (Object)"193,1");
            fieldDispCoordinateCollection.put((Object)"CRYPTORCHISM", (Object)"193,2");
            labelDispCoordinateCollection.put((Object)"DECREASEDBODYHAIR", (Object)"194,1");
            fieldDispCoordinateCollection.put((Object)"DECREASEDBODYHAIR", (Object)"194,2");
            labelDispCoordinateCollection.put((Object)"GYNAECOMASTIA", (Object)"195,1");
            fieldDispCoordinateCollection.put((Object)"GYNAECOMASTIA", (Object)"195,2");
            labelDispCoordinateCollection.put((Object)"INFERTILITY", (Object)"196,1");
            fieldDispCoordinateCollection.put((Object)"INFERTILITY", (Object)"196,2");
            labelDispCoordinateCollection.put((Object)"MICROSOMIA", (Object)"197,1");
            fieldDispCoordinateCollection.put((Object)"MICROSOMIA", (Object)"197,2");
            labelDispCoordinateCollection.put((Object)"MENOLIPSIS", (Object)"198,1");
            fieldDispCoordinateCollection.put((Object)"MENOLIPSIS", (Object)"198,2");
            labelDispCoordinateCollection.put((Object)"HYPOMASTIA", (Object)"199,1");
            fieldDispCoordinateCollection.put((Object)"HYPOMASTIA", (Object)"199,2");
            labelDispCoordinateCollection.put((Object)"AMYOTROPHIC", (Object)"200,1");
            fieldDispCoordinateCollection.put((Object)"AMYOTROPHIC", (Object)"200,2");
            labelDispCoordinateCollection.put((Object)"LIBIDODECREASED", (Object)"201,1");
            fieldDispCoordinateCollection.put((Object)"LIBIDODECREASED", (Object)"201,2");
            labelDispCoordinateCollection.put((Object)"HOTFLUSHES", (Object)"202,1");
            fieldDispCoordinateCollection.put((Object)"HOTFLUSHES", (Object)"202,2");
            labelDispCoordinateCollection.put((Object)"HEADACHES", (Object)"203,1");
            fieldDispCoordinateCollection.put((Object)"HEADACHES", (Object)"203,2");
            labelDispCoordinateCollection.put((Object)"AMAUROSIS", (Object)"204,1");
            fieldDispCoordinateCollection.put((Object)"AMAUROSIS", (Object)"204,2");

            labelByTableCollection.put((Object)"SYSTEMIC_GONADS",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SYSTEMIC_GONADS",(Object)fieldDispCoordinateCollection.clone());
            
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPreviousMedicalHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PREVIOUS_MEDICAL_HISTORY_NUMBER) FROM PREVIOUS_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_MEDICAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_MEDICAL_HISTORY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_MEDICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"Previous Medical History");
            tableAliases.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)patientName);

            groupName = new String("Patient Previous Medical History Data Capture");
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"GROUP");
            
            lookupTableDataCollection = new HashMap(3);

            dataSourceTable  = "DISEASES";
            dataSourceField = "DISEASE_NAME";
            

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);
            
            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"DISEASES");
            symptomList.add(1,(Object)"DISEASE_NAME");
            symptomList.add(2,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"DISEASE_SYNONYMS");
            symptomList.add(4,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"DISEASE_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Diseases",(Object)symptomList.clone());
            
            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"DISEASE_SEQUENCE_NUMBER");

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Resolved");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            updateFieldNameChange = new HashMap(1);
            updateFieldNameChange.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE",(Object)"SYSTEM_CATEGORY_CODE");
            
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES","SYSTEM_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            
            updateButtonEvent =  MenuStateMachine.previous_medical_history_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_DISEASE");

            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)dependantItemList);
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_DISEASE", (Object)"OTHER");

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PREVIOUS_MEDICAL_HISTORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_MEDICAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_MEDICAL_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            //lookupTableCrossLinks = new HashMap(2);
            
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_SEQUENCE_NUMBER");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_ICD_CODE",(Object)crossLinkList.clone());
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_ICD_CODE");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayMedicalHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaymedicalhistory.xml";
            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            sqlQuery = "SELECT PREVIOUS_MEDICAL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PREVIOUS_MEDICAL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PREVIOUS_MEDICAL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_MEDICAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PREVIOUS_MEDICAL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_MEDICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"Medical History Data");
            tableAliases.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(4);
            

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Medical History Report on " + strDateTime + " for: ");

            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);
            
            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            tableRowDisplayHeightCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY_NUMBER", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY_NUMBER", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"10,2");


            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPreviousSurgicalHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PREVIOUS_SURGICAL_HISTORY_NUMBER) FROM PREVIOUS_SURGICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_SURGICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_SURGICAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_SURGICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_SURGICAL_HISTORY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_SURGICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"Previous Surgical History");
            tableAliases.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)patientName);

            groupName = new String("Patient Previous Medical History Data Capture");
            
            lookupTableDataCollection = new HashMap(3);
            
            dataSourceTable  = "SURGERY";
            dataSourceField = "SURGERY_NAME";

            sqlQuery = "SELECT SURGERY_SEQUENCE_NUMBER, SURGERY_NAME FROM SURGERY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"SURGERY");
            symptomList.add(1,(Object)"SURGERY_NAME");
            symptomList.add(2,(Object)"SURGERY_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"SURGERY_SYNONYMS");
            symptomList.add(4,(Object)"SURGERY_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"SURGERY_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Surgery",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"SURGERY_SEQUENCE_NUMBER");
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Resolved");
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS_CODE", (Object)"Days");
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SURGERY_CATEGORY_DESCRIPTION FROM SURGERY_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SURGERY_SEQUENCE_NUMBER, SURGERY_NAME FROM SURGERY";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"SURGERY","SURGERY_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)groupedTableData);

            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"GROUP");
            
            updateButtonEvent =  MenuStateMachine.previous_surgical_history_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"SURGERY_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_SURGERY");

            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)dependantItemList);
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_SURGERY", (Object)"OTHER");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PREVIOUS_SURGICAL_HISTORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_SURGICAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_SURGICAL_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            //lookupTableCrossLinks = new HashMap(2);
            
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_SEQUENCE_NUMBER");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_ICD_CODE",(Object)crossLinkList.clone());
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_ICD_CODE");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplaySurgicalHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaysurgicalhistory.xml";
            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            sqlQuery = "SELECT PREVIOUS_SURGICAL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PREVIOUS_SURGICAL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PREVIOUS_SURGICAL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_SURGICAL_HISTORY", userName, password, _theOS);

            Set fieldSet = lstTreatmentCode.keySet();
            Iterator fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PREVIOUS_SURGICAL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_SURGICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"Surgical History Data");
            tableAliases.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(4);
            

            sqlQuery = "SELECT SURGERY_SEQUENCE_NUMBER, SURGERY_NAME FROM SURGERY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SURGERY_CATEGORY_DESCRIPTION FROM SURGERY_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);


            groupLookupTableDataCollection = new HashMap(1);

            //sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            //dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            //groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Medical Surgery Report on " + strDateTime + " for: ");

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            
            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"30");

            labelDispCoordinateCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY_NUMBER", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY_NUMBER", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"OTHER_SURGERY", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_SURGERY", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"10,2");


            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientFamilyHistory(String keyValue, String familyType, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName, strAnatomyEnabled, strFamilyType = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            
            sqlQuery = "SELECT MAX(FAMILY_HISTORY_NUMBER) FROM FAMILY_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FAMILY_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(FAMILY_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            
            sqlQuery = "SELECT FAMILY_TYPE_DESCRIPTION FROM FAMILY_TYPE WHERE FAMILY_TYPE_CODE = " + familyType;
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FAMILY_TYPE", userName, password, _theOS);
            strFamilyType = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "FAMILY_TYPE_DESCRIPTION", "TEXT");
            
            
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FAMILY_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("FAMILY_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("FAMILY_TYPE_CODE", familyType);
            //dbAccessInstance.dataTable.addElement("ANATOMICAL_LOCATION_CODE", "0");
            
            dbAccessCollection.put((Object)"FAMILY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"FAMILY_HISTORY");
            tabSymbols.put((Object)"FAMILY_HISTORY", (Object)"Family Member: " + strFamilyType);
            tableAliases.put((Object)"FAMILY_HISTORY", (Object)patientName);

            groupName = new String("Patient Family History Data Capture");
            
            theFamilyType = "(" + strFamilyType + ")-";

            
            lookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }

            
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"DISEASES");
            symptomList.add(1,(Object)"DISEASE_NAME");
            symptomList.add(2,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"DISEASE_SYNONYMS");
            symptomList.add(4,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"DISEASE_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Diseases",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"DISEASE_SEQUENCE_NUMBER");
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ALIVE", (Object)"Yes");
            comboBoxDefaultCollection.put((Object)"AGE_AT_DEATH", (Object)"75");
            
            comboBoxActiveStateCollection = new HashMap(1);
            comboBoxActiveStateCollection.put((Object)"ALIVE", (Object)"No");
            
               

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES","SYSTEM_CATEGORY_TYPE");

            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            
            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");

            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"GROUP");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"AGE_AT_DEATH");
            
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"ALIVE", (Object)dependantItemList);
            
            //dependantItemList = new ArrayList(1);
            //dependantItemList.add((Object)"OTHER_DISEASE");
            //dependanceTableLinks = new HashMap(1);
            //dependanceTableLinks.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            //dependanceItemType.put((Object)"OTHER_TREATMENT", (Object)"OTHER");
            dependanceItemType.put((Object)"AGE_AT_DEATH", (Object)"SPINFIELD");


            updateButtonEvent = MenuStateMachine.family_history_update_button_pressed_event;

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(FAMILY_HISTORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(FAMILY_HISTORY_NUMBER)", "INT");
            //strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("FAMILY_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayFamilyHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displayfamilyhistory.xml";
            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT FAMILY_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY FAMILY_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "FAMILY_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FAMILY_HISTORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("FAMILY_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"FAMILY_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"FAMILY_HISTORY");
            tabSymbols.put((Object)"FAMILY_HISTORY", (Object)"Family History Data");
            tableAliases.put((Object)"FAMILY_HISTORY", (Object)"Patient");

            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT FAMILY_TYPE_CODE, FAMILY_TYPE_DESCRIPTION FROM FAMILY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FAMILY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FAMILY_TYPE_CODE", (Object)lookupTableData);
           
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);

            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Family History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(15);
            fieldByTableCollection = new HashMap(15);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(3);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            comboBoxDefaultCollection.put((Object)"AGE_AT_DEATH", (Object)"0");

            tableRowDisplayHeightCollection.put((Object)"FAMILY_HISTORY", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"FAMILY_TYPE_CODE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"FAMILY_TYPE_CODE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"FAMILY_HISTORY_NUMBER", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"FAMILY_HISTORY_NUMBER", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"ALIVE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"ALIVE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"AGE_AT_DEATH", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"AGE_AT_DEATH", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"9,2");
            labelByTableCollection.put((Object)"FAMILY_HISTORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"FAMILY_HISTORY",(Object)fieldDispCoordinateCollection.clone());

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPatientSocialHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;
            xmlFileName = "displaysocialhistory.xml";

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(SOCIAL_HISTORY_NUMBER) FROM SOCIAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SOCIAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SOCIAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SOCIAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SOCIAL_HISTORY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"SOCIAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SOCIAL_HISTORY");
            tabSymbols.put((Object)"SOCIAL_HISTORY", (Object)"Social History");
            tableAliases.put((Object)"SOCIAL_HISTORY", (Object)patientName);

            groupName = new String("Patient Social History Data Capture");

            updateButtonEvent = MenuStateMachine.social_history_update_button_pressed_event;

            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT GEOGRAPHICAL_REGION_CODE, GEOGRAPHICAL_REGION_DESCRIPTION FROM GEOGRAPHICAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GEOGRAPHICAL_REGION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HABITUAL_DRUG_CODE, HABITUAL_DRUG_DESCRIPTION FROM HABITUAL_DRUG";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HABITUAL_DRUG_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PLACE_LIST_CODE, PLACE_NAME FROM PLACE_LIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLACE_LIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"PLACE_LIST_CODE", (Object)lookupTableData);

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"PLACE_LIST_CODE", (Object)"PLACE_LIST_CODE");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT GEOGRAPHICAL_REGION_CODE, GEOGRAPHICAL_REGION_DESCRIPTION FROM GEOGRAPHICAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GEOGRAPHICAL_REGION", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT PLACE_LIST_CODE, PLACE_NAME FROM PLACE_LIST";
            groupField = "GEOGRAPHICAL_REGION_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLACE_LIST", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"PLACE_LIST","GEOGRAPHICAL_REGION");
            groupedTableDataCollection.put((Object)"PLACE_LIST_CODE", (Object)groupedTableData);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"PLACE_LIST_CODE", (Object)"GROUP");

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)"PLACE_LIST_CODE");
            
            dependanceTableLinks = new HashMap(2);
            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"PACK_YEARS");
            dependanceTableLinks.put((Object)"SMOKING", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"DRINK_UNITS");
            dependanceTableLinks.put((Object)"DRINKING", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(2);
            dependanceItemType.put((Object)"PACK_YEARS", (Object)"SPINFIELD");
            dependanceItemType.put((Object)"DRINK_UNITS", (Object)"SPINFIELD");

            comboBoxInactiveStateCollection = new HashMap(2);
            comboBoxInactiveStateCollection.put((Object)"SMOKING", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"DRINKING", (Object)"No");

            comboBoxDefaultCollection = new HashMap(3);
            comboBoxDefaultCollection.put((Object)"PACK_YEARS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"DRINK_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"HABITUAL_DRUG_CODE", (Object)"None");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(SOCIAL_HISTORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(SOCIAL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("SOCIAL_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            
            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplaySocialHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaysocialhistory.xml";
            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT SOCIAL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY SOCIAL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "SOCIAL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SOCIAL_HISTORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("SOCIAL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"SOCIAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"SOCIAL_HISTORY");
            tabSymbols.put((Object)"SOCIAL_HISTORY", (Object)"Social History Data");
            tableAliases.put((Object)"SOCIAL_HISTORY", (Object)"Patient");

            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT GEOGRAPHICAL_REGION_CODE, GEOGRAPHICAL_REGION_DESCRIPTION FROM GEOGRAPHICAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GEOGRAPHICAL_REGION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HABITUAL_DRUG_CODE, HABITUAL_DRUG_DESCRIPTION FROM HABITUAL_DRUG";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HABITUAL_DRUG", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HABITUAL_DRUG_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PLACE_LIST_CODE, PLACE_NAME FROM PLACE_LIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLACE_LIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"PLACE_LIST_CODE", (Object)lookupTableData);
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Social History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            
            comboBoxDefaultCollection.put((Object)"PACK_YEARS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"DRINK_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"SMOKING", (Object)"No");
            comboBoxDefaultCollection.put((Object)"CURRENT_SMOKER", (Object)"No");
            comboBoxDefaultCollection.put((Object)"DRINKING", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SOCIAL_DRINKER", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HABITUAL_DRUG_CODE", (Object)"None");
            
            tableRowDisplayHeightCollection.put((Object)"SOCIAL_HISTORY", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"GEOGRAPHICAL_REGION_CODE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,2");            
            labelDispCoordinateCollection.put((Object)"PLACE_LIST_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"PLACE_LIST_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SMOKING", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SMOKING", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_SMOKER", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_SMOKER", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"PACK_YEARS", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"PACK_YEARS", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DRINKING", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DRINKING", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"SOCIAL_DRINKER", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"SOCIAL_DRINKER", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"DRINK_UNITS", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"DRINK_UNITS", (Object)"11,2");
            labelByTableCollection.put((Object)"SOCIAL_HISTORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"SOCIAL_HISTORY",(Object)fieldDispCoordinateCollection.clone());

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayOccupationHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displayoccupationhistory.xml";
            setTableCount(2);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT CURRENT_OCCUPATION_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY CURRENT_OCCUPATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "CURRENT_OCCUPATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_OCCUPATION", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("CURRENT_OCCUPATION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"CURRENT_OCCUPATION",(Object)dbAccessInstance);
            tableNames.add((Object)"CURRENT_OCCUPATION");
            tabSymbols.put((Object)"CURRENT_OCCUPATION", (Object)"Current Occupation Data");
            tableAliases.put((Object)"CURRENT_OCCUPATION", (Object)"Patient");

            //Table 2
            sqlQuery = "SELECT PREVIOUS_OCCUPATION_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PREVIOUS_OCCUPATION_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PREVIOUS_OCCUPATION_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_OCCUPATION", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PREVIOUS_OCCUPATION_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PREVIOUS_OCCUPATION",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_OCCUPATION");
            tabSymbols.put((Object)"PREVIOUS_OCCUPATION", (Object)"Previous Occupation Data");
            tableAliases.put((Object)"PREVIOUS_OCCUPATION", (Object)"Patient");

            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Occupation History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"CURRENT_OCCUPATION", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"PREVIOUS_OCCUPATION", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"CURRENT_OCCUPATION_NUMBER", (Object)"2,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_OCCUPATION_NUMBER", (Object)"2,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_OCCUPATION_NAME", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_OCCUPATION_NAME", (Object)"4,2");
            labelByTableCollection.put((Object)"CURRENT_OCCUPATION",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"CURRENT_OCCUPATION",(Object)fieldDispCoordinateCollection.clone());

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_NUMBER", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_NUMBER", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_NAME", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_NAME", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_DATE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_OCCUPATION_DATE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"10,1");
            labelByTableCollection.put((Object)"PREVIOUS_OCCUPATION",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PREVIOUS_OCCUPATION",(Object)fieldDispCoordinateCollection.clone());
            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddCurrentOccupationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(CURRENT_OCCUPATION_NUMBER) FROM CURRENT_OCCUPATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_OCCUPATION", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CURRENT_OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_OCCUPATION", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CURRENT_OCCUPATION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"CURRENT_OCCUPATION",(Object)dbAccessInstance);
            tableNames.add((Object)"CURRENT_OCCUPATION");
            tabSymbols.put((Object)"CURRENT_OCCUPATION", (Object)"Current Occupation");
            tableAliases.put((Object)"CURRENT_OCCUPATION", (Object)patientName);

            groupName = new String("Patient Current Occupation Data Capture");

            theOccupationType = "(Current)-";

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"CURRENT_OCCUPATION_NAME", (Object)"CURRENT_OCCUPATION_NAME");
            
            updateButtonEvent = MenuStateMachine.occupational_history_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(CURRENT_OCCUPATION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(CURRENT_OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("CURRENT_OCCUPATION_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddPreviousOccupationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PREVIOUS_OCCUPATION_NUMBER) FROM PREVIOUS_OCCUPATION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_OCCUPATION", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_OCCUPATION", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_OCCUPATION_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PREVIOUS_OCCUPATION",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_OCCUPATION");
            tabSymbols.put((Object)"PREVIOUS_OCCUPATION", (Object)"Previous Occupation");
            tableAliases.put((Object)"PREVIOUS_OCCUPATION", (Object)patientName);

            groupName = new String("Patient Previous Occupation Data Capture");

            updateButtonEvent = MenuStateMachine.occupational_history_update_button_pressed_event;

            theOccupationType = "(Previous)-";

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"PREVIOUS_OCCUPATION_NAME", (Object)"PREVIOUS_OCCUPATION_NAME");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PREVIOUS_OCCUPATION_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PREVIOUS_OCCUPATION_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PREVIOUS_OCCUPATION_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PATIENT_TREATMENT_NUMBER) FROM PATIENT_TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TREATMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TREATMENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_TREATMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_TREATMENT");
            tabSymbols.put((Object)"PATIENT_TREATMENT", (Object)"Patient Treatment");
            tableAliases.put((Object)"PATIENT_TREATMENT", (Object)patientName);

            groupName = new String("Patient Treatment Data Capture");

            lookupTableDataCollection = new HashMap(3);
            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
 
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"TREATMENT");
            symptomList.add(1,(Object)"TREATMENT_NAME");
            symptomList.add(2,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"TREATMENT_SYNONYMS");
            symptomList.add(4,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"TREATMENT_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Treatment",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"TREATMENT_SEQUENCE_NUMBER");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            groupField = "TREATMENT_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"TREATMENT","TREATMENT_CATEGORY");
            
            dataSourceTable  = "TREATMENT";
            dataSourceField = "TREATMENT_NAME";
            
            groupedTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)groupedTableData);
            

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"TREATMENT_CATEGORY_CODE", (Object)"TREATMENT_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_TREATMENT");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_TREATMENT", (Object)"OTHER");
            
            updateButtonEvent = MenuStateMachine.treatment_update_button_pressed_event;
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"Milligram");
            comboBoxDefaultCollection.put((Object)"TIME_UNITS_CODE", (Object)"Daily");
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"LOOKUP");

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PATIENT_TREATMENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_TREATMENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayTreatmentHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;

            xmlFileName = "displaytreatmenthistory.xml";

            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT PATIENT_TREATMENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PATIENT_TREATMENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PATIENT_TREATMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TREATMENT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PATIENT_TREATMENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_TREATMENT");
            tabSymbols.put((Object)"PATIENT_TREATMENT", (Object)"Treatment History Data");
            tableAliases.put((Object)"PATIENT_TREATMENT", (Object)"Patient");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
 
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)lookupTableData);
            
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Treatment History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            
            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_TREATMENT", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PATIENT_TREATMENT_NUMBER", (Object)"2,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_TREATMENT_NUMBER", (Object)"2,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DATE_STARTED", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DATE_STARTED", (Object)"9,2");
            labelByTableCollection.put((Object)"PATIENT_TREATMENT",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PATIENT_TREATMENT",(Object)fieldDispCoordinateCollection.clone());
           
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddAllergyHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PATIENT_ALLERGIES_NUMBER) FROM PATIENT_ALLERGIES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_ALLERGIES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_ALLERGIES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_ALLERGIES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_ALLERGIES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_ALLERGIES",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_ALLERGIES");
            tabSymbols.put((Object)"PATIENT_ALLERGIES", (Object)"Allergy History");
            tableAliases.put((Object)"PATIENT_ALLERGIES", (Object)patientName);

            groupName = new String("Patient Allergy History Data Capture");
            
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ALLERGY_SEQUENCE_NUMBER, ALLERGY_NAME FROM ALLERGY WHERE ALLERGY_CATEGORY_CODE = 2";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"ENVIRONMENT_ALLERGY_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT ALLERGY_SEQUENCE_NUMBER, ALLERGY_NAME FROM ALLERGY WHERE ALLERGY_CATEGORY_CODE = 3";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"FOOD_ALLERGY_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(3);
            comboBoxDefaultCollection.put((Object)"FOOD_ALLERGY_SEQUENCE_NUMBER", (Object)"None");
            comboBoxDefaultCollection.put((Object)"ENVIRONMENT_ALLERGY_SEQUENCE_NUMBER", (Object)"None");
            comboBoxDefaultCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"None");
            

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"TREATMENT_SEQUENCE_NUMBER");

            groupLookupTableDataCollection = new HashMap(1);

            
            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)groupLookupTableData);

            groupedTableDataCollection = new HashMap(1);

            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            groupField = "TREATMENT_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"TREATMENT","TREATMENT_CATEGORY");
            groupedTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)groupedTableData.clone());

            updateButtonEvent =  MenuStateMachine.allergies_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"TREATMENT_CATEGORY_CODE", (Object)"TREATMENT_SEQUENCE_NUMBER");

            //dependanceTableLinks = new HashMap(1);
            //dependanceTableLinks.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"OTHER_SURGERY");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PATIENT_ALLERGIES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_ALLERGIES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_ALLERGIES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            //lookupTableCrossLinks = new HashMap(2);
            
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_SEQUENCE_NUMBER");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_ICD_CODE",(Object)crossLinkList.clone());
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_ICD_CODE");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayAllergyHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            setTableCount(1);
            xmlFileName = "displayallergyhistory.xml";
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT PATIENT_ALLERGIES_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PATIENT_ALLERGIES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PATIENT_ALLERGIES_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_ALLERGIES", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PATIENT_ALLERGIES_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_ALLERGIES",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_ALLERGIES");
            tabSymbols.put((Object)"PATIENT_ALLERGIES", (Object)"Allergy History Data");
            tableAliases.put((Object)"PATIENT_ALLERGIES", (Object)"Patient");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT ALLERGY_SEQUENCE_NUMBER, ALLERGY_NAME FROM ALLERGY WHERE ALLERGY_CATEGORY_CODE = 2";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db

            lookupTableDataCollection.put((Object)"ENVIRONMENT_ALLERGY_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT ALLERGY_SEQUENCE_NUMBER, ALLERGY_NAME FROM ALLERGY WHERE ALLERGY_CATEGORY_CODE = 3";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ALLERGY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"FOOD_ALLERGY_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(3);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");
            comboBoxDefaultCollection.put((Object)"FOOD_ALLERGY_SEQUENCE_NUMBER", (Object)"None");
            comboBoxDefaultCollection.put((Object)"ENVIRONMENT_ALLERGY_SEQUENCE_NUMBER", (Object)"None");
            comboBoxDefaultCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"None");
            comboBoxDefaultCollection.put((Object)"OTHER_ALLERGY", (Object)"null");
            comboBoxDefaultCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)"Alcoholism");

            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Allergy History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_ALLERGIES", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PATIENT_ALLERGIES_NUMBER", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_ALLERGIES_NUMBER", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_CATEGORY_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_CATEGORY_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"ALLERGY_SEQUENCE_NUMBER", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"ALLERGY_SEQUENCE_NUMBER", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"OTHER_ALLERGY", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_ALLERGY", (Object)"7,2");
            labelByTableCollection.put((Object)"PATIENT_ALLERGIES",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PATIENT_ALLERGIES",(Object)fieldDispCoordinateCollection.clone());
           
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddTravelHistory(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PATIENT_TRAVEL_HISTORY_NUMBER) FROM PATIENT_TRAVEL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TRAVEL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_TRAVEL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TRAVEL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_TRAVEL_HISTORY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PATIENT_TRAVEL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_TRAVEL_HISTORY");
            tabSymbols.put((Object)"PATIENT_TRAVEL_HISTORY", (Object)"Travel History");
            tableAliases.put((Object)"PATIENT_TRAVEL_HISTORY", (Object)patientName);

            groupName = new String("Patient Travel History Data Capture");
           
            lookupTableDataCollection = new HashMap(2);

            sqlQuery = "SELECT INTERNATIONAL_REGION_CODE, INTERNATIONAL_REGION_DESCRIPTION FROM INTERNATIONAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INTERNATIONAL_REGION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INTERNATIONAL_REGION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT COUNTRY_CODE, COUNTRY_NAME FROM COUNTRY_LIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "COUNTRY_LIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"COUNTRY_CODE", (Object)lookupTableData);

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"COUNTRY_CODE", (Object)"COUNTRY_CODE");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT INTERNATIONAL_REGION_CODE, INTERNATIONAL_REGION_DESCRIPTION FROM INTERNATIONAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INTERNATIONAL_REGION", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"INTERNATIONAL_REGION_CODE", (Object)groupLookupTableData);
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"COUNTRY_CODE", (Object)"GROUP");
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT COUNTRY_CODE, COUNTRY_NAME FROM COUNTRY_LIST";
            groupField = "INTERNATIONAL_REGION_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "COUNTRY_LIST", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"COUNTRY_LIST","INTERNATIONAL_REGION");
            groupedTableDataCollection.put((Object)"COUNTRY_CODE", (Object)groupedTableData);
            
            updateButtonEvent =  MenuStateMachine.travel_history_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"INTERNATIONAL_REGION_CODE", (Object)"COUNTRY_CODE");

            //dependanceTableLinks = new HashMap(1);
            //dependanceTableLinks.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"OTHER_SURGERY");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PATIENT_TRAVEL_HISTORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PATIENT_TRAVEL_HISTORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PATIENT_TRAVEL_HISTORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            //lookupTableCrossLinks = new HashMap(2);
            
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_SEQUENCE_NUMBER");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_ICD_CODE",(Object)crossLinkList.clone());
            //crossLinkList = new  ArrayList(1);
            //crossLinkList.add((Object)"SYMPTOM_ICD_CODE");
            //lookupTableCrossLinks.put((Object)"SYMPTOM_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayTravelHistoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaytravelhistory.xml";
            setTableCount(1);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT PATIENT_TRAVEL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PATIENT_TRAVEL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PATIENT_TRAVEL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TRAVEL_HISTORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PATIENT_TRAVEL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_TRAVEL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_TRAVEL_HISTORY");
            tabSymbols.put((Object)"PATIENT_TRAVEL_HISTORY", (Object)"Travel History Data");
            tableAliases.put((Object)"PATIENT_TRAVEL_HISTORY", (Object)"Patient");

            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT INTERNATIONAL_REGION_CODE, INTERNATIONAL_REGION_DESCRIPTION FROM INTERNATIONAL_REGION";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INTERNATIONAL_REGION", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INTERNATIONAL_REGION_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT COUNTRY_CODE, COUNTRY_NAME FROM COUNTRY_LIST";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "COUNTRY_LIST", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"COUNTRY_CODE", (Object)lookupTableData);
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Travel History Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_TRAVEL_HISTORY", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PATIENT_TRAVEL_HISTORY_NUMBER", (Object)"2,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_TRAVEL_HISTORY_NUMBER", (Object)"2,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,2");            
            labelDispCoordinateCollection.put((Object)"INTERNATIONAL_REGION_CODE", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"INTERNATIONAL_REGION_CODE", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"COUNTRY_CODE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"COUNTRY_CODE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"STAY_DURATION", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"STAY_DURATION", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"DATE_LEFT", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"DATE_LEFT", (Object)"7,2");
            labelByTableCollection.put((Object)"PATIENT_TRAVEL_HISTORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PATIENT_TRAVEL_HISTORY",(Object)fieldDispCoordinateCollection.clone());

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamGeneralModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_GENERAL_NUMBER) FROM EXAMINATION_GENERAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_GENERAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_GENERAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_GENERAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_GENERAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_GENERAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_GENERAL");
            tabSymbols.put((Object)"EXAMINATION_GENERAL", (Object)"Examination General");
            tableAliases.put((Object)"EXAMINATION_GENERAL", (Object)patientName);

            groupName = new String("Patient General Examination Data Capture");
            
            examinationType = "General-"; 

            lookupTableDataCollection = new HashMap(1);
            
            sqlQuery = "SELECT HYDRATION_TYPE_CODE, HYDRATION_TYPE_DESCRIPTION FROM HYDRATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HYDRATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HYDRATION_TYPE_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"HYDRATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"TEMPERATURE", (Object)"36.5");
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_GENERAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_GENERAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_GENERAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamCardiovascularModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_CARDIOVASCULAR_NUMBER) FROM EXAMINATION_CARDIOVASCULAR";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CARDIOVASCULAR", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_CARDIOVASCULAR_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CARDIOVASCULAR", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_CARDIOVASCULAR_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_CARDIOVASCULAR",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_CARDIOVASCULAR");
            tabSymbols.put((Object)"EXAMINATION_CARDIOVASCULAR", (Object)"Examination Cardiovascular");
            tableAliases.put((Object)"EXAMINATION_CARDIOVASCULAR", (Object)patientName);

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"SYSTOLIC_LOCATION_TYPE_CODE");
            dependanceTableLinks = new HashMap(2);
            dependanceTableLinks.put((Object)"SYSTOLIC_MURMURS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"DIASTOLIC_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"DIASTOLIC_MURMURS_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(2);
            dependanceItemType.put((Object)"SYSTOLIC_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"DIASTOLIC_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");

            examinationType = "Cardiovascular-"; 

            comboBoxInactiveStateCollection = new HashMap(2);
            comboBoxInactiveStateCollection.put((Object)"SYSTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            comboBoxInactiveStateCollection.put((Object)"DIASTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            
            
            groupName = new String("Patient Cardiovascular Examination Data Capture");

            lookupTableDataCollection = new HashMap(15);
            
            sqlQuery = "SELECT PULSE_CHARACTER_TYPE_CODE, PULSE_CHARACTER_TYPE_DESCRIPTION FROM PULSE_CHARACTER_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PULSE_CHARACTER_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PULSE_CHARACTER_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT JUGULAR_PULSE_TYPE_CODE, JUGULAR_PULSE_TYPE_DESCRIPTION FROM JUGULAR_PULSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "JUGULAR_PULSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"JUGULAR_PULSE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEART_SOUNDS_S1_CODE, HEART_SOUNDS_S1_TYPE_DESCRIPTION FROM HEART_SOUNDS_S1_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEART_SOUNDS_S1_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEART_SOUNDS_S1_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEART_SOUNDS_S2_CODE, HEART_SOUNDS_S2_TYPE_DESCRIPTION FROM HEART_SOUNDS_S2_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEART_SOUNDS_S2_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEART_SOUNDS_S2_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEART_SOUNDS_S3_CODE, HEART_SOUNDS_S3_TYPE_DESCRIPTION FROM HEART_SOUNDS_S3_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEART_SOUNDS_S3_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEART_SOUNDS_S3_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEART_SOUNDS_S4_CODE, HEART_SOUNDS_S4_TYPE_DESCRIPTION FROM HEART_SOUNDS_S4_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEART_SOUNDS_S4_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEART_SOUNDS_S4_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYSTOLIC_MURMURS_TYPE_CODE, SYSTOLIC_MURMURS_TYPE_DESCRIPTION FROM SYSTOLIC_MURMURS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTOLIC_MURMURS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTOLIC_MURMURS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYSTOLIC_LOCATION_TYPE_CODE, SYSTOLIC_LOCATION_TYPE_DESCRIPTION FROM SYSTOLIC_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTOLIC_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTOLIC_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DIASTOLIC_MURMURS_TYPE_CODE, DIASTOLIC_MURMURS_TYPE_DESCRIPTION FROM DIASTOLIC_MURMURS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIASTOLIC_MURMURS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIASTOLIC_MURMURS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DIASTOLIC_LOCATION_TYPE_CODE, DIASTOLIC_LOCATION_TYPE_DESCRIPTION FROM DIASTOLIC_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIASTOLIC_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIASTOLIC_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT APEX_BEAT_TYPE_CODE, APEX_BEAT_TYPE_DESCRIPTION FROM APEX_BEAT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "APEX_BEAT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"APEX_BEAT_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT RIGHT_VENTRICULAR_HEAVE_CODE, RIGHT_VENTRICULAR_HEAVE_DESCRIPTION FROM RIGHT_VENTRICULAR_HEAVE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_VENTRICULAR_HEAVE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_VENTRICULAR_HEAVE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PERIPHERAL_PULSES_LOCATION_TYPE_CODE, PERIPHERAL_PULSES_LOCATION_TYPE_DESCRIPTION FROM PERIPHERAL_PULSES_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PERIPHERAL_PULSES_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PERIPHERAL_PULSES_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(16);
            comboBoxDefaultCollection.put((Object)"PULSE_CHARACTER_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"JUGULAR_PULSE_TYPE_CODE", (Object)"A-Waves Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S1_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S2_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S3_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S4_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SYSTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SYSTOLIC_LOCATION_TYPE_CODE", (Object)"Aortic");
            comboBoxDefaultCollection.put((Object)"DIASTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"DIASTOLIC_LOCATION_TYPE_CODE", (Object)"Aortic");
            comboBoxDefaultCollection.put((Object)"APEX_BEAT_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_VENTRICULAR_HEAVE_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"PERIPHERAL_PULSES_LOCATION_TYPE_CODE", (Object)"Aortic");
            comboBoxDefaultCollection.put((Object)"PULSE_RATE", (Object)"60");
            comboBoxDefaultCollection.put((Object)"BLOOD_PRESSURE_SYSTOLIC", (Object)"120");
            comboBoxDefaultCollection.put((Object)"BLOOD_PRESSURE_DIASTOLIC", (Object)"80");
            
            
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_CARDIOVASCULAR_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_CARDIOVASCULAR_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_CARDIOVASCULAR_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    public void initDisplayPatientExaminationModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displayexamination.xml";
            setTableCount(17);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT EXAMINATION_GENERAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_GENERAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_GENERAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");


            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_GENERAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_GENERAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_GENERAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_GENERAL");
            tabSymbols.put((Object)"EXAMINATION_GENERAL", (Object)"General Examination Data");
            tableAliases.put((Object)"EXAMINATION_GENERAL", (Object)"Patient");
            
            //Table 2
            sqlQuery = "SELECT EXAMINATION_CARDIOVASCULAR_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_CARDIOVASCULAR_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_CARDIOVASCULAR_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CARDIOVASCULAR", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_CARDIOVASCULAR_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_CARDIOVASCULAR",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_CARDIOVASCULAR");
            tabSymbols.put((Object)"EXAMINATION_CARDIOVASCULAR", (Object)"Cardiovascular Examination Data");
            tableAliases.put((Object)"EXAMINATION_CARDIOVASCULAR", (Object)"Patient");
            
            //Table 3
            sqlQuery = "SELECT EXAMINATION_RESPIRATORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_RESPIRATORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_RESPIRATORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_RESPIRATORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_RESPIRATORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_RESPIRATORY",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_RESPIRATORY");
            tabSymbols.put((Object)"EXAMINATION_RESPIRATORY", (Object)"Respiratory Data");
            tableAliases.put((Object)"EXAMINATION_RESPIRATORY", (Object)"Patient");

            //Table 4
            sqlQuery = "SELECT EXAMINATION_ABDOMINAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ABDOMINAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ABDOMINAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ABDOMINAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ABDOMINAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ABDOMINAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ABDOMINAL");
            tabSymbols.put((Object)"EXAMINATION_ABDOMINAL", (Object)"Abdominal Data");
            tableAliases.put((Object)"EXAMINATION_ABDOMINAL", (Object)"Patient");
            
             //Table 5
            sqlQuery = "SELECT EXAMINATION_MUSCULOSKELETAL_NUM, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_MUSCULOSKELETAL_NUM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_MUSCULOSKELETAL_NUM", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_MUSCULOSKELETAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_MUSCULOSKELETAL_NUM",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_MUSCULOSKELETAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_MUSCULOSKELETAL");
            tabSymbols.put((Object)"EXAMINATION_MUSCULOSKELETAL", (Object)"Musculoskeletal Examination Data");
            tableAliases.put((Object)"EXAMINATION_MUSCULOSKELETAL", (Object)"Patient");
            
             //Table 6
            sqlQuery = "SELECT EXAMINATION_CNS_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_CNS_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_CNS_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CENTRAL_NERVOUS_SYSTEM", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_CNS_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM");
            tabSymbols.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM", (Object)"Central Nervous System Examination Data");
            tableAliases.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM", (Object)"Patient");

             //Table 7
            sqlQuery = "SELECT EXAMINATION_ENT_EAR_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ENT_EAR_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ENT_EAR_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_EAR", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ENT_EAR_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ENT_EAR",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_EAR");
            tabSymbols.put((Object)"EXAMINATION_ENT_EAR", (Object)"ENT-Ear Examination Data");
            tableAliases.put((Object)"EXAMINATION_ENT_EAR", (Object)"Patient");
            
             //Table 8
            sqlQuery = "SELECT EXAMINATION_ENT_NOSE_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ENT_NOSE_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ENT_NOSE_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_NOSE", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ENT_NOSE_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ENT_NOSE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_NOSE");
            tabSymbols.put((Object)"EXAMINATION_ENT_NOSE", (Object)"ENT-Nose Examination Data");
            tableAliases.put((Object)"EXAMINATION_ENT_NOSE", (Object)"Patient");

             //Table 9
            sqlQuery = "SELECT EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_PARANASAL_SINUSES", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_PARANASAL_SINUSES");
            tabSymbols.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES", (Object)"ENT-Paranasal Sinuses Examination Data");
            tableAliases.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES", (Object)"Patient");


             //Table 10
            sqlQuery = "SELECT EXAMINATION_ENT_THROAT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ENT_THROAT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ENT_THROAT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_THROAT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ENT_THROAT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ENT_THROAT",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_THROAT");
            tabSymbols.put((Object)"EXAMINATION_ENT_THROAT", (Object)"ENT-Throat Examination Data");
            tableAliases.put((Object)"EXAMINATION_ENT_THROAT", (Object)"Patient");

             //Table 11
            sqlQuery = "SELECT EXAMINATION_DERMATOLOGICAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_DERMATOLOGICAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_DERMATOLOGICAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_DERMATOLOGICAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_DERMATOLOGICAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_DERMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_DERMATOLOGICAL");
            tabSymbols.put((Object)"EXAMINATION_DERMATOLOGICAL", (Object)"ENT-Dermatological Examination Data");
            tableAliases.put((Object)"EXAMINATION_DERMATOLOGICAL", (Object)"Patient");

             //Table 12
            sqlQuery = "SELECT EXAMINATION_HEMATOLOGICAL_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_HEMATOLOGICAL_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_HEMATOLOGICAL_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_HEMATOLOGICAL", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_HEMATOLOGICAL_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_HEMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_HEMATOLOGICAL");
            tabSymbols.put((Object)"EXAMINATION_HEMATOLOGICAL", (Object)"ENT-Hematological Examination Data");
            tableAliases.put((Object)"EXAMINATION_HEMATOLOGICAL", (Object)"Patient");

             //Table 13
            sqlQuery = "SELECT EXAMINATION_EYES_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_EYES_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_EYES_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_EYES", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_EYES_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_EYES",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_EYES");
            tabSymbols.put((Object)"EXAMINATION_EYES", (Object)"ENT-Eyes Examination Data");
            tableAliases.put((Object)"EXAMINATION_EYES", (Object)"Patient");

             //Table 14
            sqlQuery = "SELECT EXAMINATION_UROGENITAL_MALE_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_UROGENITAL_MALE_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_UROGENITAL_MALE_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_MALE", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_UROGENITAL_MALE_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_MALE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_MALE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_MALE", (Object)"Urogenital (Male) Examination Data");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_MALE", (Object)"Patient");

             //Table 15
            sqlQuery = "SELECT EXAMINATION_UROGENITAL_FEMALE_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_UROGENITAL_FEMALE_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_UROGENITAL_FEMALE_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_FEMALE", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_UROGENITAL_FEMALE_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_FEMALE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_FEMALE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_FEMALE", (Object)"Urogenital (Female) Examination Data");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_FEMALE", (Object)"Patient");

             //Table 16
            sqlQuery = "SELECT EXAMINATION_UROGENITAL_URINE_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_UROGENITAL_URINE_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_UROGENITAL_URINE_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_URINE", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_UROGENITAL_URINE_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_URINE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_URINE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_URINE", (Object)"Urogenital (Urine) Examination Data");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_URINE", (Object)"Patient");

             //Table 17
            sqlQuery = "SELECT EXAMINATION_ENDOCRINE_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY EXAMINATION_ENDOCRINE_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "EXAMINATION_ENDOCRINE_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENDOCRINE", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("EXAMINATION_ENDOCRINE_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"EXAMINATION_ENDOCRINE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENDOCRINE");
            tabSymbols.put((Object)"EXAMINATION_ENDOCRINE", (Object)"Endocrine Examination Data");
            tableAliases.put((Object)"EXAMINATION_ENDOCRINE", (Object)"Patient");


            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_TYPES", userName, password, _theOS);
            lookupTableDataCollection = new HashMap(1);
            
            lookupTableDataCollection = dbAccessInstance.getExamLookupData();
            
            //lookup tables
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            
            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Examination report on " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);
            

            tableRowDisplayHeightCollection = new HashMap(18);
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_GENERAL", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_CARDIOVASCULAR", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_RESPIRATORY", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ABDOMINAL", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_MUSCULOSKELETAL", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ENT_EAR", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ENT_NOSE", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ENT_THROAT", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_DERMATOLOGICAL", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_HEMATOLOGICAL", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_ENDOCRINE", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_EYES", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_UROGENITAL_MALE", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_UROGENITAL_FEMALE", (Object)"17");
            tableRowDisplayHeightCollection.put((Object)"EXAMINATION_UROGENITAL_URINE", (Object)"17");

            upperBoundCollection = new HashMap(3);
            lowerBoundCollection = new HashMap(3);
            upperBoundCollection.put((Object)"TEMPERATURE", (Object)"37.5");
            lowerBoundCollection.put((Object)"TEMPERATURE", (Object)"35.5");
            upperBoundCollection.put((Object)"PULSE_RATE", (Object)"120");
            lowerBoundCollection.put((Object)"PULSE_RATE", (Object)"50");
            comboBoxDefaultCollection = new HashMap(160);
            //all notes
            comboBoxDefaultCollection.put((Object)"NOTES", (Object)"Null");

            //general defaults
            comboBoxDefaultCollection.put((Object)"HYDRATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LYMPH_ADENOPATHY", (Object)"No");
            comboBoxDefaultCollection.put((Object)"ACIDOSIS", (Object)"No");
            comboBoxDefaultCollection.put((Object)"EDEMA", (Object)"No");
            comboBoxDefaultCollection.put((Object)"CLUBBING", (Object)"No");
            comboBoxDefaultCollection.put((Object)"CYNOSIS", (Object)"No");
            comboBoxDefaultCollection.put((Object)"ANEMIA", (Object)"No");
            comboBoxDefaultCollection.put((Object)"JAUNDICE", (Object)"No");
            //respiratory defaults
            comboBoxDefaultCollection.put((Object)"RESPIRATORY_DISTRESS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"TRACHEAL_POSITION_TYPE_CODE", (Object)"Central");
            comboBoxDefaultCollection.put((Object)"BREATH_SOUNDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"BREATH_SOUNDS_LOCATION_TYPE_CODE", (Object)"Both Lungs");
            comboBoxDefaultCollection.put((Object)"WHEAZE_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"CREPETATIOUS_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"PERCUSSION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PERCUSSION_LOCATION_TYPE_CODE", (Object)"Both Lungs");
            comboBoxDefaultCollection.put((Object)"HYPER_INFLATION_TYPE_CODE", (Object)"Absent");
            
            //cardiovascular defaults
            comboBoxDefaultCollection.put((Object)"PERIPHERAL_PULSES_PRESENT", (Object)"No");
            comboBoxDefaultCollection.put((Object)"JUGULAR_PULSE_TYPE_CODE", (Object)"A-Waves Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S1_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S2_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S3_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"HEART_SOUNDS_S4_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SYSTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SYSTOLIC_LOCATION_TYPE_CODE", (Object)"Aortic");
            comboBoxDefaultCollection.put((Object)"DIASTOLIC_MURMURS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"DIASTOLIC_LOCATION_TYPE_CODE", (Object)"Aortic");
            comboBoxDefaultCollection.put((Object)"APEX_BEAT_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_VENTRICULAR_HEAVE_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"PERIPHERAL_PULSES_LOCATION_TYPE_CODE", (Object)"Aortic");
            //abdominal defaults
            comboBoxDefaultCollection.put((Object)"PALPITATION_ABDOMINAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PALPITATION_REBOUND_TENDERNESS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SPLENOMAGALY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"HEPATOMEGALY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"MASSES_PALPABLE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MASSES_PALPABLE_LOCATION_TYPE_CODE", (Object)"Epigastrium");
            comboBoxDefaultCollection.put((Object)"OSCULTATION_BELL_SOUNDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RECTAL_EXAMINATION_TYPE_CODE", (Object)"Not Done");
            //musculoskeletal defaults
            comboBoxDefaultCollection.put((Object)"MOVEMENT_ABNORMALITY_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE", (Object)"Neck");
            comboBoxDefaultCollection.put((Object)"CUPSULAR_PATTERN_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"JOINT_SWELLING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"JOINT_SWELLING_LOCATION_TYPE_CODE", (Object)"Left Leg");
            comboBoxDefaultCollection.put((Object)"SUBCUTANEOUS_NODULES_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE", (Object)"Left Leg");
            comboBoxDefaultCollection.put((Object)"MUSCLE_WASTING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MUSCLE_WASTING_LOCATION_TYPE_CODE", (Object)"Left Leg");
            //CNS Defaults
            comboBoxDefaultCollection.put((Object)"LEVEL_OF_CONSCIOUSNESS_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"GCS_EYE_OPENING_TYPE_CODE", (Object)"[4] Spontaneous");
            //comboBoxDefaultCollection.put((Object)"GCS_VERBAL_RESPONSE_TYPE_CODE", (Object)"[5] Oriented");
            //comboBoxDefaultCollection.put((Object)"GCS_BEST_MOTOR_RESPONSE_TYPE_CODE", (Object)"[6] Obeying Command");
            comboBoxDefaultCollection.put((Object)"CNE_EYE_MOVEMENT_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"GAZE_PALSY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"VISUAL_FIELD_DEFECT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"THIRD_FOURTH_SIXTH_NERVE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PUPIL_SIZE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PUPIL_MOBILITY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"FIFTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"FIFTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SEVENTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SEVENTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"EIGHTH_NERVE_HEARING_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"TWELTH_NERVE_TONGUE_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"Left Arm");//fix later
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"Left Arm");//fix later
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"Left Arm");//fix later
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"Left Arm");//fix later
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"Left Foot");//fix later
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"Left Foot");//fix later
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"Left Foot");//fix later
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"Left Foot");//fix later
            comboBoxDefaultCollection.put((Object)"BABINSKY_REFLEX_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"ANAXOMILIA_LOCATION_TYPE_CODE", (Object)"Location 1");
            comboBoxDefaultCollection.put((Object)"INVOLUNTARY_MOVE_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"GAIT", (Object)"null");
            // ent ear defaults
            comboBoxDefaultCollection.put((Object)"LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RINNE_TEST_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"WEBER_TEST_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"NYSTAGMUS_TYPE_CODE", (Object)"Not Tested");
            comboBoxDefaultCollection.put((Object)"LEFT_OTHER_EXTERNAL_AUDITORY_MEATUS", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_OTHER_EXTERNAL_AUDITORY_MEATUS", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_OTHER_TYMPANIC_MEMBRANE", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_OTHER_TYMPANIC_MEMBRANE", (Object)"null");
            //
            //ent nose defaults
            comboBoxDefaultCollection.put((Object)"LEFT_NASAL_PASSAGES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_NASAL_PASSAGES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_NASAL_PASSAGES_NOTES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_NASAL_PASSAGES_NOTES", (Object)"null");
            //ent paranasal sinuses defaults
            comboBoxDefaultCollection.put((Object)"LEFT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_NASAL_PASSAGES_NOTES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_NASAL_PASSAGES_NOTES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_OTHER_FRONTAL_SINUSES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_OTHER_FRONTAL_SINUSES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_OTHER_MAXILLARY_SINUSES", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_OTHER_MAXILLARY_SINUSES", (Object)"null");
            
            //ent throat defaults
            comboBoxDefaultCollection.put((Object)"POST_NASAL_DRIP_TYPE_CODE", (Object)"Not Present");
            comboBoxDefaultCollection.put((Object)"PHARYNGITIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"TONSILS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ORAL_LESIONS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"PHARYNGITIS_OTHER", (Object)"null");
            comboBoxDefaultCollection.put((Object)"TONSILS_OTHER", (Object)"null");
            comboBoxDefaultCollection.put((Object)"ORAL_LESIONS_NOTES", (Object)"null");
            //urogenital urine
            comboBoxDefaultCollection.put((Object)"PROTEIN_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"GLUCOSE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEUKOSYTES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"NITRITES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"BILLIRUBIN_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"KETONES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"BLOOD_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MICROSCOPY_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"PROTEIN_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"GLUCOSE_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEUKOSYTES_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"NITRITES_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"BILLIRUBIN_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"KETONES_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"BLOOD_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"MICROSCOPY_TEXT", (Object)"null");
            
            //urogenital female
            comboBoxDefaultCollection.put((Object)"CERVIX_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UTERUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ADNEXAE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"VAGINA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"INTROITUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PAP_SMEAR_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_BREAST_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_BREAST_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ADNEXAE_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"VAGINA_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"INTROITUS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"PAP_SMEAR_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_BREAST_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_BREAST_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"CERVIX_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"UTERUS_TEXT", (Object)"null");
            //urogenital male
            comboBoxDefaultCollection.put((Object)"LEFT_TESTICAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_TESTICAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PENIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PROSTATE_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"LEFT_TESTICAL_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_TESTICAL_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"PENIS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"PROSTATE_TEXT", (Object)"null");
            
            //eyes
            comboBoxDefaultCollection.put((Object)"LEFT_VISUAL_FIELDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_VISUAL_FIELDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_CORNEA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_CORNEA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_FUNDUSCOPY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_FUNDUSCOPY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_PUPIL_TYPE_CODE", (Object)"Normal Reaction To Light");
            comboBoxDefaultCollection.put((Object)"RIGHT_PUPIL_TYPE_CODE", (Object)"Normal Reaction To Light");
            comboBoxDefaultCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_PTOSIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_PTOSIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_LID_RETRACTION_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_LID_RETRACTION_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_CONJUNCTIVITUS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_CONJUNCTIVITUS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_VISUAL_ACCUITY_TYPE_CODE", (Object)"6/6");
            comboBoxDefaultCollection.put((Object)"RIGHT_VISUAL_ACCUITY_TYPE_CODE", (Object)"6/6");
            comboBoxDefaultCollection.put((Object)"LEFT_COLOUR_SENSE_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_COLOUR_SENSE_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_VISUAL_FIELDS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_VISUAL_FIELDS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_CORNEA_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_CORNEA_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_IRIS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_IRIS_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LEFT_FUNDUSCOPY_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"RIGHT_FUNDUSCOPY_TEXT", (Object)"null");
            
            //hematological
            comboBoxDefaultCollection.put((Object)"HEMOLYTIC_ANAEMIA_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"ACTIVE_BLEEDING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LYMPH_ADENOPATHY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HEPATOMEGALLY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SPLENOMEGALLY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"IRON_DEFICIENCY_QUERY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"VITAMIN_PACID_DEFICIENCY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"ACTIVE_BLEEDING_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HEMOLYTIC_ANAEMIA_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"LYMPH_ADENOPATHY_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HEPATOMEGALLY_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"SPLENOMEGALLY_TEXT", (Object)"null");
            
            //dermatological
            comboBoxDefaultCollection.put((Object)"PIGMENTATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEMORRHAGE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SKIN_LESIONS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HAIR_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"NAILS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PIGMENTATION_OTHER", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HAIR_OTHER", (Object)"null");
            comboBoxDefaultCollection.put((Object)"NAILS_OTHER", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HEMORRHAGE_LOCATION", (Object)"null");
            comboBoxDefaultCollection.put((Object)"SKIN_LESIONS_LOCATION", (Object)"null");
            comboBoxDefaultCollection.put((Object)"PIGMENTATION_LOCATION", (Object)"null");

            //endocrine
            comboBoxDefaultCollection.put((Object)"THYROID_GLAND_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HYPERTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HYPOTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HORMONE_ABNORMALITY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HYPERTHYROIDISM_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HYPOTHYROIDISM_TEXT", (Object)"null");
            comboBoxDefaultCollection.put((Object)"HORMONE_ABNORMALITY_TEXT", (Object)"null");
            
            objectDispCoordinateCollection = new HashMap(2);
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamRespiratoryModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 13;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_RESPIRATORY_NUMBER) FROM EXAMINATION_RESPIRATORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_RESPIRATORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_RESPIRATORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_RESPIRATORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_RESPIRATORY_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_RESPIRATORY",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_RESPIRATORY");
            tabSymbols.put((Object)"EXAMINATION_RESPIRATORY", (Object)"Examination Respiratory");
            tableAliases.put((Object)"EXAMINATION_RESPIRATORY", (Object)patientName);

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"BREATH_SOUNDS_LOCATION_TYPE_CODE");
            dependanceTableLinks = new HashMap(2);
            dependanceTableLinks.put((Object)"BREATH_SOUNDS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"PERCUSSION_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"PERCUSSION_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(2);
            dependanceItemType.put((Object)"BREATH_SOUNDS_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"PERCUSSION_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            
            examinationType = "Respiratory-"; 

            comboBoxInactiveStateCollection = new HashMap(2);
            comboBoxInactiveStateCollection.put((Object)"BREATH_SOUNDS_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"PERCUSSION_TYPE_CODE", (Object)"Normal");
            
            
            groupName = new String("Patient Respiratory Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(9);
            
            sqlQuery = "SELECT RESPIRATORY_DISTRESS_TYPE_CODE, RESPIRATORY_DISTRESS_TYPE_DESCRIPTION FROM RESPIRATORY_DISTRESS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RESPIRATORY_DISTRESS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RESPIRATORY_DISTRESS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TRACHEAL_POSITION_TYPE_CODE, TRACHEAL_POSITION_TYPE_DESCRIPTION FROM TRACHEAL_POSITION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TRACHEAL_POSITION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TRACHEAL_POSITION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BREATH_SOUNDS_TYPE_CODE, BREATH_SOUNDS_TYPE_DESCRIPTION FROM BREATH_SOUNDS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BREATH_SOUNDS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BREATH_SOUNDS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BREATH_SOUNDS_LOCATION_TYPE_CODE, BREATH_SOUNDS_LOCATION_TYPE_DESCRIPTION FROM BREATH_SOUNDS_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BREATH_SOUNDS_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BREATH_SOUNDS_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT WHEAZE_TYPE_CODE, WHEAZE_TYPE_DESCRIPTION FROM WHEAZE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WHEAZE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WHEAZE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CREPETATIOUS_TYPE_CODE, CREPETATIOUS_TYPE_DESCRIPTION FROM CREPETATIOUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CREPETATIOUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CREPETATIOUS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PERCUSSION_TYPE_CODE, PERCUSSION_TYPE_DESCRIPTION FROM PERCUSSION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PERCUSSION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PERCUSSION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PERCUSSION_LOCATION_TYPE_CODE, PERCUSSION_LOCATION_TYPE_DESCRIPTION FROM PERCUSSION_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PERCUSSION_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PERCUSSION_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HYPER_INFLATION_TYPE_CODE, HYPER_INFLATION_TYPE_DESCRIPTION FROM HYPER_INFLATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HYPER_INFLATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HYPER_INFLATION_TYPE_CODE", (Object)lookupTableData);

            
            comboBoxDefaultCollection = new HashMap(10);
            comboBoxDefaultCollection.put((Object)"RESPIRATORY_DISTRESS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"TRACHEAL_POSITION_TYPE_CODE", (Object)"Central");
            comboBoxDefaultCollection.put((Object)"BREATH_SOUNDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"BREATH_SOUNDS_LOCATION_TYPE_CODE", (Object)"Both Lungs");
            comboBoxDefaultCollection.put((Object)"WHEAZE_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"CREPETATIOUS_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"PERCUSSION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PERCUSSION_LOCATION_TYPE_CODE", (Object)"Both Lungs");
            comboBoxDefaultCollection.put((Object)"HYPER_INFLATION_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"BREATH_RATE", (Object)"12");

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_RESPIRATORY_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_RESPIRATORY_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_RESPIRATORY_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamAbdominalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ABDOMINAL_NUMBER) FROM EXAMINATION_ABDOMINAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ABDOMINAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ABDOMINAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ABDOMINAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ABDOMINAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ABDOMINAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ABDOMINAL");
            tabSymbols.put((Object)"EXAMINATION_ABDOMINAL", (Object)"Examination Abdominal");
            tableAliases.put((Object)"EXAMINATION_ABDOMINAL", (Object)patientName);

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"MASSES_PALPABLE_LOCATION_TYPE_CODE");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"MASSES_PALPABLE_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(2);
            dependanceItemType.put((Object)"MASSES_PALPABLE_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            

            comboBoxInactiveStateCollection = new HashMap(1);
            comboBoxInactiveStateCollection.put((Object)"MASSES_PALPABLE_TYPE_CODE", (Object)"No");
            
            examinationType = "Abdominal-"; 
            
            groupName = new String("Patient Abdominal Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(8);
            
            sqlQuery = "SELECT PALPITATION_ABDOMINAL_TYPE_CODE, PALPITATION_ABDOMINAL_TYPE_DESCRIPTION FROM PALPITATION_ABDOMINAL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PALPITATION_ABDOMINAL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PALPITATION_ABDOMINAL_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PALPITATION_REBOUND_TENDERNESS_TYPE_CODE, PALPITATION_REBOUND_TENDERNESS_TYPE_DESCRIPTION FROM PALPITATION_REBOUND_TENDERNESS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PALPITATION_REBOUND_TENDERNESS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PALPITATION_REBOUND_TENDERNESS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SPLENOMAGALY_TYPE_CODE, SPLENOMAGALY_TYPE_DESCRIPTION FROM SPLENOMAGALY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPLENOMAGALY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPLENOMAGALY_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT HEPATOMEGALY_TYPE_CODE, HEPATOMEGALY_TYPE_DESCRIPTION FROM HEPATOMEGALY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEPATOMEGALY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEPATOMEGALY_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT MASSES_PALPABLE_TYPE_CODE, MASSES_PALPABLE_TYPE_DESCRIPTION FROM MASSES_PALPABLE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MASSES_PALPABLE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MASSES_PALPABLE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT MASSES_PALPABLE_LOCATION_TYPE_CODE, MASSES_PALPABLE_LOCATION_TYPE_DESCRIPTION FROM MASSES_PALPABLE_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MASSES_PALPABLE_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MASSES_PALPABLE_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT OSCULTATION_BELL_SOUNDS_TYPE_CODE, OSCULTATION_BELL_SOUNDS_TYPE_DESCRIPTION FROM OSCULTATION_BELL_SOUNDS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "OSCULTATION_BELL_SOUNDS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"OSCULTATION_BELL_SOUNDS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RECTAL_EXAMINATION_TYPE_CODE, RECTAL_EXAMINATION_TYPE_DESCRIPTION FROM RECTAL_EXAMINATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RECTAL_EXAMINATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RECTAL_EXAMINATION_TYPE_CODE", (Object)lookupTableData);
            
            
            comboBoxDefaultCollection = new HashMap(8);
            comboBoxDefaultCollection.put((Object)"PALPITATION_ABDOMINAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PALPITATION_REBOUND_TENDERNESS_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SPLENOMAGALY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"HEPATOMEGALY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"MASSES_PALPABLE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MASSES_PALPABLE_LOCATION_TYPE_CODE", (Object)"Epigastrium");
            comboBoxDefaultCollection.put((Object)"OSCULTATION_BELL_SOUNDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RECTAL_EXAMINATION_TYPE_CODE", (Object)"Not Done");
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ABDOMINAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ABDOMINAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ABDOMINAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamMusculoskeletalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_MUSCULOSKELETAL_NUM) FROM EXAMINATION_MUSCULOSKELETAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_MUSCULOSKELETAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_MUSCULOSKELETAL_NUM)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_MUSCULOSKELETAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_MUSCULOSKELETAL_NUM", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_MUSCULOSKELETAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_MUSCULOSKELETAL");
            tabSymbols.put((Object)"EXAMINATION_MUSCULOSKELETAL", (Object)"Examination Muscoloskeletal");
            tableAliases.put((Object)"EXAMINATION_MUSCULOSKELETAL", (Object)patientName);

            examinationType = "Musculoskeletal-"; 
            
            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE");
            dependanceTableLinks = new HashMap(4);
            dependanceTableLinks.put((Object)"MOVEMENT_ABNORMALITY_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"JOINT_SWELLING_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"JOINT_SWELLING_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"SUBCUTANEOUS_NODULES_TYPE_CODE",(Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"MUSCLE_WASTING_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"MUSCLE_WASTING_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(4);
            dependanceItemType.put((Object)"MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"JOINT_SWELLING_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"MUSCLE_WASTING_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            

            comboBoxInactiveStateCollection = new HashMap(4);
            comboBoxInactiveStateCollection.put((Object)"MOVEMENT_ABNORMALITY_TYPE_CODE", (Object)"None");
            comboBoxInactiveStateCollection.put((Object)"JOINT_SWELLING_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"SUBCUTANEOUS_NODULES_TYPE_CODE", (Object)"Absent");
            comboBoxInactiveStateCollection.put((Object)"MUSCLE_WASTING_TYPE_CODE", (Object)"No");
            
            
            groupName = new String("Patient Musculoskeletal Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(9);
            
            sqlQuery = "SELECT MOVEMENT_ABNORMALITY_TYPE_CODE, MOVEMENT_ABNORMALITY_TYPE_DESCRIPTION FROM MOVEMENT_ABNORMALITY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MOVEMENT_ABNORMALITY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MOVEMENT_ABNORMALITY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE, MOVEMENT_ABNORMALITY_LOCATION_TYPE_DESCRIPTION FROM MOVEMENT_ABNORMALITY_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MOVEMENT_ABNORMALITY_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CUPSULAR_PATTERN_TYPE_CODE, CUPSULAR_PATTERN_TYPE_DESCRIPTION FROM CUPSULAR_PATTERN_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CUPSULAR_PATTERN_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CUPSULAR_PATTERN_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT JOINT_SWELLING_TYPE_CODE, JOINT_SWELLING_TYPE_DESCRIPTION FROM JOINT_SWELLING_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "JOINT_SWELLING_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"JOINT_SWELLING_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT JOINT_SWELLING_LOCATION_TYPE_CODE, JOINT_SWELLING_LOCATION_TYPE_DESCRIPTION FROM JOINT_SWELLING_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "JOINT_SWELLING_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"JOINT_SWELLING_LOCATION_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SUBCUTANEOUS_NODULES_TYPE_CODE, SUBCUTANEOUS_NODULES_TYPE_DESCRIPTION FROM SUBCUTANEOUS_NODULES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SUBCUTANEOUS_NODULES_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SUBCUTANEOUS_NODULES_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE, SUBCUTANEOUS_NODULES_LOCATION_TYPE_DESCRIPTION FROM SUBCUTANEOUS_NODULES_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SUBCUTANEOUS_NODULES_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT MUSCLE_WASTING_TYPE_CODE, MUSCLE_WASTING_TYPE_DESCRIPTION FROM MUSCLE_WASTING_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MUSCLE_WASTING_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MUSCLE_WASTING_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT MUSCLE_WASTING_LOCATION_TYPE_CODE, MUSCLE_WASTING_LOCATION_TYPE_DESCRIPTION FROM MUSCLE_WASTING_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MUSCLE_WASTING_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MUSCLE_WASTING_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            
            comboBoxDefaultCollection = new HashMap(9);
            comboBoxDefaultCollection.put((Object)"MOVEMENT_ABNORMALITY_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"MOVEMENT_ABNORMALITY_LOCATION_TYPE_CODE", (Object)"Neck");
            comboBoxDefaultCollection.put((Object)"CUPSULAR_PATTERN_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"JOINT_SWELLING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"JOINT_SWELLING_LOCATION_TYPE_CODE", (Object)"Left Leg");
            comboBoxDefaultCollection.put((Object)"SUBCUTANEOUS_NODULES_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"SUBCUTANEOUS_NODULES_LOCATION_TYPE_CODE", (Object)"Left Leg");
            comboBoxDefaultCollection.put((Object)"MUSCLE_WASTING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MUSCLE_WASTING_LOCATION_TYPE_CODE", (Object)"Left Leg");

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_MUSCULOSKELETAL_NUM) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_MUSCULOSKELETAL_NUM)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_MUSCULOSKELETAL_NUM", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamCNSModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 20;
            componentCols = 4;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_CNS_NUMBER) FROM EXAMINATION_CENTRAL_NERVOUS_SYSTEM";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CENTRAL_NERVOUS_SYSTEM", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_CNS_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_CENTRAL_NERVOUS_SYSTEM", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_CNS_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM");
            tabSymbols.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM", (Object)"Examination Central Nervous System");
            tableAliases.put((Object)"EXAMINATION_CENTRAL_NERVOUS_SYSTEM", (Object)patientName);

            examinationType = "Central Nervous System-"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE");
            dependanceTableLinks = new HashMap(9);
            dependanceTableLinks.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"UPPER_LIMB_SENSATION_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"UPPER_LIMB_REFLEX_TYPE_CODE",(Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"UPPER_LIMB_TONE_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"UPPER_LIMB_TONE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"LOWER_LIMB_SENSATION_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"LOWER_LIMB_REFLEX_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LOWER_LIMB_TONE_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"LOWER_LIMB_TONE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"ANAXOMILIA_LOCATION_TYPE_CODE");
            dependanceTableLinks.put((Object)"BABINSKY_REFLEX_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(9);
            dependanceItemType.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"UPPER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"LOWER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");
            dependanceItemType.put((Object)"ANAXOMILIA_LOCATION_TYPE_CODE", (Object)"ARRAYCOMBO");

            comboBoxInactiveStateCollection = new HashMap(9);
            comboBoxInactiveStateCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"UPPER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"UPPER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"UPPER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"LOWER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"LOWER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"LOWER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"BABINSKY_REFLEX_TYPE_CODE", (Object)"Absent");
            
            groupName = new String("Patient Central Nervous System Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(37);
            
            sqlQuery = "SELECT LEVEL_OF_CONSCIOUSNESS_TYPE_CODE, LEVEL_OF_CONSCIOUSNESS_TYPE_DESCRIPTION FROM LEVEL_OF_CONSCIOUSNESS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEVEL_OF_CONSCIOUSNESS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEVEL_OF_CONSCIOUSNESS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT GCS_EYE_OPENING_TYPE_CODE, GCS_EYE_OPENING_TYPE_DESCRIPTION FROM GCS_EYE_OPENING_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GCS_EYE_OPENING_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GCS_EYE_OPENING_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT GCS_VERBAL_RESPONSE_TYPE_CODE, GCS_VERBAL_RESPONSE_TYPE_DESCRIPTION FROM GCS_VERBAL_RESPONSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GCS_VERBAL_RESPONSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GCS_VERBAL_RESPONSE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT GCS_BEST_MOTOR_RESPONSE_TYPE_CODE, GCS_BEST_MOTOR_RESPONSE_TYPE_DESCRIPTION FROM GCS_BEST_MOTOR_RESPONSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GCS_BEST_MOTOR_RESPONSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GCS_BEST_MOTOR_RESPONSE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT CNE_EYE_MOVEMENT_TYPE_CODE, CNE_EYE_MOVEMENT_TYPE_DESCRIPTION FROM CNE_EYE_MOVEMENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CNE_EYE_MOVEMENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CNE_EYE_MOVEMENT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT GAZE_PALSY_TYPE_CODE, GAZE_PALSY_TYPE_DESCRIPTION FROM GAZE_PALSY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GAZE_PALSY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GAZE_PALSY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT VISUAL_FIELD_DEFECT_TYPE_CODE, VISUAL_FIELD_DEFECT_TYPE_DESCRIPTION FROM VISUAL_FIELD_DEFECT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "VISUAL_FIELD_DEFECT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"VISUAL_FIELD_DEFECT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT THIRD_FOURTH_SIXTH_NERVE_TYPE_CODE, THIRD_FOURTH_SIXTH_NERVE_TYPE_DESCRIPTION FROM THIRD_FOURTH_SIXTH_NERVE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "THIRD_FOURTH_SIXTH_NERVE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"THIRD_FOURTH_SIXTH_NERVE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PUPIL_SIZE_TYPE_CODE, PUPIL_SIZE_TYPE_DESCRIPTION FROM PUPIL_SIZE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PUPIL_SIZE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PUPIL_SIZE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PUPIL_MOBILITY_TYPE_CODE, PUPIL_MOBILITY_TYPE_DESCRIPTION FROM PUPIL_MOBILITY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PUPIL_MOBILITY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PUPIL_MOBILITY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT FIFTH_NERVE_SENSORY_DEFICIT_TYPE_CODE, FIFTH_NERVE_SENSORY_DEFICIT_TYPE_DESCRIPTION FROM FIFTH_NERVE_SENSORY_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FIFTH_NERVE_SENSORY_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FIFTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT FIFTH_NERVE_MOTOR_DEFICIT_TYPE_CODE, FIFTH_NERVE_MOTOR_DEFICIT_TYPE_DESCRIPTION FROM FIFTH_NERVE_MOTOR_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "FIFTH_NERVE_MOTOR_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"FIFTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SEVENTH_NERVE_SENSORY_DEFICIT_TYPE_CODE, SEVENTH_NERVE_SENSORY_DEFICIT_TYPE_DESCRIPTION FROM SEVENTH_NERVE_SENSORY_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SEVENTH_NERVE_SENSORY_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SEVENTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SEVENTH_NERVE_MOTOR_DEFICIT_TYPE_CODE, SEVENTH_NERVE_MOTOR_DEFICIT_TYPE_DESCRIPTION FROM SEVENTH_NERVE_MOTOR_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SEVENTH_NERVE_MOTOR_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SEVENTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT EIGHTH_NERVE_HEARING_DEFICIT_TYPE_CODE, EIGHTH_NERVE_HEARING_DEFICIT_TYPE_DESCRIPTION FROM EIGHTH_NERVE_HEARING_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EIGHTH_NERVE_HEARING_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"EIGHTH_NERVE_HEARING_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE_CODE, NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE_DESCRIPTION FROM NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TWELTH_NERVE_TONGUE_DEFICIT_TYPE_CODE, TWELTH_NERVE_TONGUE_DEFICIT_TYPE_DESCRIPTION FROM TWELTH_NERVE_TONGUE_DEFICIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TWELTH_NERVE_TONGUE_DEFICIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TWELTH_NERVE_TONGUE_DEFICIT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE, UPPER_LIMB_MUSCLE_MOTOR_TYPE_DESCRIPTION FROM UPPER_LIMB_MUSCLE_MOTOR_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_MUSCLE_MOTOR_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE, UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_DESCRIPTION FROM UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_SENSATION_TYPE_CODE, UPPER_LIMB_SENSATION_TYPE_DESCRIPTION FROM UPPER_LIMB_SENSATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_SENSATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_SENSATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE, UPPER_LIMB_SENSATION_LOCATION_TYPE_DESCRIPTION FROM UPPER_LIMB_SENSATION_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_SENSATION_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_REFLEX_TYPE_CODE, UPPER_LIMB_REFLEX_TYPE_DESCRIPTION FROM UPPER_LIMB_REFLEX_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_REFLEX_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_REFLEX_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE, UPPER_LIMB_REFLEX_LOCATION_TYPE_DESCRIPTION FROM UPPER_LIMB_REFLEX_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_REFLEX_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_TONE_TYPE_CODE, UPPER_LIMB_TONE_TYPE_DESCRIPTION FROM UPPER_LIMB_TONE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_TONE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_TONE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT UPPER_LIMB_TONE_LOCATION_TYPE_CODE, UPPER_LIMB_TONE_LOCATION_TYPE_DESCRIPTION FROM UPPER_LIMB_TONE_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UPPER_LIMB_TONE_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UPPER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE, LOWER_LIMB_MUSCLE_MOTOR_TYPE_DESCRIPTION FROM LOWER_LIMB_MUSCLE_MOTOR_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_MUSCLE_MOTOR_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE, LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_DESCRIPTION FROM LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_SENSATION_TYPE_CODE, LOWER_LIMB_SENSATION_TYPE_DESCRIPTION FROM LOWER_LIMB_SENSATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_SENSATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_SENSATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE, LOWER_LIMB_SENSATION_LOCATION_TYPE_DESCRIPTION FROM LOWER_LIMB_SENSATION_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_SENSATION_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_REFLEX_TYPE_CODE, LOWER_LIMB_REFLEX_TYPE_DESCRIPTION FROM LOWER_LIMB_REFLEX_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_REFLEX_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_REFLEX_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE, LOWER_LIMB_REFLEX_LOCATION_TYPE_DESCRIPTION FROM LOWER_LIMB_REFLEX_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_REFLEX_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_TONE_TYPE_CODE, LOWER_LIMB_TONE_TYPE_DESCRIPTION FROM LOWER_LIMB_TONE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_TONE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_TONE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LOWER_LIMB_TONE_LOCATION_TYPE_CODE, LOWER_LIMB_TONE_LOCATION_TYPE_DESCRIPTION FROM LOWER_LIMB_TONE_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LOWER_LIMB_TONE_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LOWER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT BABINSKY_REFLEX_TYPE_CODE, BABINSKY_REFLEX_TYPE_DESCRIPTION FROM BABINSKY_REFLEX_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BABINSKY_REFLEX_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BABINSKY_REFLEX_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ANAXOMILIA_LOCATION_TYPE_CODE, ANAXOMILIA_LOCATION_TYPE_DESCRIPTION FROM ANAXOMILIA_LOCATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ANAXOMILIA_LOCATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ANAXOMILIA_LOCATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT INVOLUNTARY_MOVE_TYPE_CODE, INVOLUNTARY_MOVE_TYPE_DESCRIPTION FROM INVOLUNTARY_MOVE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INVOLUNTARY_MOVE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INVOLUNTARY_MOVE_TYPE_CODE", (Object)lookupTableData);

            comboBoxDefaultCollection = new HashMap(28);
            comboBoxDefaultCollection.put((Object)"LEVEL_OF_CONSCIOUSNESS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"GCS_EYE_OPENING_TYPE_CODE", (Object)"[4] Spontaneous");
            comboBoxDefaultCollection.put((Object)"GCS_VERBAL_RESPONSE_TYPE_CODE", (Object)"[5] Oriented");
            comboBoxDefaultCollection.put((Object)"GCS_BEST_MOTOR_RESPONSE_TYPE_CODE", (Object)"[6] Obeying Command");
            comboBoxDefaultCollection.put((Object)"CNE_EYE_MOVEMENT_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"GAZE_PALSY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"VISUAL_FIELD_DEFECT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"THIRD_FOURTH_SIXTH_NERVE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PUPIL_SIZE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PUPIL_MOBILITY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"FIFTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"FIFTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SEVENTH_NERVE_SENSORY_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SEVENTH_NERVE_MOTOR_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"EIGHTH_NERVE_HEARING_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"NINTH_TENTH_ELEVENTH_NERVE_BULBAR_PALSY_TYPE_CODE", (Object)"Absent");
            comboBoxDefaultCollection.put((Object)"TWELTH_NERVE_TONGUE_DEFICIT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"UPPER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"UPPER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"UPPER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"UPPER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"UPPER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"LOWER_LIMB_MUSCLE_MOTOR_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_SENSATION_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"LOWER_LIMB_SENSATION_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_REFLEX_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"LOWER_LIMB_REFLEX_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"LOWER_LIMB_TONE_TYPE_CODE", (Object)"Normal");
            //comboBoxDefaultCollection.put((Object)"LOWER_LIMB_TONE_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"BABINSKY_REFLEX_TYPE_CODE", (Object)"Absent");
            //comboBoxDefaultCollection.put((Object)"ANAXOMILIA_LOCATION_TYPE_CODE", (Object)"None");
            comboBoxDefaultCollection.put((Object)"INVOLUNTARY_MOVE_TYPE_CODE", (Object)"Absent");
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_CNS_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_CNS_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_CNS_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamENTEarModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ENT_EAR_NUMBER) FROM EXAMINATION_ENT_EAR";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_EAR", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_EAR_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_EAR", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_EAR_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ENT_EAR",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_EAR");
            tabSymbols.put((Object)"EXAMINATION_ENT_EAR", (Object)"Examination Ear-Nose-Throat (Ear)");
            tableAliases.put((Object)"EXAMINATION_ENT_EAR", (Object)patientName);

            examinationType = "(ENT)-Ear"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"LEFT_OTHER_EXTERNAL_AUDITORY_MEATUS");
            dependanceTableLinks = new HashMap(4);
            dependanceTableLinks.put((Object)"LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_OTHER_EXTERNAL_AUDITORY_MEATUS");
            dependanceTableLinks.put((Object)"RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_OTHER_TYMPANIC_MEMBRANE");
            dependanceTableLinks.put((Object)"LEFT_TYMPANIC_MEMBRANE_TYPE_CODE",(Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_OTHER_TYMPANIC_MEMBRANE");
            dependanceTableLinks.put((Object)"RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)dependantItemList.clone());

            
            dependanceItemType = new HashMap(4);
            dependanceItemType.put((Object)"LEFT_OTHER_EXTERNAL_AUDITORY_MEATUS", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_OTHER_EXTERNAL_AUDITORY_MEATUS", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_OTHER_TYMPANIC_MEMBRANE", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"RIGHT_OTHER_TYMPANIC_MEMBRANE", (Object)"OTHERBUTTON");
            

            comboBoxActiveStateCollection = new HashMap(4);
            comboBoxActiveStateCollection.put((Object)"LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"LEFT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Other");
            
            
            groupName = new String("Patient Ear-Nose-Throat Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(9);
            
            sqlQuery = "SELECT LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE, LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_DESCRIPTION FROM LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE, RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_DESCRIPTION FROM RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_TYMPANIC_MEMBRANE_TYPE_CODE, LEFT_TYMPANIC_MEMBRANE_TYPE_DESCRIPTION FROM LEFT_TYMPANIC_MEMBRANE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_TYMPANIC_MEMBRANE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE, RIGHT_TYMPANIC_MEMBRANE_TYPE_DESCRIPTION FROM RIGHT_TYMPANIC_MEMBRANE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_TYMPANIC_MEMBRANE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_HEARING_LOSS_PRESENT_TYPE_CODE, LEFT_HEARING_LOSS_PRESENT_TYPE_DESCRIPTION FROM LEFT_HEARING_LOSS_PRESENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_HEARING_LOSS_PRESENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_HEARING_LOSS_PRESENT_TYPE_CODE, RIGHT_HEARING_LOSS_PRESENT_TYPE_DESCRIPTION FROM RIGHT_HEARING_LOSS_PRESENT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_HEARING_LOSS_PRESENT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RINNE_TEST_TYPE_CODE, RINNE_TEST_TYPE_DESCRIPTION FROM RINNE_TEST_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RINNE_TEST_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RINNE_TEST_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT WEBER_TEST_TYPE_CODE, WEBER_TEST_TYPE_DESCRIPTION FROM WEBER_TEST_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "WEBER_TEST_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"WEBER_TEST_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT NYSTAGMUS_TYPE_CODE, NYSTAGMUS_TYPE_DESCRIPTION FROM NYSTAGMUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "NYSTAGMUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"NYSTAGMUS_TYPE_CODE", (Object)lookupTableData);
            
            
            comboBoxDefaultCollection = new HashMap(9);
            comboBoxDefaultCollection.put((Object)"LEFT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_EXTERNAL_AUDITORY_MEATUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_TYMPANIC_MEMBRANE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_HEARING_LOSS_PRESENT_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RINNE_TEST_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"WEBER_TEST_TYPE_CODE", (Object)"Not Done");
            comboBoxDefaultCollection.put((Object)"NYSTAGMUS_TYPE_CODE", (Object)"Not Tested");

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ENT_EAR_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_EAR_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_EAR_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamENTNoseModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ENT_NOSE_NUMBER) FROM EXAMINATION_ENT_NOSE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_NOSE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_NOSE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_NOSE", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_NOSE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ENT_NOSE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_NOSE");
            tabSymbols.put((Object)"EXAMINATION_ENT_NOSE", (Object)"Examination Ear-Nose-Throat (Nose)");
            tableAliases.put((Object)"EXAMINATION_ENT_NOSE", (Object)patientName);

            examinationType = "(ENT)-Nose"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"LEFT_NASAL_PASSAGES_NOTES");
            dependanceTableLinks = new HashMap(2);
            dependanceTableLinks.put((Object)"LEFT_NASAL_PASSAGES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_NASAL_PASSAGES_NOTES");
            dependanceTableLinks.put((Object)"RIGHT_NASAL_PASSAGES_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(2);
            dependanceItemType.put((Object)"LEFT_NASAL_PASSAGES_NOTES", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"RIGHT_NASAL_PASSAGES_NOTES", (Object)"OTHERBUTTON");
            

            comboBoxActiveStateCollection = new HashMap(4);
            comboBoxActiveStateCollection.put((Object)"LEFT_NASAL_PASSAGES_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_NASAL_PASSAGES_TYPE_CODE", (Object)"Other");
            
            
            groupName = new String("Patient Ear-Nose-Throat Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(2);
            
            sqlQuery = "SELECT RIGHT_NASAL_PASSAGES_TYPE_CODE, RIGHT_NASAL_PASSAGES_TYPE_DESCRIPTION FROM RIGHT_NASAL_PASSAGES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_NASAL_PASSAGES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_NASAL_PASSAGES_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_NASAL_PASSAGES_TYPE_CODE, LEFT_NASAL_PASSAGES_TYPE_DESCRIPTION FROM LEFT_NASAL_PASSAGES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_NASAL_PASSAGES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_NASAL_PASSAGES_TYPE_CODE", (Object)lookupTableData);

            
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"LEFT_NASAL_PASSAGES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_NASAL_PASSAGES_TYPE_CODE", (Object)"Normal");

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ENT_NOSE_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_NOSE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_NOSE_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamENTPNSModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER) FROM EXAMINATION_ENT_PARANASAL_SINUSES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_PARANASAL_SINUSES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_PARANASAL_SINUSES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_PARANASAL_SINUSES");
            tabSymbols.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES", (Object)"Examination E-N-T (Paranasal Sinuses)");
            tableAliases.put((Object)"EXAMINATION_ENT_PARANASAL_SINUSES", (Object)patientName);

            examinationType = "(ENT)-Paranasal Sinuses"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"LEFT_OTHER_FRONTAL_SINUSES");
            dependanceTableLinks = new HashMap(4);
            dependanceTableLinks.put((Object)"LEFT_FRONTAL_SINUSES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_OTHER_FRONTAL_SINUSES");
            dependanceTableLinks.put((Object)"RIGHT_FRONTAL_SINUSES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_OTHER_MAXILLARY_SINUSES");
            dependanceTableLinks.put((Object)"LEFT_MAXILLARY_SINUSES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_OTHER_MAXILLARY_SINUSES");
            dependanceTableLinks.put((Object)"RIGHT_MAXILLARY_SINUSES_TYPE_CODE", (Object)dependantItemList.clone());
            
            
            dependanceItemType = new HashMap(4);
            dependanceItemType.put((Object)"LEFT_OTHER_FRONTAL_SINUSES", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_OTHER_FRONTAL_SINUSES", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_OTHER_MAXILLARY_SINUSES", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_OTHER_MAXILLARY_SINUSES", (Object)"TEXTFIELD");

            comboBoxActiveStateCollection = new HashMap(4);
            comboBoxActiveStateCollection.put((Object)"LEFT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"LEFT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Other");
            
            
            groupName = new String("Patient Ear-Nose-Throat Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT LEFT_FRONTAL_SINUSES_TYPE_CODE, LEFT_FRONTAL_SINUSES_TYPE_DESCRIPTION FROM LEFT_FRONTAL_SINUSES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_FRONTAL_SINUSES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_FRONTAL_SINUSES_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_FRONTAL_SINUSES_TYPE_CODE, RIGHT_FRONTAL_SINUSES_TYPE_DESCRIPTION FROM RIGHT_FRONTAL_SINUSES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_FRONTAL_SINUSES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_FRONTAL_SINUSES_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_MAXILLARY_SINUSES_TYPE_CODE, LEFT_MAXILLARY_SINUSES_TYPE_DESCRIPTION FROM LEFT_MAXILLARY_SINUSES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_MAXILLARY_SINUSES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_MAXILLARY_SINUSES_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_MAXILLARY_SINUSES_TYPE_CODE, RIGHT_MAXILLARY_SINUSES_TYPE_DESCRIPTION FROM RIGHT_MAXILLARY_SINUSES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_MAXILLARY_SINUSES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_MAXILLARY_SINUSES_TYPE_CODE", (Object)lookupTableData);
            
            comboBoxDefaultCollection = new HashMap(4);
            comboBoxDefaultCollection.put((Object)"LEFT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_FRONTAL_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_MAXILLARY_SINUSES_TYPE_CODE", (Object)"Normal");

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_PARANASAL_SINUSES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    
    public void initAddExamENTThroatModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ENT_THROAT_NUMBER) FROM EXAMINATION_ENT_THROAT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_THROAT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_THROAT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENT_THROAT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_THROAT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ENT_THROAT",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENT_THROAT");
            tabSymbols.put((Object)"EXAMINATION_ENT_THROAT", (Object)"Examination E-N-T (Throat)");
            tableAliases.put((Object)"EXAMINATION_ENT_THROAT", (Object)patientName);

            examinationType = "(ENT)-Throat"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"PHARYNGITIS_OTHER");
            dependanceTableLinks = new HashMap(3);
            dependanceTableLinks.put((Object)"PHARYNGITIS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"TONSILS_OTHER");
            dependanceTableLinks.put((Object)"TONSILS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"ORAL_LESIONS_NOTES");
            dependanceTableLinks.put((Object)"ORAL_LESIONS_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(3);
            dependanceItemType.put((Object)"PHARYNGITIS_OTHER", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"TONSILS_OTHER", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"ORAL_LESIONS_NOTES", (Object)"OTHERBUTTON");

            comboBoxActiveStateCollection = new HashMap(3);
            comboBoxActiveStateCollection.put((Object)"PHARYNGITIS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"TONSILS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"ORAL_LESIONS_TYPE_CODE", (Object)"Yes");
            
            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"POST_NASAL_DRIP_TYPE_CODE", (Object)"Not Present");
            comboBoxDefaultCollection.put((Object)"PHARYNGITIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"TONSILS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ORAL_LESIONS_TYPE_CODE", (Object)"No");
           
           
            groupName = new String("Patient Ear-Nose-Throat Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT POST_NASAL_DRIP_TYPE_CODE, POST_NASAL_DRIP_TYPE_DESCRIPTION FROM POST_NASAL_DRIP_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "POST_NASAL_DRIP_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"POST_NASAL_DRIP_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PHARYNGITIS_TYPE_CODE, PHARYNGITIS_TYPE_DESCRIPTION FROM PHARYNGITIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PHARYNGITIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PHARYNGITIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TONSILS_TYPE_CODE, TONSILS_TYPE_DESCRIPTION FROM TONSILS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TONSILS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TONSILS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ORAL_LESIONS_TYPE_CODE, ORAL_LESIONS_TYPE_DESCRIPTION FROM ORAL_LESIONS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ORAL_LESIONS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ORAL_LESIONS_TYPE_CODE", (Object)lookupTableData);
            
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ENT_THROAT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENT_THROAT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENT_THROAT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddExamDermatologicalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_DERMATOLOGICAL_NUMBER) FROM EXAMINATION_DERMATOLOGICAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_DERMATOLOGICAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_DERMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_DERMATOLOGICAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_DERMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_DERMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_DERMATOLOGICAL");
            tabSymbols.put((Object)"EXAMINATION_DERMATOLOGICAL", (Object)"Examination Dermatological");
            tableAliases.put((Object)"EXAMINATION_DERMATOLOGICAL", (Object)patientName);

            examinationType = "Dermatological-"; 
           
            dependantItemList = new ArrayList(2);
            dependantItemList.add((Object)"PIGMENTATION_LOCATION");
            dependantItemList.add((Object)"PIGMENTATION_OTHER");
            dependanceTableLinks = new HashMap(5);
            dependanceTableLinks.put((Object)"PIGMENTATION_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HEMORRHAGE_LOCATION");
            dependanceTableLinks.put((Object)"HEMORRHAGE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"SKIN_LESIONS_LOCATION");
            dependanceTableLinks.put((Object)"SKIN_LESIONS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HAIR_OTHER");
            dependanceTableLinks.put((Object)"HAIR_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"NAILS_OTHER");
            dependanceTableLinks.put((Object)"NAILS_TYPE_CODE", (Object)dependantItemList.clone());
            
            
            dependanceItemType = new HashMap(5);
            dependanceItemType.put((Object)"PIGMENTATION_LOCATION", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"PIGMENTATION_OTHER", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"HEMORRHAGE_LOCATION", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"SKIN_LESIONS_LOCATION", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"HAIR_OTHER", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"NAILS_OTHER", (Object)"TEXTFIELD");

            comboBoxInactiveStateCollection = new HashMap(3);
            comboBoxInactiveStateCollection.put((Object)"PIGMENTATION_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"HEMORRHAGE_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"SKIN_LESIONS_TYPE_CODE", (Object)"No");

            comboBoxActiveStateCollection = new HashMap(2);
            comboBoxActiveStateCollection.put((Object)"HAIR_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"NAILS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"PIGMENTATION_TYPE_CODE", (Object)"Other");
            
            comboBoxDefaultCollection = new HashMap(5);
            comboBoxDefaultCollection.put((Object)"PIGMENTATION_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HEMORRHAGE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SKIN_LESIONS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HAIR_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"NAILS_TYPE_CODE", (Object)"Normal");

            //a map of dependant items to activity state must be supplied if there is more than one dependance per item and they are split up across activities.
            dependantItemActivityMap = new HashMap(2);
            dependantItemActivityMap.put((Object)"PIGMENTATION_LOCATION",(Object)"Inactive,Normal");
            dependantItemActivityMap.put((Object)"PIGMENTATION_OTHER",(Object)"Active,Other");

            groupName = new String("Patient Dermatological Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(5);
            
            sqlQuery = "SELECT PIGMENTATION_TYPE_CODE, PIGMENTATION_TYPE_DESCRIPTION FROM PIGMENTATION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PIGMENTATION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PIGMENTATION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HEMORRHAGE_TYPE_CODE, HEMORRHAGE_TYPE_DESCRIPTION FROM HEMORRHAGE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEMORRHAGE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEMORRHAGE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SKIN_LESIONS_TYPE_CODE, SKIN_LESIONS_TYPE_DESCRIPTION FROM SKIN_LESIONS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SKIN_LESIONS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SKIN_LESIONS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HAIR_TYPE_CODE, HAIR_TYPE_DESCRIPTION FROM HAIR_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HAIR_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HAIR_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT NAILS_TYPE_CODE, NAILS_TYPE_DESCRIPTION FROM NAILS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "NAILS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"NAILS_TYPE_CODE", (Object)lookupTableData);
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_DERMATOLOGICAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_DERMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_DERMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamHematologicalModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_HEMATOLOGICAL_NUMBER) FROM EXAMINATION_HEMATOLOGICAL";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_HEMATOLOGICAL", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_HEMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_HEMATOLOGICAL", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_HEMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_HEMATOLOGICAL",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_HEMATOLOGICAL");
            tabSymbols.put((Object)"EXAMINATION_HEMATOLOGICAL", (Object)"Examination Hematological");
            tableAliases.put((Object)"EXAMINATION_HEMATOLOGICAL", (Object)patientName);

            examinationType = "Hematological-"; 
 
            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"ACTIVE_BLEEDING_TEXT");
            dependanceTableLinks = new HashMap(5);
            dependanceTableLinks.put((Object)"ACTIVE_BLEEDING_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HEMOLYTIC_ANAEMIA_TEXT");
            dependanceTableLinks.put((Object)"HEMOLYTIC_ANAEMIA_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LYMPH_ADENOPATHY_TEXT");
            dependanceTableLinks.put((Object)"LYMPH_ADENOPATHY_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HEPATOMEGALLY_TEXT");
            dependanceTableLinks.put((Object)"HEPATOMEGALLY_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"SPLENOMEGALLY_TEXT");
            dependanceTableLinks.put((Object)"SPLENOMEGALLY_TYPE_CODE", (Object)dependantItemList.clone());
            
            
            dependanceItemType = new HashMap(5);
            dependanceItemType.put((Object)"ACTIVE_BLEEDING_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"HEMOLYTIC_ANAEMIA_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LYMPH_ADENOPATHY_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"HEPATOMEGALLY_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"SPLENOMEGALLY_TEXT", (Object)"TEXTFIELD");

            comboBoxInactiveStateCollection = new HashMap(3);
            comboBoxInactiveStateCollection.put((Object)"ACTIVE_BLEEDING_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"LYMPH_ADENOPATHY_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"HEPATOMEGALLY_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"SPLENOMEGALLY_TYPE_CODE", (Object)"No");

            comboBoxActiveStateCollection = new HashMap(1);
            comboBoxActiveStateCollection.put((Object)"HEMOLYTIC_ANAEMIA_TYPE_CODE", (Object)"Other");
            
            comboBoxDefaultCollection = new HashMap(7);
            comboBoxDefaultCollection.put((Object)"HEMOLYTIC_ANAEMIA_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"ACTIVE_BLEEDING_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LYMPH_ADENOPATHY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HEPATOMEGALLY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"SPLENOMEGALLY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"IRON_DEFICIENCY_QUERY_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"VITAMIN_PACID_DEFICIENCY_TYPE_CODE", (Object)"No");

            groupName = new String("Patient Hematological Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(7);
            
            sqlQuery = "SELECT HEMOLYTIC_ANAEMIA_TYPE_CODE, HEMOLYTIC_ANAEMIA_TYPE_DESCRIPTION FROM HEMOLYTIC_ANAEMIA_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEMOLYTIC_ANAEMIA_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEMOLYTIC_ANAEMIA_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT ACTIVE_BLEEDING_TYPE_CODE, ACTIVE_BLEEDING_TYPE_DESCRIPTION FROM ACTIVE_BLEEDING_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ACTIVE_BLEEDING_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ACTIVE_BLEEDING_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LYMPH_ADENOPATHY_TYPE_CODE, LYMPH_ADENOPATHY_TYPE_DESCRIPTION FROM LYMPH_ADENOPATHY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LYMPH_ADENOPATHY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LYMPH_ADENOPATHY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HEPATOMEGALLY_TYPE_CODE, HEPATOMEGALLY_TYPE_DESCRIPTION FROM HEPATOMEGALLY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HEPATOMEGALLY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HEPATOMEGALLY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SPLENOMEGALLY_TYPE_CODE, SPLENOMEGALLY_TYPE_DESCRIPTION FROM SPLENOMEGALLY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SPLENOMEGALLY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SPLENOMEGALLY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT IRON_DEFICIENCY_QUERY_TYPE_CODE, IRON_DEFICIENCY_QUERY_TYPE_DESCRIPTION FROM IRON_DEFICIENCY_QUERY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "IRON_DEFICIENCY_QUERY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"IRON_DEFICIENCY_QUERY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT VITAMIN_PACID_DEFICIENCY_TYPE_CODE, VITAMIN_PACID_DEFICIENCY_TYPE_DESCRIPTION FROM VITAMIN_PACID_DEFICIENCY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "VITAMIN_PACID_DEFICIENCY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"VITAMIN_PACID_DEFICIENCY_TYPE_CODE", (Object)lookupTableData);
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_HEMATOLOGICAL_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_HEMATOLOGICAL_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_HEMATOLOGICAL_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamEyesModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 20;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_EYES_NUMBER) FROM EXAMINATION_EYES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_EYES", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_EYES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_EYES", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_EYES_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_EYES",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_EYES");
            tabSymbols.put((Object)"EXAMINATION_EYES", (Object)"Examination Eyes");
            tableAliases.put((Object)"EXAMINATION_EYES", (Object)patientName);

            examinationType = "Eyes-"; 
            
            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"LEFT_COLOUR_SENSE_TEXT");
            dependanceTableLinks = new HashMap(10);
            dependanceTableLinks.put((Object)"LEFT_COLOUR_SENSE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_COLOUR_SENSE_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_COLOUR_SENSE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_VISUAL_FIELDS_TEXT");
            dependanceTableLinks.put((Object)"LEFT_VISUAL_FIELDS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_VISUAL_FIELDS_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_VISUAL_FIELDS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_CORNEA_TEXT");
            dependanceTableLinks.put((Object)"LEFT_CORNEA_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_CORNEA_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_CORNEA_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_IRIS_TEXT");
            dependanceTableLinks.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_IRIS_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_FUNDUSCOPY_TEXT");
            dependanceTableLinks.put((Object)"LEFT_FUNDUSCOPY_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_FUNDUSCOPY_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_FUNDUSCOPY_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(10);
            dependanceItemType.put((Object)"LEFT_COLOUR_SENSE_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_COLOUR_SENSE_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_VISUAL_FIELDS_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_VISUAL_FIELDS_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_CORNEA_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_CORNEA_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_IRIS_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"RIGHT_IRIS_TEXT", (Object)"TEXTFIELD");
            dependanceItemType.put((Object)"LEFT_FUNDUSCOPY_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"RIGHT_FUNDUSCOPY_TEXT", (Object)"OTHERBUTTON");

            comboBoxInactiveStateCollection = new HashMap(2);
            comboBoxInactiveStateCollection.put((Object)"LEFT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");
            comboBoxInactiveStateCollection.put((Object)"RIGHT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");

            comboBoxActiveStateCollection = new HashMap(8);
            comboBoxActiveStateCollection.put((Object)"LEFT_VISUAL_FIELDS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_VISUAL_FIELDS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"LEFT_CORNEA_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_CORNEA_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"LEFT_FUNDUSCOPY_TYPE_CODE", (Object)"Other");
            comboBoxActiveStateCollection.put((Object)"RIGHT_FUNDUSCOPY_TYPE_CODE", (Object)"Other");
            
            comboBoxDefaultCollection = new HashMap(20);
            comboBoxDefaultCollection.put((Object)"LEFT_VISUAL_FIELDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_VISUAL_FIELDS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_CORNEA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_CORNEA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_FUNDUSCOPY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_FUNDUSCOPY_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_COLOUR_SENSE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_PUPIL_TYPE_CODE", (Object)"Normal Reaction To Light");
            comboBoxDefaultCollection.put((Object)"RIGHT_PUPIL_TYPE_CODE", (Object)"Normal Reaction To Light");
            comboBoxDefaultCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"LEFT_PTOSIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_PTOSIS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_LID_RETRACTION_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_LID_RETRACTION_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_CONJUNCTIVITUS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"RIGHT_CONJUNCTIVITUS_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_VISUAL_ACCUITY_TYPE_CODE", (Object)"6/6");
            comboBoxDefaultCollection.put((Object)"RIGHT_VISUAL_ACCUITY_TYPE_CODE", (Object)"6/6");

            groupName = new String("Patient Eyes Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(20);

            sqlQuery = "SELECT LEFT_VISUAL_ACCUITY_TYPE_CODE, LEFT_VISUAL_ACCUITY_TYPE_DESCRIPTION FROM LEFT_VISUAL_ACCUITY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_VISUAL_ACCUITY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_VISUAL_ACCUITY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_VISUAL_ACCUITY_TYPE_CODE, RIGHT_VISUAL_ACCUITY_TYPE_DESCRIPTION FROM RIGHT_VISUAL_ACCUITY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_VISUAL_ACCUITY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_VISUAL_ACCUITY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_COLOUR_SENSE_TYPE_CODE, LEFT_COLOUR_SENSE_TYPE_DESCRIPTION FROM LEFT_COLOUR_SENSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_COLOUR_SENSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_COLOUR_SENSE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_COLOUR_SENSE_TYPE_CODE, RIGHT_COLOUR_SENSE_TYPE_DESCRIPTION FROM RIGHT_COLOUR_SENSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_COLOUR_SENSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_COLOUR_SENSE_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_VISUAL_FIELDS_TYPE_CODE, LEFT_VISUAL_FIELDS_TYPE_DESCRIPTION FROM LEFT_VISUAL_FIELDS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_VISUAL_FIELDS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_VISUAL_FIELDS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_VISUAL_FIELDS_TYPE_CODE, RIGHT_VISUAL_FIELDS_TYPE_DESCRIPTION FROM RIGHT_VISUAL_FIELDS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_VISUAL_FIELDS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_VISUAL_FIELDS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_PTOSIS_TYPE_CODE, LEFT_PTOSIS_TYPE_DESCRIPTION FROM LEFT_PTOSIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_PTOSIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_PTOSIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_PTOSIS_TYPE_CODE, RIGHT_PTOSIS_TYPE_DESCRIPTION FROM RIGHT_PTOSIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_PTOSIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_PTOSIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_LID_RETRACTION_TYPE_CODE, LEFT_LID_RETRACTION_TYPE_DESCRIPTION FROM LEFT_LID_RETRACTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_LID_RETRACTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_LID_RETRACTION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_LID_RETRACTION_TYPE_CODE, RIGHT_LID_RETRACTION_TYPE_DESCRIPTION FROM RIGHT_LID_RETRACTION_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_LID_RETRACTION_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_LID_RETRACTION_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_CONJUNCTIVITUS_TYPE_CODE, LEFT_CONJUNCTIVITUS_TYPE_DESCRIPTION FROM LEFT_CONJUNCTIVITUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_CONJUNCTIVITUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_CONJUNCTIVITUS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_CONJUNCTIVITUS_TYPE_CODE, RIGHT_CONJUNCTIVITUS_TYPE_DESCRIPTION FROM RIGHT_CONJUNCTIVITUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_CONJUNCTIVITUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_CONJUNCTIVITUS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_CORNEA_TYPE_CODE, LEFT_CORNEA_TYPE_DESCRIPTION FROM LEFT_CORNEA_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_CORNEA_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_CORNEA_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_CORNEA_TYPE_CODE, RIGHT_CORNEA_TYPE_DESCRIPTION FROM RIGHT_CORNEA_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_CORNEA_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_CORNEA_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_IRIS_TYPE_CODE, LEFT_IRIS_TYPE_DESCRIPTION FROM LEFT_IRIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_IRIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_IRIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_IRIS_TYPE_CODE, RIGHT_IRIS_TYPE_DESCRIPTION FROM RIGHT_IRIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_IRIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_IRIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_PUPIL_TYPE_CODE, LEFT_PUPIL_TYPE_DESCRIPTION FROM LEFT_PUPIL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_PUPIL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_PUPIL_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_PUPIL_TYPE_CODE, RIGHT_PUPIL_TYPE_DESCRIPTION FROM RIGHT_PUPIL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_PUPIL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_PUPIL_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT LEFT_FUNDUSCOPY_TYPE_CODE, LEFT_FUNDUSCOPY_TYPE_DESCRIPTION FROM LEFT_FUNDUSCOPY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_FUNDUSCOPY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_FUNDUSCOPY_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_FUNDUSCOPY_TYPE_CODE, RIGHT_FUNDUSCOPY_TYPE_DESCRIPTION FROM RIGHT_FUNDUSCOPY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_FUNDUSCOPY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_FUNDUSCOPY_TYPE_CODE", (Object)lookupTableData);
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_EYES_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_EYES_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_EYES_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddExamUrogenitalMaleModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_MALE_NUMBER) FROM EXAMINATION_UROGENITAL_MALE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_MALE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_MALE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_MALE", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_MALE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_MALE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_MALE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_MALE", (Object)"Examination Urogenital (Male)");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_MALE", (Object)patientName);

            examinationType = "(UG)-Male"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"LEFT_TESTICAL_TEXT");
            dependanceTableLinks = new HashMap(4);
            dependanceTableLinks.put((Object)"LEFT_TESTICAL_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_TESTICAL_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_TESTICAL_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"PENIS_TEXT");
            dependanceTableLinks.put((Object)"PENIS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"PROSTATE_TEXT");
            dependanceTableLinks.put((Object)"PROSTATE_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(4);
            dependanceItemType.put((Object)"LEFT_TESTICAL_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"RIGHT_TESTICAL_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"PENIS_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"PROSTATE_TEXT", (Object)"OTHERBUTTON");

            comboBoxActiveStateCollection = new HashMap(4);
            comboBoxActiveStateCollection.put((Object)"LEFT_TESTICAL_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"RIGHT_TESTICAL_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"PENIS_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"PROSTATE_TYPE_CODE", (Object)"Abnormal");
            
            comboBoxDefaultCollection = new HashMap(4);
            comboBoxDefaultCollection.put((Object)"LEFT_TESTICAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_TESTICAL_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PENIS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PROSTATE_TYPE_CODE", (Object)"Not Done");
            
            groupName = new String("Patient Urogenital Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT LEFT_TESTICAL_TYPE_CODE, LEFT_TESTICAL_TYPE_DESCRIPTION FROM LEFT_TESTICAL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_TESTICAL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_TESTICAL_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT RIGHT_TESTICAL_TYPE_CODE, RIGHT_TESTICAL_TYPE_DESCRIPTION FROM RIGHT_TESTICAL_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_TESTICAL_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_TESTICAL_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PENIS_TYPE_CODE, PENIS_TYPE_DESCRIPTION FROM PENIS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PENIS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PENIS_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT PROSTATE_TYPE_CODE, PROSTATE_TYPE_DESCRIPTION FROM PROSTATE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PROSTATE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PROSTATE_TYPE_CODE", (Object)lookupTableData);
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_MALE_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_MALE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_MALE_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
   
    
    public void initAddExamUrogenitalFemaleModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_FEMALE_NUMBER) FROM EXAMINATION_UROGENITAL_FEMALE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_FEMALE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_FEMALE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_FEMALE", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_FEMALE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_FEMALE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_FEMALE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_FEMALE", (Object)"Examination Urogenital (Female)");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_FEMALE", (Object)patientName);

            examinationType = "(UG)-Female"; 

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"CERVIX_TEXT");
            dependanceTableLinks = new HashMap(8);
            dependanceTableLinks.put((Object)"CERVIX_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"UTERUS_TEXT");
            dependanceTableLinks.put((Object)"UTERUS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"ADNEXAE_TEXT");
            dependanceTableLinks.put((Object)"ADNEXAE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"VAGINA_TEXT");
            dependanceTableLinks.put((Object)"VAGINA_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"INTROITUS_TEXT");
            dependanceTableLinks.put((Object)"INTROITUS_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"PAP_SMEAR_TEXT");
            dependanceTableLinks.put((Object)"PAP_SMEAR_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEFT_BREAST_TEXT");
            dependanceTableLinks.put((Object)"LEFT_BREAST_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"RIGHT_BREAST_TEXT");
            dependanceTableLinks.put((Object)"RIGHT_BREAST_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(8);
            dependanceItemType.put((Object)"CERVIX_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"UTERUS_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"ADNEXAE_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"VAGINA_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"INTROITUS_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"PAP_SMEAR_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"LEFT_BREAST_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"RIGHT_BREAST_TEXT", (Object)"OTHERBUTTON");

            comboBoxActiveStateCollection = new HashMap(8);
            comboBoxActiveStateCollection.put((Object)"CERVIX_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"UTERUS_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"ADNEXAE_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"VAGINA_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"INTROITUS_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"PAP_SMEAR_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"LEFT_BREAST_TYPE_CODE", (Object)"Abnormal");
            comboBoxActiveStateCollection.put((Object)"RIGHT_BREAST_TYPE_CODE", (Object)"Abnormal");
            
            comboBoxDefaultCollection = new HashMap(8);
            comboBoxDefaultCollection.put((Object)"CERVIX_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"UTERUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"ADNEXAE_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"VAGINA_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"INTROITUS_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"PAP_SMEAR_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEFT_BREAST_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"RIGHT_BREAST_TYPE_CODE", (Object)"Normal");

            
            groupName = new String("Patient Urogenital Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(8);
            
            sqlQuery = "SELECT CERVIX_TYPE_CODE, CERVIX_TYPE_DESCRIPTION FROM CERVIX_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CERVIX_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CERVIX_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT UTERUS_TYPE_CODE, UTERUS_TYPE_DESCRIPTION FROM UTERUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "UTERUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"UTERUS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT ADNEXAE_TYPE_CODE, ADNEXAE_TYPE_DESCRIPTION FROM ADNEXAE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ADNEXAE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ADNEXAE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT VAGINA_TYPE_CODE, VAGINA_TYPE_DESCRIPTION FROM VAGINA_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "VAGINA_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"VAGINA_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT INTROITUS_TYPE_CODE, INTROITUS_TYPE_DESCRIPTION FROM INTROITUS_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "INTROITUS_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"INTROITUS_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT PAP_SMEAR_TYPE_CODE, PAP_SMEAR_TYPE_DESCRIPTION FROM PAP_SMEAR_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PAP_SMEAR_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PAP_SMEAR_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LEFT_BREAST_TYPE_CODE, LEFT_BREAST_TYPE_DESCRIPTION FROM LEFT_BREAST_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEFT_BREAST_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEFT_BREAST_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT RIGHT_BREAST_TYPE_CODE, RIGHT_BREAST_TYPE_DESCRIPTION FROM RIGHT_BREAST_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "RIGHT_BREAST_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"RIGHT_BREAST_TYPE_CODE", (Object)lookupTableData);

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_FEMALE_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_FEMALE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_FEMALE_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    
    public void initAddExamUrogenitalUrineModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_URINE_NUMBER) FROM EXAMINATION_UROGENITAL_URINE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_URINE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_URINE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            examinationType = "(UG)-Urine"; 

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_UROGENITAL_URINE", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_URINE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_UROGENITAL_URINE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_UROGENITAL_URINE");
            tabSymbols.put((Object)"EXAMINATION_UROGENITAL_URINE", (Object)"Examination Urogenital (Urine)");
            tableAliases.put((Object)"EXAMINATION_UROGENITAL_URINE", (Object)patientName);

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"PROTEIN_TEXT");
            dependanceTableLinks = new HashMap(8);
            dependanceTableLinks.put((Object)"PROTEIN_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"GLUCOSE_TEXT");
            dependanceTableLinks.put((Object)"GLUCOSE_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"LEUKOSYTES_TEXT");
            dependanceTableLinks.put((Object)"LEUKOSYTES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"NITRITES_TEXT");
            dependanceTableLinks.put((Object)"NITRITES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"BILLIRUBIN_TEXT");
            dependanceTableLinks.put((Object)"BILLIRUBIN_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"KETONES_TEXT");
            dependanceTableLinks.put((Object)"KETONES_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"BLOOD_TEXT");
            dependanceTableLinks.put((Object)"BLOOD_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"MICROSCOPY_TEXT");
            dependanceTableLinks.put((Object)"MICROSCOPY_TYPE_CODE", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(8);
            dependanceItemType.put((Object)"PROTEIN_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"GLUCOSE_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"LEUKOSYTES_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"NITRITES_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"BILLIRUBIN_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"KETONES_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"BLOOD_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"MICROSCOPY_TEXT", (Object)"OTHERBUTTON");

            comboBoxActiveStateCollection = new HashMap(8);
            comboBoxActiveStateCollection.put((Object)"PROTEIN_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"GLUCOSE_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"LEUKOSYTES_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"NITRITES_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"BILLIRUBIN_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"KETONES_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"BLOOD_TYPE_CODE", (Object)"Yes");
            comboBoxActiveStateCollection.put((Object)"MICROSCOPY_TYPE_CODE", (Object)"Abnormal");
            
            comboBoxDefaultCollection = new HashMap(8);
            comboBoxDefaultCollection.put((Object)"PROTEIN_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"GLUCOSE_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"LEUKOSYTES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"NITRITES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"BILLIRUBIN_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"KETONES_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"BLOOD_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"MICROSCOPY_TYPE_CODE", (Object)"Not Done");

            
            groupName = new String("Patient Urogenital Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(8);
            
            sqlQuery = "SELECT PROTEIN_TYPE_CODE, PROTEIN_TYPE_DESCRIPTION FROM PROTEIN_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PROTEIN_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"PROTEIN_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT GLUCOSE_TYPE_CODE, GLUCOSE_TYPE_DESCRIPTION FROM GLUCOSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "GLUCOSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"GLUCOSE_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT LEUKOSYTES_TYPE_CODE, LEUKOSYTES_TYPE_DESCRIPTION FROM LEUKOSYTES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "LEUKOSYTES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"LEUKOSYTES_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT NITRITES_TYPE_CODE, NITRITES_TYPE_DESCRIPTION FROM NITRITES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "NITRITES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"NITRITES_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BILLIRUBIN_TYPE_CODE, BILLIRUBIN_TYPE_DESCRIPTION FROM BILLIRUBIN_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BILLIRUBIN_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BILLIRUBIN_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT KETONES_TYPE_CODE, KETONES_TYPE_DESCRIPTION FROM KETONES_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "KETONES_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"KETONES_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT BLOOD_TYPE_CODE, BLOOD_TYPE_DESCRIPTION FROM BLOOD_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "BLOOD_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"BLOOD_TYPE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT MICROSCOPY_TYPE_CODE, MICROSCOPY_TYPE_DESCRIPTION FROM MICROSCOPY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MICROSCOPY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"MICROSCOPY_TYPE_CODE", (Object)lookupTableData);

            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_UROGENITAL_URINE_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_UROGENITAL_URINE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_UROGENITAL_URINE_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    

    public void initAddExamEndocrineModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);
            componentRows = 11;
            componentCols = 4;

            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(EXAMINATION_ENDOCRINE_NUMBER) FROM EXAMINATION_ENDOCRINE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENDOCRINE", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENDOCRINE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "EXAMINATION_ENDOCRINE", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENDOCRINE_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"EXAMINATION_ENDOCRINE",(Object)dbAccessInstance);
            tableNames.add((Object)"EXAMINATION_ENDOCRINE");
            tabSymbols.put((Object)"EXAMINATION_ENDOCRINE", (Object)"Examination Endocrine");
            tableAliases.put((Object)"EXAMINATION_ENDOCRINE", (Object)patientName);

            
            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"HYPERTHYROIDISM_TEXT");
            dependanceTableLinks = new HashMap(3);
            dependanceTableLinks.put((Object)"HYPERTHYROIDISM_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HYPOTHYROIDISM_TEXT");
            dependanceTableLinks.put((Object)"HYPOTHYROIDISM_TYPE_CODE", (Object)dependantItemList.clone());
            dependantItemList.clear();
            dependantItemList.add((Object)"HORMONE_ABNORMALITY_TEXT");
            dependanceTableLinks.put((Object)"HORMONE_ABNORMALITY_TYPE_CODE", (Object)dependantItemList.clone());
            
            examinationType = "Endocrine-"; 
            
            dependanceItemType = new HashMap(3);
            dependanceItemType.put((Object)"HYPERTHYROIDISM_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"HYPOTHYROIDISM_TEXT", (Object)"OTHERBUTTON");
            dependanceItemType.put((Object)"HORMONE_ABNORMALITY_TEXT", (Object)"OTHERBUTTON");

            comboBoxInactiveStateCollection = new HashMap(3);
            comboBoxInactiveStateCollection.put((Object)"HYPERTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"HYPOTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxInactiveStateCollection.put((Object)"HORMONE_ABNORMALITY_TYPE_CODE", (Object)"No");

            
            comboBoxDefaultCollection = new HashMap(4);
            comboBoxDefaultCollection.put((Object)"THYROID_GLAND_TYPE_CODE", (Object)"Normal");
            comboBoxDefaultCollection.put((Object)"HYPERTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HYPOTHYROIDISM_TYPE_CODE", (Object)"No");
            comboBoxDefaultCollection.put((Object)"HORMONE_ABNORMALITY_TYPE_CODE", (Object)"No");
            

            groupName = new String("Patient Endocrine Examination Data Capture");
            
            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT THYROID_GLAND_TYPE_CODE, THYROID_GLAND_TYPE_DESCRIPTION FROM THYROID_GLAND_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "THYROID_GLAND_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"THYROID_GLAND_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HYPERTHYROIDISM_TYPE_CODE, HYPERTHYROIDISM_TYPE_DESCRIPTION FROM HYPERTHYROIDISM_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HYPERTHYROIDISM_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HYPERTHYROIDISM_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HYPOTHYROIDISM_TYPE_CODE, HYPOTHYROIDISM_TYPE_DESCRIPTION FROM HYPOTHYROIDISM_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HYPOTHYROIDISM_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HYPOTHYROIDISM_TYPE_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT HORMONE_ABNORMALITY_TYPE_CODE, HORMONE_ABNORMALITY_TYPE_DESCRIPTION FROM HORMONE_ABNORMALITY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "HORMONE_ABNORMALITY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"HORMONE_ABNORMALITY_TYPE_CODE", (Object)lookupTableData);
            
            
            updateButtonEvent = MenuStateMachine.examination_update_button_pressed_event;
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(EXAMINATION_ENDOCRINE_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(EXAMINATION_ENDOCRINE_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("EXAMINATION_ENDOCRINE_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddMedicalAssesment(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(MEDICAL_ASSESMENT_NUMBER) FROM MEDICAL_ASSESMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(MEDICAL_ASSESMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            updateFieldNameChange = new HashMap(1);
            updateFieldNameChange.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE",(Object)"SYSTEM_CATEGORY_CODE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("MEDICAL_ASSESMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"MEDICAL_ASSESMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"MEDICAL_ASSESMENT");
            tabSymbols.put((Object)"MEDICAL_ASSESMENT", (Object)"Patient Medical Assesment");
            tableAliases.put((Object)"MEDICAL_ASSESMENT", (Object)patientName);

            groupName = new String("Patient Medical Assesment Data Capture");
            
            lookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            
            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"DISEASES");
            symptomList.add(1,(Object)"DISEASE_NAME");
            symptomList.add(2,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"DISEASE_SYNONYMS");
            symptomList.add(4,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"DISEASE_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Diseases",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"DISEASE_SEQUENCE_NUMBER");

            dataSourceTable  = "DISEASES";
            dataSourceField = "DISEASE_NAME";

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Resolved");
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES","SYSTEM_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            
            updateButtonEvent =  MenuStateMachine.assesment_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");

            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"GROUP");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_DISEASE");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_DISEASE", (Object)"OTHER");

            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(MEDICAL_ASSESMENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(MEDICAL_ASSESMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("MEDICAL_ASSESMENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

            lookupTableCrossLinks = new HashMap(2);
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_ICD_CODE");
            lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddFollowUpMedicalAssesment(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber,patientName  = null;

            setTableCount(1);
            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(MEDICAL_ASSESMENT_NUMBER) FROM MEDICAL_ASSESMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(MEDICAL_ASSESMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            updateFieldNameChange = new HashMap(1);
            updateFieldNameChange.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE",(Object)"SYSTEM_CATEGORY_CODE");
           
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("MEDICAL_ASSESMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"MEDICAL_ASSESMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"MEDICAL_ASSESMENT");
            tabSymbols.put((Object)"MEDICAL_ASSESMENT", (Object)"Patient Medical Assesment");
            tableAliases.put((Object)"MEDICAL_ASSESMENT", (Object)patientName);

            groupName = new String("Patient Medical Assesment Data Capture");
            
            lookupTableDataCollection = new HashMap(2);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);
            
            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"DISEASES");
            symptomList.add(1,(Object)"DISEASE_NAME");
            symptomList.add(2,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"DISEASE_SYNONYMS");
            symptomList.add(4,(Object)"DISEASE_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"DISEASE_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Diseases",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"DISEASE_SEQUENCE_NUMBER");

            dataSourceTable  = "DISEASES";
            dataSourceField = "DISEASE_NAME";

            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"Resolved");
            
            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            groupField = "SYSTEM_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"DISEASES","SYSTEM_CATEGORY_TYPE");
            groupedTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)groupedTableData);
            
            updateButtonEvent =  NewMenuStateMachine.final_diagnoses_update_button_pressed_event;

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)"DISEASE_SEQUENCE_NUMBER");

            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"GROUP");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_DISEASE");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_DISEASE", (Object)"OTHER");
            
            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(MEDICAL_ASSESMENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(MEDICAL_ASSESMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("MEDICAL_ASSESMENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");

            lookupTableCrossLinks = new HashMap(2);
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_SEQUENCE_NUMBER");
            lookupTableCrossLinks.put((Object)"DISEASE_ICD_CODE",(Object)crossLinkList.clone());
            crossLinkList = new  ArrayList(1);
            crossLinkList.add((Object)"DISEASE_ICD_CODE");
            lookupTableCrossLinks.put((Object)"DISEASE_SEQUENCE_NUMBER",(Object)crossLinkList.clone());
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayAssesmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displayassessment.xml";

            setTableCount(3);
            accountNumber = keyValue;

            //Table 1
            sqlQuery = "SELECT PREVIOUS_MEDICAL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PREVIOUS_MEDICAL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PREVIOUS_MEDICAL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_MEDICAL_HISTORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PREVIOUS_MEDICAL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_MEDICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"Medical History Data");
            tableAliases.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"Patient");
            
            //Table 2
            sqlQuery = "SELECT PREVIOUS_SURGICAL_HISTORY_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY PREVIOUS_SURGICAL_HISTORY_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PREVIOUS_SURGICAL_HISTORY_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PREVIOUS_SURGICAL_HISTORY", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PREVIOUS_SURGICAL_HISTORY_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY",(Object)dbAccessInstance);
            tableNames.add((Object)"PREVIOUS_SURGICAL_HISTORY");
            tabSymbols.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"Surgical History Data");
            tableAliases.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"Patient");

            //Table 3
            sqlQuery = "SELECT MEDICAL_ASSESMENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' ORDER BY MEDICAL_ASSESMENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "MEDICAL_ASSESMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "MEDICAL_ASSESMENT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("MEDICAL_ASSESMENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"MEDICAL_ASSESMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"MEDICAL_ASSESMENT");
            tabSymbols.put((Object)"MEDICAL_ASSESMENT", (Object)"Medical Assesment Data");
            tableAliases.put((Object)"MEDICAL_ASSESMENT", (Object)"Patient");
            
            lookupTableDataCollection = new HashMap(8);
            

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_NAME FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)lookupTableData);


            sqlQuery = "SELECT ONSET_UNITS_CODE, ONSET_UNITS_DESCRIPTION FROM ONSET_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "ONSET_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ONSET_UNITS_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT CURRENT_STATUS_CODE, CURRENT_STATUS_DESCRIPTION FROM CURRENT_STATUS_PMH";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "CURRENT_STATUS_PMH", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"CURRENT_STATUS_CODE", (Object)lookupTableData);

            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SURGERY_CATEGORY_DESCRIPTION FROM SURGERY_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DIAGNOSES_MAIN_CAUSE_CODE, DIAGNOSES_CAUSE_DESCRIPTION FROM DIAGNOSES_CAUSE_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DIAGNOSES_CAUSE_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DIAGNOSES_MAIN_CAUSE_CODE", (Object)lookupTableData);

            sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER, DISEASE_ICD_CODE FROM DISEASES";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DISEASE_ICD_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT SURGERY_SEQUENCE_NUMBER, SURGERY_NAME FROM SURGERY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)lookupTableData);
            
            groupLookupTableDataCollection = new HashMap(3);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SURGERY_CATEGORY_DESCRIPTION FROM SURGERY_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SURGERY_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);

            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);
            
            sqlQuery = "SELECT SYSTEM_CATEGORY_CODE, SYSTEM_CATEGORY_DESCRIPTION FROM SYSTEM_CATEGORY_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYSTEM_CATEGORY_TYPE", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"DISEASE_SYSTEM_CATEGORY_CODE", (Object)groupLookupTableData);

            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Medical Assesment Report on " + strDateTime + " for: ");

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);
            
            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            //comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(10);
            fieldDispCoordinateCollection = new HashMap(10);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"MEDICAL_ASSESMENT", (Object)"10");

            labelDispCoordinateCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"9,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"11,2");

            labelByTableCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PREVIOUS_MEDICAL_HISTORY",(Object)fieldDispCoordinateCollection.clone());


            labelDispCoordinateCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY_NUMBER", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY_NUMBER", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"SYSTEM_CATEGORY_CODE", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"SURGERY_SEQUENCE_NUMBER", (Object)"15,2");
            labelDispCoordinateCollection.put((Object)"OTHER_SURGERY", (Object)"16,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_SURGERY", (Object)"16,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"17,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS", (Object)"17,2");
            labelDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"18,1");
            fieldDispCoordinateCollection.put((Object)"ONSET_UNITS_CODE", (Object)"18,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"19,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"19,2");

            labelByTableCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PREVIOUS_SURGICAL_HISTORY",(Object)fieldDispCoordinateCollection.clone());
            
            labelDispCoordinateCollection.put((Object)"MEDICAL_ASSESMENT_NUMBER", (Object)"20,1");
            fieldDispCoordinateCollection.put((Object)"MEDICAL_ASSESMENT_NUMBER", (Object)"20,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"21,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"21,2");
            labelDispCoordinateCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)"22,1");
            fieldDispCoordinateCollection.put((Object)"ASSESMENT_SYSTEM_CATEGORY_CODE", (Object)"22,2");
            labelDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"23,1");
            fieldDispCoordinateCollection.put((Object)"DISEASE_SEQUENCE_NUMBER", (Object)"23,2");
            labelDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"24,1");
            fieldDispCoordinateCollection.put((Object)"OTHER_DISEASE", (Object)"24,2");
            labelDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"25,1");
            fieldDispCoordinateCollection.put((Object)"CURRENT_STATUS_CODE", (Object)"25,2");
            labelDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"26,1");
            fieldDispCoordinateCollection.put((Object)"ASSOCIATION", (Object)"26,2");

            labelByTableCollection.put((Object)"MEDICAL_ASSESMENT",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"MEDICAL_ASSESMENT",(Object)fieldDispCoordinateCollection.clone());

            
            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initAddPlanTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PLAN_TREATMENT_NUMBER) FROM PLAN_TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLAN_TREATMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PLAN_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLAN_TREATMENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PLAN_TREATMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PLAN_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PLAN_TREATMENT");
            tabSymbols.put((Object)"PLAN_TREATMENT", (Object)"Treatment Plan");
            tableAliases.put((Object)"PLAN_TREATMENT", (Object)patientName);

            groupName = new String("Patient Treatment Plan Data Capture");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
 
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"TREATMENT");
            symptomList.add(1,(Object)"TREATMENT_NAME");
            symptomList.add(2,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"TREATMENT_SYNONYMS");
            symptomList.add(4,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"TREATMENT_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Treatment",(Object)symptomList.clone());

            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"TREATMENT_SEQUENCE_NUMBER");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            groupField = "TREATMENT_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"TREATMENT","TREATMENT_CATEGORY");
            
            
            groupedTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)groupedTableData);
            

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"TREATMENT_CATEGORY_CODE", (Object)"TREATMENT_SEQUENCE_NUMBER");
            
            updateButtonEvent = MenuStateMachine.plan_update_button_pressed_event;
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"Milligram");
            comboBoxDefaultCollection.put((Object)"TIME_UNITS_CODE", (Object)"Daily");
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"LOOKUP");

            dataSourceTable  = "TREATMENT";
            dataSourceField = "TREATMENT_NAME";

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_TREATMENT");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_TREATMENT", (Object)"OTHER");

            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PLAN_TREATMENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PLAN_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PLAN_TREATMENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initAddFollowUpPlanTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {
        try
        {
            String strMaxNumber, strNextNumber, patientName = null;

            setTableCount(1);

            componentHeight = 25;
            componentWidth = 250;
            componentRows = 14;
            componentCols = 4;
            //set container panel width and height
            componentPanelHeight = 500;
            componentPanelWidth = 600;
            
            accountNumber = keyValue;
            sqlQuery = "SELECT MAX(PLAN_TREATMENT_NUMBER) FROM PLAN_TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLAN_TREATMENT", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PLAN_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1);

            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            patientName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLAN_TREATMENT", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PLAN_TREATMENT_NUMBER", strNextNumber);
            dbAccessCollection.put((Object)"PLAN_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PLAN_TREATMENT");
            tabSymbols.put((Object)"PLAN_TREATMENT", (Object)"Treatment Plan");
            tableAliases.put((Object)"PLAN_TREATMENT", (Object)patientName);

            groupName = new String("Patient Treatment Plan Data Capture");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
 
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);

            symptomList = new ArrayList(6);
            symptomList.add(0,(Object)"TREATMENT");
            symptomList.add(1,(Object)"TREATMENT_NAME");
            symptomList.add(2,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(3,(Object)"TREATMENT_SYNONYMS");
            symptomList.add(4,(Object)"TREATMENT_SEQUENCE_NUMBER");
            symptomList.add(5,(Object)"TREATMENT_SYNONYM_NUMBER");
            
            synonymTableInfoCollection = new HashMap(1);
            synonymTableInfoCollection.put((Object)"Treatment",(Object)symptomList.clone());
            
            updateSynopsisCollection = new HashMap(1);
            updateSynopsisCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"TREATMENT_SEQUENCE_NUMBER");

            groupLookupTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            groupLookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            groupLookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)groupLookupTableData);
            
            groupedTableDataCollection = new HashMap(1);

            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            groupField = "TREATMENT_CATEGORY_CODE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            groupedTableData = dbAccessInstance.getGroupedLookupData(sqlQuery,groupField,"TREATMENT","TREATMENT_CATEGORY");
            
            
            groupedTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)groupedTableData);
            
            dataSourceTable  = "TREATMENT";
            dataSourceField = "TREATMENT_NAME";

            groupTableCrossLinks = new HashMap(1);
            groupTableCrossLinks.put((Object)"TREATMENT_CATEGORY_CODE", (Object)"TREATMENT_SEQUENCE_NUMBER");

            dependantItemList = new ArrayList(1);
            dependantItemList.add((Object)"OTHER_TREATMENT");
            dependanceTableLinks = new HashMap(1);
            dependanceTableLinks.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)dependantItemList.clone());
            
            dependanceItemType = new HashMap(1);
            dependanceItemType.put((Object)"OTHER_TREATMENT", (Object)"OTHER");
            
            updateButtonEvent = NewMenuStateMachine.plan_update_button_pressed_event;
            
            comboBoxDefaultCollection = new HashMap(1);
            comboBoxDefaultCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"Milligram");
            comboBoxDefaultCollection.put((Object)"TIME_UNITS_CODE", (Object)"Daily");
            
            autoSelectFieldCollection = new HashMap(1);
            autoSelectFieldCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"LOOKUP");


            dbWrapUpAccessCollection = new HashMap(1);
            //~
            //USE FOLLOWING CODE TO GET CURRENT DATE AND TIME IN MYSQL FORMAT******************************************!!!
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2) + strDateTime.substring(8);

            sqlQuery = "SELECT MAX(PLAN_TREATMENT_NUMBER) FROM PATIENT_MEDICAL_HISTORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            strMaxNumber = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "MAX(PLAN_TREATMENT_NUMBER)", "INT");
            strNextNumber = String.valueOf(Integer.parseInt(strMaxNumber) + 1); //increment acc number by 1
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            dbAccessInstance.dataTable.addRow(0);
            dbAccessInstance.dataTable.addElement("PLAN_TREATMENT_NUMBER", strNextNumber);
            dbAccessInstance.dataTable.addElement("HIS_DATE_TIME", strDateTime);
            dbAccessInstance.dataTable.addElement("ACCOUNT_NUMBER", accountNumber);
            dbAccessInstance.dataTable.addElement("DELETED","0");
            

            dbWrapUpAccessCollection.put((Object)"PATIENT_MEDICAL_HISTORY",(Object)dbAccessInstance);
            
            setPrimaryWrapUpTableName("PATIENT_MEDICAL_HISTORY");

        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void initDisplayPlanTreatmentModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstTreatmentCode = null;
            String strTreatmentCode = null;
            xmlFileName = "displaytreatmentplan.xml";

            setTableCount(2);
            //@@~
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT PATIENT_TREATMENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' AND PATIENT_TREATMENT_NUMBER > 0 ORDER BY PATIENT_TREATMENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PATIENT_TREATMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_TREATMENT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PATIENT_TREATMENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PATIENT_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PATIENT_TREATMENT");
            tabSymbols.put((Object)"PATIENT_TREATMENT", (Object)"Treatment History Data");
            tableAliases.put((Object)"PATIENT_TREATMENT", (Object)"Patient");

            //Table 2
            sqlQuery = "SELECT PLAN_TREATMENT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' AND PLAN_TREATMENT_NUMBER > 0 ORDER BY PLAN_TREATMENT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstTreatmentCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "PLAN_TREATMENT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");

            DBAccess dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PLAN_TREATMENT", userName, password, _theOS);

            fieldSet = lstTreatmentCode.keySet();
            fieldIter = fieldSet.iterator();
            while (fieldIter.hasNext())
            {
               String fieldName = (String)fieldIter.next();
               if (!fieldName.equalsIgnoreCase("0"))
               {    
                    String fieldValue = (String)lstTreatmentCode.get((Object)fieldName);
                    dbAccessInstance.addWhereFieldList("PLAN_TREATMENT_NUMBER",fieldName);
                    dbAccessInstance.addDateFieldList(fieldName,fieldValue);
                    //dbAccessInstance.addDateFieldList("HIS_DATE_TIME",fieldValue);
               }
            }
           
            result = dbAccessInstance.selectDatabyKey();
            if (result != 0)
            { 
                throw new MTException(InfoManager.DBACCESS_ERROR, dbAccessInstance.getErrorString());
            }

            dbAccessCollection.put((Object)"PLAN_TREATMENT",(Object)dbAccessInstance);
            tableNames.add((Object)"PLAN_TREATMENT");
            tabSymbols.put((Object)"PLAN_TREATMENT", (Object)"Treatment Plan Data");
            tableAliases.put((Object)"PLAN_TREATMENT", (Object)"Patient");

            lookupTableDataCollection = new HashMap(4);
            
            sqlQuery = "SELECT TREATMENT_SEQUENCE_NUMBER, TREATMENT_NAME FROM TREATMENT";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lookupTableData.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lookupTableData.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lookupTableData.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            lookupTableDataCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)lookupTableData);

            sqlQuery = "SELECT DOSAGE_UNIT_CODE, DOSAGE_DESCRIPTION FROM DOSAGE_UNIT_TYPE";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DOSAGE_UNIT_TYPE", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)lookupTableData);
 
            sqlQuery = "SELECT TIME_UNITS_CODE, TIME_UNITS_DESCRIPTION FROM TIME_UNITS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TIME_UNITS", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TIME_UNITS_CODE", (Object)lookupTableData);
            
            sqlQuery = "SELECT TREATMENT_CATEGORY_CODE, TREATMENT_CATEGORY_DESCRIPTION FROM TREATMENT_CATEGORY";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "TREATMENT_CATEGORY", userName, password, _theOS);
            lookupTableData = dbAccessInstance.getLookupData(sqlQuery);
            lookupTableDataCollection.put((Object)"TREATMENT_CATEGORY_CODE", (Object)lookupTableData);

            //Add Group Display Name
            Calendar rightNow = Calendar.getInstance();
            java.util.Date dateTime = rightNow.getTime();
            strDateTime = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK).format(dateTime);
            strDateTime = strDateTime.substring(6,8) + "/" + strDateTime.substring(3,5) +  "/" +  strDateTime.substring(0,2); // + strDateTime.substring(8);

            groupName = new String("Treatment Plan Report On " + strDateTime + " for: ");
            
            sqlQuery = "SELECT FIRST_NAME, INITIALS, SURNAME FROM PATIENT_PHYSICAL WHERE ACCOUNT_NUMBER = " + accountNumber;
            String[] combineList = {"FIRST_NAME", "INITIALS", "SURNAME"}; 
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_PHYSICAL", userName, password, _theOS);
            keyName = dbAccessInstance.getSingleLookupDataCombine(sqlQuery, combineList);

            looseTextItemMapList = new HashMap(2);
            looseTextItemMapList.put((Object)"DATETODAY",(Object)strDateTime);
            looseTextItemMapList.put((Object)"PATIENTNAME",(Object)keyName);

            comboBoxDefaultCollection = new HashMap(2);
            comboBoxDefaultCollection.put((Object)"ONSET_UNITS", (Object)"0");
            comboBoxDefaultCollection.put((Object)"ASSOCIATION", (Object)"null");

            //Field, Label and Object Coordinate init
            labelDispCoordinateCollection = new HashMap(6);
            fieldDispCoordinateCollection = new HashMap(6);
            labelByTableCollection = new HashMap(5);
            fieldByTableCollection = new HashMap(5);
            tableRowDisplayHeightCollection = new HashMap(1);
            objectDispCoordinateCollection = new HashMap(2);

            tableRowDisplayHeightCollection.put((Object)"PATIENT_TREATMENT", (Object)"10");
            tableRowDisplayHeightCollection.put((Object)"PLAN_TREATMENT", (Object)"10");

            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PATIENT_TREATMENT_NUMBER", (Object)"2,1");
            fieldDispCoordinateCollection.put((Object)"PATIENT_TREATMENT_NUMBER", (Object)"2,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"3,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"4,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"4,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE", (Object)"5,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE", (Object)"5,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"6,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"6,2");
            labelDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"7,1");
            fieldDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"7,2");
            labelDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"8,1");
            fieldDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"8,2");
            labelDispCoordinateCollection.put((Object)"DATE_STARTED", (Object)"9,1");
            fieldDispCoordinateCollection.put((Object)"DATE_STARTED", (Object)"9,2");
            labelByTableCollection.put((Object)"PATIENT_TREATMENT",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PATIENT_TREATMENT",(Object)fieldDispCoordinateCollection.clone());
           
            labelDispCoordinateCollection.clear();
            fieldDispCoordinateCollection.clear();
            labelDispCoordinateCollection.put((Object)"PLAN_TREATMENT_NUMBER", (Object)"10,1");
            fieldDispCoordinateCollection.put((Object)"PLAN_TREATMENT_NUMBER", (Object)"10,2");
            labelDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"11,1");
            fieldDispCoordinateCollection.put((Object)"CAPTURE_DATE", (Object)"11,2");
            labelDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"12,1");
            fieldDispCoordinateCollection.put((Object)"TREATMENT_SEQUENCE_NUMBER", (Object)"12,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE", (Object)"13,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE", (Object)"13,2");
            labelDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"14,1");
            fieldDispCoordinateCollection.put((Object)"DOSAGE_UNIT_CODE", (Object)"14,2");
            labelDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"15,1");
            fieldDispCoordinateCollection.put((Object)"FREQUENCY", (Object)"15,2");
            labelDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"16,1");
            fieldDispCoordinateCollection.put((Object)"TIME_UNITS_CODE", (Object)"16,2");
            labelDispCoordinateCollection.put((Object)"DATE_START", (Object)"17,1");
            fieldDispCoordinateCollection.put((Object)"DATE_START", (Object)"17,2");
            labelByTableCollection.put((Object)"PLAN_TREATMENT",(Object)labelDispCoordinateCollection.clone());
            fieldByTableCollection.put((Object)"PLAN_TREATMENT",(Object)fieldDispCoordinateCollection.clone());

            objectDispCoordinateCollection.put((Object)"GROUP_NAME", (Object)"2,1");
            objectDispCoordinateCollection.put((Object)"KEY_NAME", (Object)"2,2");
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
    public void initDiagnosticAidBySymptomModel(String keyValue, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
            HashMap lstComplaintCode = null;
            HashMap lstDiseaseBySymptom = new HashMap(10);
            HashMap lstSymptomByDisease = new HashMap(10);
            HashMap lstDiseases = new HashMap(10);
            HashMap lstSymptoms = new HashMap(10);
            HashMap lstSymptomSynonyms = new HashMap(10);
            ArrayList lstSymptomCode = new ArrayList(5);
            String strComplaintCode = null;
            String symptomCode = null;
            
            groupName = new String("Symptom To Disease Diagnostic Aid");
            accountNumber = keyValue;
            //Table 1
            sqlQuery = "SELECT COMPLAINT_NUMBER, HIS_DATE_TIME FROM PATIENT_MEDICAL_HISTORY WHERE ACCOUNT_NUMBER = " + accountNumber + " AND DELETED = '0' AND COMPLAINT_NUMBER IS NOT NULL ORDER BY COMPLAINT_NUMBER";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_MEDICAL_HISTORY", userName, password, _theOS);
            lstComplaintCode = dbAccessInstance.instSQLDoubleItemListFetch(sqlQuery,  "COMPLAINT_NUMBER", "INT", "HIS_DATE_TIME", "DATE");
            //get all the symptom codes for this patient
            Set lstComplaintCodeKeySet = lstComplaintCode.keySet();
            Iterator lstComplaintCodeIter = lstComplaintCodeKeySet.iterator();
            while (lstComplaintCodeIter.hasNext())
            {
                String theKey = (String)lstComplaintCodeIter.next();
                sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER FROM PATIENT_COMPLAINTS WHERE COMPLAINT_NUMBER = " + theKey;
                dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "PATIENT_COMPLAINTS", userName, password, _theOS);
                symptomCode = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  "SYMPTOM_SEQUENCE_NUMBER", "INT");
                lstSymptomCode.add((Object)symptomCode);
            
            }
            // Now add symptom synonyms
           for (int loop = 0; loop < lstSymptomCode.size(); loop++)
           {
                String sCode = (String)lstSymptomCode.get(loop);
                sqlQuery = "SELECT SYMPTOM_SYNONYM_NUMBER FROM SYMPTOM_SYNONYMS WHERE SYMPTOM_SEQUENCE_NUMBER = " + sCode;
                dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_SYNONYMS", userName, password, _theOS);
                ArrayList synonymList = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  "SYMPTOM_SYNONYM_NUMBER", "INT");
                for (int sLoop = 0; sLoop < synonymList.size(); sLoop++)
                {
                    lstDiseaseBySymptom.put((Object)synonymList.get(sLoop),(Object)null);
                }
                sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER FROM SYMPTOM_SYNONYMS WHERE SYMPTOM_SYNONYM_NUMBER = " + sCode;
                dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOM_SYNONYMS", userName, password, _theOS);
                ArrayList synonymListI = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  "SYMPTOM_SEQUENCE_NUMBER", "INT");
                for (int sLoop = 0; sLoop < synonymListI.size(); sLoop++)
                {
                    lstDiseaseBySymptom.put((Object)synonymListI.get(sLoop),(Object)null);
                }
            }
            //now add symptom synonyms to lstSymptomCode
            Set lstDiseaseBySymptomKeySet = lstDiseaseBySymptom.keySet();
            Iterator lstDiseaseBySymptomIter = lstDiseaseBySymptomKeySet.iterator();
            MTUtils myUtils = new MTUtils();
            while (lstDiseaseBySymptomIter.hasNext())
            {
                String theKey = (String)lstDiseaseBySymptomIter.next();
                //System.out.println("Symptom Key Added = " + theKey);
                lstSymptomCode.add((Object)theKey);
            }  
            //now get all the diseases grouped by symptom
            for (int loop = 0; loop < lstSymptomCode.size(); loop++)
            {
                String sCode = (String)lstSymptomCode.get(loop);
                sqlQuery = "SELECT DISEASE_SEQUENCE_NUMBER FROM SYDISMAP WHERE SYMPTOM_SEQUENCE_NUMBER = " + sCode;
                dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYDISMAP", userName, password, _theOS);
                ArrayList diseaseList = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  "DISEASE_SEQUENCE_NUMBER", "INT");
                lstDiseaseBySymptom.put((Object)sCode,(Object)diseaseList);
            }
            //build up a list of individual diseases
            Set lstDiseaseCodeKeySet = lstDiseaseBySymptom.keySet();
            Iterator lstDiseaseCodeIter = lstDiseaseCodeKeySet.iterator();
            while (lstDiseaseCodeIter.hasNext())
            {
                String tempSymptomKey = (String)lstDiseaseCodeIter.next();
                ArrayList tmpDiseaseList = (ArrayList)lstDiseaseBySymptom.get((Object)tempSymptomKey);
                for (int loop1 = 0; loop1 < tmpDiseaseList.size(); loop1++)
                {
                    String diseaseCode = (String)tmpDiseaseList.get(loop1);
                    sqlQuery = "SELECT DISEASE_NAME FROM DISEASES WHERE DISEASE_SEQUENCE_NUMBER = " + diseaseCode;
                    dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "DISEASES", userName, password, _theOS);
                    String diseaseName = dbAccessInstance.instSQLSingleItemFetchDecr(sqlQuery,  "DISEASE_NAME", "TEXT");
                    lstDiseases.put((Object)diseaseCode,(Object)diseaseName);
                }
            }
            /*if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lstDiseases.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lstDiseases.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lstDiseases.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db*/
            
            
            //now get all the symptoms grouped by disease
            Set lstDiseaseKeySet = lstDiseases.keySet();
            Iterator lstDiseaseIter = lstDiseaseKeySet.iterator();
            while (lstDiseaseIter.hasNext())
            {
                String DiseaseKey = (String)lstDiseaseIter.next();
                sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER FROM SYDISMAP WHERE DISEASE_SEQUENCE_NUMBER = " + DiseaseKey;
                dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYDISMAP", userName, password, _theOS);
                ArrayList symptomList = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  "SYMPTOM_SEQUENCE_NUMBER", "INT");
                lstSymptomByDisease.put((Object)DiseaseKey,(Object)symptomList);
            }
            //build up a list of individual symptoms
            /*This code makes the database connector to mysql run out of connections!!! look waht is the cause
             Set lstSymptomByDiseaseKeySet = lstSymptomByDisease.keySet();
            Iterator lstSymptomByDiseaseKeySetIter = lstSymptomByDiseaseKeySet.iterator();
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            while (lstSymptomByDiseaseKeySetIter.hasNext())
            {
                String tempDiseaseKey = (String)lstSymptomByDiseaseKeySetIter.next();
                ArrayList tmpSymptomList = (ArrayList)lstSymptomByDisease.get((Object)tempDiseaseKey);
                for (int loop2 = 0; loop2 < tmpSymptomList.size(); loop2++)
                {
                    String symptomCode1 = (String)tmpSymptomList.get(loop2);
                    sqlQuery = "SELECT SYMPTOM_NAME FROM SYMPTOMS WHERE SYMPTOM_SEQUENCE_NUMBER = " + symptomCode1;
                    String symptomName = dbAccessInstance.instSQLSingleItemFetchDecr(sqlQuery,  "SYMPTOM_NAME", "TEXT");
                    lstSymptoms.put((Object)symptomCode1,(Object)symptomName);
                }
            }
             **/
            sqlQuery = "SELECT SYMPTOM_SEQUENCE_NUMBER, SYMPTOM_NAME FROM SYMPTOMS";
            dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, "SYMPTOMS", userName, password, _theOS);
            lstSymptoms = dbAccessInstance.getLookupData(sqlQuery);
            
            if (InfoManager.ENCRYPTED_DATABASE == true)
            {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lstSymptoms.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lstSymptoms.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lstSymptoms.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            
            //now populate the generic containers
            inputList = lstSymptomCode;
            mapByInputCollection = lstDiseaseBySymptom;
            inputByMapCollection =  lstSymptomByDisease;
            mapByInputNameCollection = lstDiseases;
            inputByMapNameCollection = lstSymptoms;
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }

    public void buildDynamicSynonymList(String mainItem, ArrayList tableInfo, String _theOS, String userName, char[] password) throws MTException
    {

        try
        {
           String mainTableName = (String)tableInfo.get(0);
           String synonymMainNameFieldName = (String)tableInfo.get(1);
           String synonymMainSeqNumFieldName = (String)tableInfo.get(2);
           String synonymTableName = (String)tableInfo.get(3);
           String synonymSeqNumFieldName = (String)tableInfo.get(4);
           String synonymSeqMapNumFieldName = (String)tableInfo.get(5);
           String synonymCode = null;
           String synonymName = null;
            
           dbAccessInstance = new DBAccess(InfoManager.HOST_NAME, InfoManager.DATABASE_NAME, mainTableName.toUpperCase(), userName, password, _theOS);
            

           sqlQuery = "SELECT " + synonymMainSeqNumFieldName + ", " +  synonymMainNameFieldName + " FROM  " + mainTableName;
           HashMap lstSymptoms = new HashMap(10);
           lstSymptoms = dbAccessInstance.getLookupData(sqlQuery);
           if (InfoManager.ENCRYPTED_DATABASE == true)
           {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    Set crFieldSet = lstSymptoms.keySet();
                    Iterator crFieldIter = crFieldSet.iterator();
                    while (crFieldIter.hasNext())
                    {
                        String keyName = (String)crFieldIter.next();
                        String theValue = (String)lstSymptoms.get((Object)keyName);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        lstSymptoms.put((Object)keyName,(Object)decryptString);
                    }
                }
            }//end if enc db
            Set crFieldSet = lstSymptoms.keySet();
            Iterator crFieldIter = crFieldSet.iterator();
            while (crFieldIter.hasNext())
            {
               String keyName = (String)crFieldIter.next();
               String theValue = (String)lstSymptoms.get((Object)keyName);
               if (theValue.equalsIgnoreCase(mainItem) == true)
               {
                 synonymCode = keyName;
                 break;
               }
            }

           sqlQuery = "SELECT " + synonymSeqMapNumFieldName + " FROM  " + synonymTableName + " WHERE " + synonymSeqNumFieldName + " = " + synonymCode + ";";
           ArrayList tmpSynonymList = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  synonymSeqMapNumFieldName, "INT");
           
           sqlQuery = "SELECT " + synonymSeqNumFieldName + " FROM  " + synonymTableName + " WHERE " + synonymSeqMapNumFieldName + " = " + synonymCode + ";";
           
          ArrayList synonymList = dbAccessInstance.instSQLSingleItemListFetch(sqlQuery,  synonymSeqNumFieldName, "INT");
           
          for (int loop = 0; loop < tmpSynonymList.size(); loop++)
          {
              
             synonymList.add((Object)tmpSynonymList.get(loop)); 
          }
           
           synonymNameList = new ArrayList(10);
           for(int loop = 0; loop < synonymList.size(); loop++)
           {
               String mainTableIndex = (String)synonymList.get(loop);
               sqlQuery = "SELECT " + synonymMainNameFieldName + " FROM  " + mainTableName + " WHERE " + synonymMainSeqNumFieldName + " = " + mainTableIndex + ";";
               synonymName = dbAccessInstance.instSQLSingleItemFetch(sqlQuery,  synonymMainNameFieldName, "TEXT");
               synonymNameList.add(loop,(Object)synonymName);
               
           }
           if (InfoManager.ENCRYPTED_DATABASE == true)
           {
                byte[] dbKey =   utilsInstance.composeKey();
                //byte[] dbKey =   utilsInstance.composeKey();
                byte[] checkKey = "abcdefghijklmnopqrstuvwxyz1234567890".getBytes();
                boolean dummyFlag = true;
                for (int k = 0; k < dbKey.length; k++)
                {
                    if (dbKey[k] !=  checkKey[k])
                    {
                        dummyFlag = false;
                        break;
                    }
                }
                if (dummyFlag == false)
                {
                    
                    int userNameSize = userName.length();
                    int amtNames = (int)Math.ceil((double)36 /(double)userNameSize);
                    String concatName = ""; 
                    for (int cLoop = 0; cLoop < amtNames; cLoop++)
                    {
                        concatName = concatName + userName;
                    }
                    String strMashKey = concatName.substring(0,36);
                    byte[] mashKey =   strMashKey.getBytes();
                    for (int x = 0; x < mashKey.length; x++)
                    {
                        dbKey[x] = (byte)((int)dbKey[x] ^ (int)mashKey[x]);
                    }
                    for (int loop = 0; loop < synonymNameList.size(); loop++)
                    {
                        String theValue = (String)synonymNameList.get(loop);
                        int fullSize = theValue.length();
                        int encStringSize = fullSize >> 1;
                        String decryptString  = decrypCBC(theValue, dbKey, encStringSize);
                        synonymNameList.remove(loop);
                        synonymNameList.add(loop,(Object)decryptString);
                    }
                }
            }//end if enc db
        }
        catch (MTException e)
        {
            throw new MTException(e.getExceptionType(), e.getErrorMessage());
        }
        catch (Exception exc) 
        {
           throw new MTException(InfoManager.BUSINESS_MODEL_ERROR, exc.getMessage());
        } 
    }
    
}
            
