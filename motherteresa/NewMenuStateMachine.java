package motherteresa;
//  Object used by newmenu
//  Generated by LIBERO 2.30 on 14 Nov, 2003, 10:57.
//  Schema file used: lrschema.jav.

import java.awt.*;
import java.applet.*;
import java.net.*;
import java.util.*;
import java.io.*;


abstract public class NewMenuStateMachine
{
    //- Variables used by dialog interpreter --------------------------------

    private static int
        _LR_event,                  //  Event for state transition
        _LR_state,                  //  Current dialog state
        _LR_savest,                 //  Saved dialog state
        _LR_index;                  //  Index of methods function

    public static int
        the_next_event,             //  Next event from module
        the_exception_event;        //  Exception event from module

    private static boolean
        exception_raised;           //  TRUE if exception raised


    //- Symbolic constants and event numbers --------------------------------

    private static int
        _LR_STOP            = 0xFFFF,
        _LR_NULL_EVENT      = -2;
    public static int
        _LR_STATE_after_init = 0,
        _LR_STATE_current_status_enabled = 1,
        _LR_STATE_new_complaint_enabled = 2,
        _LR_STATE_new_complaint_capture = 3,
        _LR_STATE_examination_enabled = 4,
        _LR_STATE_examination_capture = 5,
        _LR_STATE_final_diagnoses_enabled = 6,
        _LR_STATE_final_diagnoses_capture = 7,
        _LR_STATE_plan_enabled = 8,
        _LR_STATE_plan_capture = 9,
        current_status_menu_button_pressed_event = 0,
        examination_menu_button_pressed_event = 1,
        examination_update_button_pressed_event = 2,
        final_diagnoses_menu_button_pressed_event = 3,
        final_diagnoses_update_button_pressed_event = 4,
        new_complaint_menu_button_pressed_event = 5,
        new_complaint_update_button_pressed_event = 6,
        patient_select_button_pressed_event = 7,
        plan_menu_button_pressed_event = 8,
        plan_update_button_pressed_event = 9,
        terminate_event     = -1;

    //- Static areas --------------------------------------------------------

    private static int _LR_nextst [][] = {
        { 0,0,0,0,0,0,0,1,0,0 },
        { 2,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,3,0,0,0,0 },
        { 0,0,0,0,0,0,4,0,0,0 },
        { 0,5,0,0,0,0,0,0,0,0 },
        { 0,0,6,0,0,0,0,0,0,0 },
        { 0,0,0,7,0,0,0,0,0,0 },
        { 0,0,0,0,8,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,9,0 },
        { 0,0,0,0,0,0,0,0,0,9 }
    };

    private static int _LR_action [][] = {
        { 0,0,0,0,0,0,0,1,0,0 },
        { 2,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,3,0,0,0,0 },
        { 0,0,0,0,0,0,4,0,0,0 },
        { 0,5,0,0,0,0,0,0,0,0 },
        { 0,0,6,0,0,0,0,0,0,0 },
        { 0,0,0,7,0,0,0,0,0,0 },
        { 0,0,0,0,8,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,9,0 },
        { 0,0,0,0,0,0,0,0,0,10 }
    };

    private static int _LR_vector [][] = {
        {0},
        {0,_LR_STOP},
        {1,_LR_STOP},
        {5,_LR_STOP},
        {7,_LR_STOP},
        {3,_LR_STOP},
        {8,_LR_STOP},
        {4,_LR_STOP},
        {9,_LR_STOP},
        {6,_LR_STOP},
        {2,_LR_STOP}
    };

    abstract public void initialise_the_program ();
    abstract public void get_external_event ();
    abstract public void display_patient_basic_details ();
    abstract public void display_patient_current_status ();
    abstract public void display_plan_detail ();
    abstract public void examination_capture_display ();
    abstract public void final_diagnoses_capture_display ();
    abstract public void new_complaint_capture_display ();
    abstract public void plan_capture_display ();
    abstract public void update_display_complaint_detail ();
    abstract public void update_display_examination_detail ();
    abstract public void update_display_final_diagnoses_detail ();

    //- Dialog interpreter starts here --------------------------------------

    public void init()
    {
        _LR_state = 0;                  //  First state is always zero
    }

    public void setEvent(int eventNumber)
    {
        the_next_event = eventNumber;                  
    }        

    public int execute ()
    {
        int
            feedback = 0,
            index,
            next_module;

        //_LR_state = 0;                  //  First state is always zero
        //initialise_the_program ();
        while (the_next_event != terminate_event)
          {
            _LR_event = the_next_event;
            if (_LR_event >= 10 || _LR_event < 0)
              {
                String buffer;
                buffer  = "State " + _LR_state + " - event " + _LR_event;
                buffer += " is out of range";
                //System.out.println (buffer);
                break;
              }
            _LR_savest = _LR_state;
            _LR_index  = _LR_action [_LR_state][_LR_event];
            if (_LR_index == 0)
              {
                String buffer;
                buffer  = "State " + _LR_state + " - event " + _LR_event;
                buffer += " is not accepted";
                System.out.println (buffer);
                break;
              }
            the_next_event          = _LR_NULL_EVENT;
            the_exception_event     = _LR_NULL_EVENT;
            exception_raised        = false;
            next_module             = 0;

            for (;;)
              {
                index = _LR_vector [_LR_index][next_module];
                if ((index == _LR_STOP)
                || (exception_raised))
                break;
                switch (index)
                  {
                    case 0: display_patient_basic_details (); break;
                    case 1: display_patient_current_status (); break;
                    case 2: display_plan_detail (); break;
                    case 3: examination_capture_display (); break;
                    case 4: final_diagnoses_capture_display (); break;
                    case 5: new_complaint_capture_display (); break;
                    case 6: plan_capture_display (); break;
                    case 7: update_display_complaint_detail (); break;
                    case 8: update_display_examination_detail (); break;
                    case 9: update_display_final_diagnoses_detail (); break;
                  }
                  next_module++;
              }
            if (exception_raised)
              {
                if (the_exception_event != _LR_NULL_EVENT)
                    _LR_event = the_exception_event;
                the_next_event = _LR_event;
              }
            else
                _LR_state = _LR_nextst [_LR_state][_LR_event];

            /*if (the_next_event == _LR_NULL_EVENT)
              {
                get_external_event ();
                if (the_next_event == _LR_NULL_EVENT)
                  {
                    String buffer;
                    buffer  = "No event set after event " + _LR_event;
                    buffer += " in state " + _LR_state;
                    System.out.println (buffer);
                    break;
                  }
              }*/
          }
        return (feedback);
    }

    //- Standard dialog routines --------------------------------------------
    public void raise_exception (int event)
    {
        exception_raised = true;
        if (event >= 0)
            the_exception_event = event;
    }

}
